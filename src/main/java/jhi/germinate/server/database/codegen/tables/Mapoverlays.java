/*
 * This file is generated by jOOQ.
 */
package jhi.germinate.server.database.codegen.tables;


import java.math.BigDecimal;
import java.sql.Timestamp;

import jhi.germinate.server.database.codegen.GerminateDb;
import jhi.germinate.server.database.codegen.enums.MapoverlaysReferenceTable;
import jhi.germinate.server.database.codegen.tables.records.MapoverlaysRecord;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Row14;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


// @formatter:off
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Mapoverlays extends TableImpl<MapoverlaysRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>germinate_db.mapoverlays</code>
     */
    public static final Mapoverlays MAPOVERLAYS = new Mapoverlays();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MapoverlaysRecord> getRecordType() {
        return MapoverlaysRecord.class;
    }

    /**
     * The column <code>germinate_db.mapoverlays.id</code>. The primary key of
     * this table.
     */
    public final TableField<MapoverlaysRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "The primary key of this table.");

    /**
     * The column <code>germinate_db.mapoverlays.name</code>. A name for the map
     * overlay.
     */
    public final TableField<MapoverlaysRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255).nullable(false), this, "A name for the map overlay.");

    /**
     * The column <code>germinate_db.mapoverlays.description</code>. An optional
     * description of what is shown on the overlay.
     */
    public final TableField<MapoverlaysRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.CLOB, this, "An optional description of what is shown on the overlay.");

    /**
     * The column <code>germinate_db.mapoverlays.bottom_left_lat</code>. The
     * bottom left latitude coordinates in decimal degrees for anchoring on the
     * map.
     */
    public final TableField<MapoverlaysRecord, BigDecimal> BOTTOM_LEFT_LAT = createField(DSL.name("bottom_left_lat"), SQLDataType.DECIMAL(64, 10), this, "The bottom left latitude coordinates in decimal degrees for anchoring on the map.");

    /**
     * The column <code>germinate_db.mapoverlays.bottom_left_lng</code>. The
     * bottom left longitude coordinates in decimal degrees for anchoring on the
     * map.
     */
    public final TableField<MapoverlaysRecord, BigDecimal> BOTTOM_LEFT_LNG = createField(DSL.name("bottom_left_lng"), SQLDataType.DECIMAL(64, 10), this, "The bottom left longitude coordinates in decimal degrees for anchoring on the map.");

    /**
     * @deprecated Unknown data type. If this is a qualified, user-defined type,
     * it may have been excluded from code generation. If this is a built-in
     * type, you can define an explicit {@link org.jooq.Binding} to specify how
     * this type should be handled. Deprecation can be turned off using
     * {@literal <deprecationOnUnknownTypes/>} in your code generator
     * configuration.
     */
    @Deprecated
    public final TableField<MapoverlaysRecord, Object> TOP_RIGHT_LAT = createField(DSL.name("top_right_lat"), org.jooq.impl.DefaultDataType.getDefaultDataType("\"germinate_template_4_22_10_12\".\"mapoverlays_top_right_lat\""), this, "The top right latitude coordinates in decimal degrees for anchoring on the map.");

    /**
     * @deprecated Unknown data type. If this is a qualified, user-defined type,
     * it may have been excluded from code generation. If this is a built-in
     * type, you can define an explicit {@link org.jooq.Binding} to specify how
     * this type should be handled. Deprecation can be turned off using
     * {@literal <deprecationOnUnknownTypes/>} in your code generator
     * configuration.
     */
    @Deprecated
    public final TableField<MapoverlaysRecord, Object> TOP_RIGHT_LNG = createField(DSL.name("top_right_lng"), org.jooq.impl.DefaultDataType.getDefaultDataType("\"germinate_template_4_22_10_12\".\"mapoverlays_top_right_lng\""), this, "The top right longitude coordinates in decimal degrees for anchoring on the map.");

    /**
     * The column <code>germinate_db.mapoverlays.is_legend</code>. Flag to
     * indicate whether this is a legend or an actual overlay.
     */
    public final TableField<MapoverlaysRecord, Boolean> IS_LEGEND = createField(DSL.name("is_legend"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.inline("0", SQLDataType.BOOLEAN)), this, "Flag to indicate whether this is a legend or an actual overlay.");

    /**
     * The column <code>germinate_db.mapoverlays.reference_table</code>.
     * Optionally, other database items can be linked to this. As an example, an
     * overlay can be linked to a climate variable.
     */
    public final TableField<MapoverlaysRecord, MapoverlaysReferenceTable> REFERENCE_TABLE = createField(DSL.name("reference_table"), SQLDataType.VARCHAR(10).asEnumDataType(jhi.germinate.server.database.codegen.enums.MapoverlaysReferenceTable.class), this, "Optionally, other database items can be linked to this. As an example, an overlay can be linked to a climate variable.");

    /**
     * The column <code>germinate_db.mapoverlays.foreign_id</code>. The foreign
     * id within the reference_table of the linked database object.
     */
    public final TableField<MapoverlaysRecord, Integer> FOREIGN_ID = createField(DSL.name("foreign_id"), SQLDataType.INTEGER, this, "The foreign id within the reference_table of the linked database object.");

    /**
     * The column <code>germinate_db.mapoverlays.dataset_id</code>. A dataset id
     * this map overlay is linked to. Useful for providing map overlays for
     * trials data that is not specific to a trait within the dataset.
     */
    public final TableField<MapoverlaysRecord, Integer> DATASET_ID = createField(DSL.name("dataset_id"), SQLDataType.INTEGER, this, "A dataset id this map overlay is linked to. Useful for providing map overlays for trials data that is not specific to a trait within the dataset.");

    /**
     * The column <code>germinate_db.mapoverlays.recording_date</code>. A date
     * that is associated with the timepoint when this has been recorded.
     */
    public final TableField<MapoverlaysRecord, Timestamp> RECORDING_DATE = createField(DSL.name("recording_date"), SQLDataType.TIMESTAMP(0), this, "A date that is associated with the timepoint when this has been recorded.");

    /**
     * The column <code>germinate_db.mapoverlays.created_on</code>. The datetime
     * when this database record has been created.
     */
    public final TableField<MapoverlaysRecord, Timestamp> CREATED_ON = createField(DSL.name("created_on"), SQLDataType.TIMESTAMP(0).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.TIMESTAMP)), this, "The datetime when this database record has been created.");

    /**
     * The column <code>germinate_db.mapoverlays.updated_on</code>. The
     * timestamp when this database record has last been updated.
     */
    public final TableField<MapoverlaysRecord, Timestamp> UPDATED_ON = createField(DSL.name("updated_on"), SQLDataType.TIMESTAMP(0).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.TIMESTAMP)), this, "The timestamp when this database record has last been updated.");

    private Mapoverlays(Name alias, Table<MapoverlaysRecord> aliased) {
        this(alias, aliased, null);
    }

    private Mapoverlays(Name alias, Table<MapoverlaysRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>germinate_db.mapoverlays</code> table reference
     */
    public Mapoverlays(String alias) {
        this(DSL.name(alias), MAPOVERLAYS);
    }

    /**
     * Create an aliased <code>germinate_db.mapoverlays</code> table reference
     */
    public Mapoverlays(Name alias) {
        this(alias, MAPOVERLAYS);
    }

    /**
     * Create a <code>germinate_db.mapoverlays</code> table reference
     */
    public Mapoverlays() {
        this(DSL.name("mapoverlays"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : GerminateDb.GERMINATE_DB;
    }

    @Override
    public Identity<MapoverlaysRecord, Integer> getIdentity() {
        return (Identity<MapoverlaysRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<MapoverlaysRecord> getPrimaryKey() {
        return Internal.createUniqueKey(Mapoverlays.MAPOVERLAYS, DSL.name("KEY_mapoverlays_PRIMARY"), new TableField[] { Mapoverlays.MAPOVERLAYS.ID }, true);
    }

    @Override
    public Mapoverlays as(String alias) {
        return new Mapoverlays(DSL.name(alias), this);
    }

    @Override
    public Mapoverlays as(Name alias) {
        return new Mapoverlays(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Mapoverlays rename(String name) {
        return new Mapoverlays(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Mapoverlays rename(Name name) {
        return new Mapoverlays(name, null);
    }

    // -------------------------------------------------------------------------
    // Row14 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row14<Integer, String, String, BigDecimal, BigDecimal, Object, Object, Boolean, MapoverlaysReferenceTable, Integer, Integer, Timestamp, Timestamp, Timestamp> fieldsRow() {
        return (Row14) super.fieldsRow();
    }
    // @formatter:on
}
