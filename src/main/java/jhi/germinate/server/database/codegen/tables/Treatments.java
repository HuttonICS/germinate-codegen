/*
 * This file is generated by jOOQ.
 */
package jhi.germinate.server.database.codegen.tables;


import java.sql.Timestamp;

import jhi.germinate.server.database.codegen.GerminateDb;
import jhi.germinate.server.database.codegen.tables.records.TreatmentsRecord;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


// @formatter:off
/**
 * For trials data the treatment is used to distinguish between factors.
 * Examples would include whether the trial was treated with fungicides or not.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Treatments extends TableImpl<TreatmentsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>germinate_db.treatments</code>
     */
    public static final Treatments TREATMENTS = new Treatments();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TreatmentsRecord> getRecordType() {
        return TreatmentsRecord.class;
    }

    /**
     * The column <code>germinate_db.treatments.id</code>. Primary id for this
     * table. This uniquely identifies the row.
     */
    public final TableField<TreatmentsRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "Primary id for this table. This uniquely identifies the row.");

    /**
     * The column <code>germinate_db.treatments.name</code>. The name which
     * defines the treatment.
     */
    public final TableField<TreatmentsRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255).nullable(false), this, "The name which defines the treatment.");

    /**
     * The column <code>germinate_db.treatments.description</code>. A longer
     * descripiton of the treatment. This should include enough information to
     * be able to identify what the treatment was and why it was applied.
     */
    public final TableField<TreatmentsRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.VARCHAR(255), this, "A longer descripiton of the treatment. This should include enough information to be able to identify what the treatment was and why it was applied.");

    /**
     * The column <code>germinate_db.treatments.created_on</code>. When the
     * record was created.
     */
    public final TableField<TreatmentsRecord, Timestamp> CREATED_ON = createField(DSL.name("created_on"), SQLDataType.TIMESTAMP(0).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.TIMESTAMP)), this, "When the record was created.");

    /**
     * The column <code>germinate_db.treatments.updated_on</code>. When the
     * record was updated. This may be different from the created on date if
     * changes have been made subsequently to the underlying record.
     */
    public final TableField<TreatmentsRecord, Timestamp> UPDATED_ON = createField(DSL.name("updated_on"), SQLDataType.TIMESTAMP(0).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.TIMESTAMP)), this, "When the record was updated. This may be different from the created on date if changes have been made subsequently to the underlying record.");

    private Treatments(Name alias, Table<TreatmentsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Treatments(Name alias, Table<TreatmentsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("For trials data the treatment is used to distinguish between factors. Examples would include whether the trial was treated with fungicides or not."), TableOptions.table());
    }

    /**
     * Create an aliased <code>germinate_db.treatments</code> table reference
     */
    public Treatments(String alias) {
        this(DSL.name(alias), TREATMENTS);
    }

    /**
     * Create an aliased <code>germinate_db.treatments</code> table reference
     */
    public Treatments(Name alias) {
        this(alias, TREATMENTS);
    }

    /**
     * Create a <code>germinate_db.treatments</code> table reference
     */
    public Treatments() {
        this(DSL.name("treatments"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : GerminateDb.GERMINATE_DB;
    }

    @Override
    public Identity<TreatmentsRecord, Integer> getIdentity() {
        return (Identity<TreatmentsRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<TreatmentsRecord> getPrimaryKey() {
        return Internal.createUniqueKey(Treatments.TREATMENTS, DSL.name("KEY_treatments_PRIMARY"), new TableField[] { Treatments.TREATMENTS.ID }, true);
    }

    @Override
    public Treatments as(String alias) {
        return new Treatments(DSL.name(alias), this);
    }

    @Override
    public Treatments as(Name alias) {
        return new Treatments(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Treatments rename(String name) {
        return new Treatments(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Treatments rename(Name name) {
        return new Treatments(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Integer, String, String, Timestamp, Timestamp> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
    // @formatter:on
}
