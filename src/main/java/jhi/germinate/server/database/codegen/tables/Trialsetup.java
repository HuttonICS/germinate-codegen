/*
 * This file is generated by jOOQ.
 */
package jhi.germinate.server.database.codegen.tables;


import java.math.BigDecimal;
import java.sql.Timestamp;

import jhi.germinate.server.database.codegen.GerminateDb;
import jhi.germinate.server.database.codegen.tables.records.TrialsetupRecord;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Row15;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


// @formatter:off
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Trialsetup extends TableImpl<TrialsetupRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>germinate_db.trialsetup</code>
     */
    public static final Trialsetup TRIALSETUP = new Trialsetup();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TrialsetupRecord> getRecordType() {
        return TrialsetupRecord.class;
    }

    /**
     * The column <code>germinate_db.trialsetup.id</code>.
     */
    public final TableField<TrialsetupRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>germinate_db.trialsetup.germinatebase_id</code>.
     */
    public final TableField<TrialsetupRecord, Integer> GERMINATEBASE_ID = createField(DSL.name("germinatebase_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>germinate_db.trialsetup.dataset_id</code>.
     */
    public final TableField<TrialsetupRecord, Integer> DATASET_ID = createField(DSL.name("dataset_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>germinate_db.trialsetup.location_id</code>.
     */
    public final TableField<TrialsetupRecord, Integer> LOCATION_ID = createField(DSL.name("location_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>germinate_db.trialsetup.treatment_id</code>.
     */
    public final TableField<TrialsetupRecord, Integer> TREATMENT_ID = createField(DSL.name("treatment_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>germinate_db.trialsetup.trialseries_id</code>.
     */
    public final TableField<TrialsetupRecord, Integer> TRIALSERIES_ID = createField(DSL.name("trialseries_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>germinate_db.trialsetup.block</code>.
     */
    public final TableField<TrialsetupRecord, String> BLOCK = createField(DSL.name("block"), SQLDataType.VARCHAR(10).nullable(false).defaultValue(DSL.inline("1", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>germinate_db.trialsetup.rep</code>.
     */
    public final TableField<TrialsetupRecord, String> REP = createField(DSL.name("rep"), SQLDataType.VARCHAR(10).nullable(false).defaultValue(DSL.inline("1", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>germinate_db.trialsetup.trial_row</code>.
     */
    public final TableField<TrialsetupRecord, Short> TRIAL_ROW = createField(DSL.name("trial_row"), SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>germinate_db.trialsetup.trial_column</code>.
     */
    public final TableField<TrialsetupRecord, Short> TRIAL_COLUMN = createField(DSL.name("trial_column"), SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>germinate_db.trialsetup.latitude</code>.
     */
    public final TableField<TrialsetupRecord, BigDecimal> LATITUDE = createField(DSL.name("latitude"), SQLDataType.DECIMAL(64, 10), this, "");

    /**
     * The column <code>germinate_db.trialsetup.longitude</code>.
     */
    public final TableField<TrialsetupRecord, BigDecimal> LONGITUDE = createField(DSL.name("longitude"), SQLDataType.DECIMAL(64, 10), this, "");

    /**
     * The column <code>germinate_db.trialsetup.elevation</code>.
     */
    public final TableField<TrialsetupRecord, BigDecimal> ELEVATION = createField(DSL.name("elevation"), SQLDataType.DECIMAL(64, 10), this, "");

    /**
     * The column <code>germinate_db.trialsetup.created_on</code>.
     */
    public final TableField<TrialsetupRecord, Timestamp> CREATED_ON = createField(DSL.name("created_on"), SQLDataType.TIMESTAMP(0).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>germinate_db.trialsetup.updated_on</code>.
     */
    public final TableField<TrialsetupRecord, Timestamp> UPDATED_ON = createField(DSL.name("updated_on"), SQLDataType.TIMESTAMP(0).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.TIMESTAMP)), this, "");

    private Trialsetup(Name alias, Table<TrialsetupRecord> aliased) {
        this(alias, aliased, null);
    }

    private Trialsetup(Name alias, Table<TrialsetupRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>germinate_db.trialsetup</code> table reference
     */
    public Trialsetup(String alias) {
        this(DSL.name(alias), TRIALSETUP);
    }

    /**
     * Create an aliased <code>germinate_db.trialsetup</code> table reference
     */
    public Trialsetup(Name alias) {
        this(alias, TRIALSETUP);
    }

    /**
     * Create a <code>germinate_db.trialsetup</code> table reference
     */
    public Trialsetup() {
        this(DSL.name("trialsetup"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : GerminateDb.GERMINATE_DB;
    }

    @Override
    public Identity<TrialsetupRecord, Integer> getIdentity() {
        return (Identity<TrialsetupRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<TrialsetupRecord> getPrimaryKey() {
        return Internal.createUniqueKey(Trialsetup.TRIALSETUP, DSL.name("KEY_trialsetup_PRIMARY"), new TableField[] { Trialsetup.TRIALSETUP.ID }, true);
    }

    @Override
    public Trialsetup as(String alias) {
        return new Trialsetup(DSL.name(alias), this);
    }

    @Override
    public Trialsetup as(Name alias) {
        return new Trialsetup(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Trialsetup rename(String name) {
        return new Trialsetup(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Trialsetup rename(Name name) {
        return new Trialsetup(name, null);
    }

    // -------------------------------------------------------------------------
    // Row15 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row15<Integer, Integer, Integer, Integer, Integer, Integer, String, String, Short, Short, BigDecimal, BigDecimal, BigDecimal, Timestamp, Timestamp> fieldsRow() {
        return (Row15) super.fieldsRow();
    }
    // @formatter:on
}
