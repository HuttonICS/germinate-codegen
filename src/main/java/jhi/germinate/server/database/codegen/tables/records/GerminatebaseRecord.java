/*
 * This file is generated by jOOQ.
 */
package jhi.germinate.server.database.codegen.tables.records;


import java.sql.Timestamp;

import jhi.germinate.server.database.codegen.tables.Germinatebase;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record13;
import org.jooq.Row13;
import org.jooq.impl.UpdatableRecordImpl;


// @formatter:off
/**
 * Germinatebase is the Germinate base table which contains passport and other
 * germplasm definition data.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class GerminatebaseRecord extends UpdatableRecordImpl<GerminatebaseRecord> implements Record13<Integer, String, String, String, String, Integer, String, Integer, Integer, Integer, Double, Timestamp, Timestamp> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>germinate_db.germinatebase.id</code>. Primary id for
     * this table. This uniquely identifies the row.
     */
    public void setId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>germinate_db.germinatebase.id</code>. Primary id for
     * this table. This uniquely identifies the row.
     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>germinate_db.germinatebase.general_identifier</code>. A
     * unique identifier.
     */
    public void setGeneralIdentifier(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>germinate_db.germinatebase.general_identifier</code>. A
     * unique identifier.
     */
    public String getGeneralIdentifier() {
        return (String) get(1);
    }

    /**
     * Setter for <code>germinate_db.germinatebase.number</code>. This is the
     * unique identifier for accessions within a genebank, and is assigned when
     * a sample is
     * entered into the genebank collection (e.g. ‘PI 113869’).
     */
    public void setNumber(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>germinate_db.germinatebase.number</code>. This is the
     * unique identifier for accessions within a genebank, and is assigned when
     * a sample is
     * entered into the genebank collection (e.g. ‘PI 113869’).
     */
    public String getNumber() {
        return (String) get(2);
    }

    /**
     * Setter for <code>germinate_db.germinatebase.name</code>. A unique name
     * which defines an entry in the germinatbase table.
     */
    public void setName(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>germinate_db.germinatebase.name</code>. A unique name
     * which defines an entry in the germinatbase table.
     */
    public String getName() {
        return (String) get(3);
    }

    /**
     * Setter for <code>germinate_db.germinatebase.bank_number</code>.
     * Alternative genebank number.
     */
    public void setBankNumber(String value) {
        set(4, value);
    }

    /**
     * Getter for <code>germinate_db.germinatebase.bank_number</code>.
     * Alternative genebank number.
     */
    public String getBankNumber() {
        return (String) get(4);
    }

    /**
     * Setter for <code>germinate_db.germinatebase.taxonomy_id</code>. Foreign
     * key to taxonomies (taxonomies.id).
     */
    public void setTaxonomyId(Integer value) {
        set(5, value);
    }

    /**
     * Getter for <code>germinate_db.germinatebase.taxonomy_id</code>. Foreign
     * key to taxonomies (taxonomies.id).
     */
    public Integer getTaxonomyId() {
        return (Integer) get(5);
    }

    /**
     * Setter for <code>germinate_db.germinatebase.plant_passport</code>. Record
     * if the entry has a plant passport.
     */
    public void setPlantPassport(String value) {
        set(6, value);
    }

    /**
     * Getter for <code>germinate_db.germinatebase.plant_passport</code>. Record
     * if the entry has a plant passport.
     */
    public String getPlantPassport() {
        return (String) get(6);
    }

    /**
     * Setter for <code>germinate_db.germinatebase.location_id</code>. Foreign
     * key to locations (locations.id).
     */
    public void setLocationId(Integer value) {
        set(7, value);
    }

    /**
     * Getter for <code>germinate_db.germinatebase.location_id</code>. Foreign
     * key to locations (locations.id).
     */
    public Integer getLocationId() {
        return (Integer) get(7);
    }

    /**
     * Setter for <code>germinate_db.germinatebase.entitytype_id</code>. Foreign
     * key to entitytypes (entitytypes.id).
     */
    public void setEntitytypeId(Integer value) {
        set(8, value);
    }

    /**
     * Getter for <code>germinate_db.germinatebase.entitytype_id</code>. Foreign
     * key to entitytypes (entitytypes.id).
     */
    public Integer getEntitytypeId() {
        return (Integer) get(8);
    }

    /**
     * Setter for <code>germinate_db.germinatebase.entityparent_id</code>.
     * Foreign key to germinatebase (germinatebase.id).
     */
    public void setEntityparentId(Integer value) {
        set(9, value);
    }

    /**
     * Getter for <code>germinate_db.germinatebase.entityparent_id</code>.
     * Foreign key to germinatebase (germinatebase.id).
     */
    public Integer getEntityparentId() {
        return (Integer) get(9);
    }

    /**
     * Setter for <code>germinate_db.germinatebase.pdci</code>. Passport Data
     * Completeness Index. This is calculated by Germinate. Manual editing of
     * this field will be overwritten.
     */
    public void setPdci(Double value) {
        set(10, value);
    }

    /**
     * Getter for <code>germinate_db.germinatebase.pdci</code>. Passport Data
     * Completeness Index. This is calculated by Germinate. Manual editing of
     * this field will be overwritten.
     */
    public Double getPdci() {
        return (Double) get(10);
    }

    /**
     * Setter for <code>germinate_db.germinatebase.created_on</code>. When the
     * record was created.
     */
    public void setCreatedOn(Timestamp value) {
        set(11, value);
    }

    /**
     * Getter for <code>germinate_db.germinatebase.created_on</code>. When the
     * record was created.
     */
    public Timestamp getCreatedOn() {
        return (Timestamp) get(11);
    }

    /**
     * Setter for <code>germinate_db.germinatebase.updated_on</code>. When the
     * record was updated. This may be different from the created on date if
     * subsequent changes have been made to the underlying record.
     */
    public void setUpdatedOn(Timestamp value) {
        set(12, value);
    }

    /**
     * Getter for <code>germinate_db.germinatebase.updated_on</code>. When the
     * record was updated. This may be different from the created on date if
     * subsequent changes have been made to the underlying record.
     */
    public Timestamp getUpdatedOn() {
        return (Timestamp) get(12);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record13 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row13<Integer, String, String, String, String, Integer, String, Integer, Integer, Integer, Double, Timestamp, Timestamp> fieldsRow() {
        return (Row13) super.fieldsRow();
    }

    @Override
    public Row13<Integer, String, String, String, String, Integer, String, Integer, Integer, Integer, Double, Timestamp, Timestamp> valuesRow() {
        return (Row13) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return Germinatebase.GERMINATEBASE.ID;
    }

    @Override
    public Field<String> field2() {
        return Germinatebase.GERMINATEBASE.GENERAL_IDENTIFIER;
    }

    @Override
    public Field<String> field3() {
        return Germinatebase.GERMINATEBASE.NUMBER;
    }

    @Override
    public Field<String> field4() {
        return Germinatebase.GERMINATEBASE.NAME;
    }

    @Override
    public Field<String> field5() {
        return Germinatebase.GERMINATEBASE.BANK_NUMBER;
    }

    @Override
    public Field<Integer> field6() {
        return Germinatebase.GERMINATEBASE.TAXONOMY_ID;
    }

    @Override
    public Field<String> field7() {
        return Germinatebase.GERMINATEBASE.PLANT_PASSPORT;
    }

    @Override
    public Field<Integer> field8() {
        return Germinatebase.GERMINATEBASE.LOCATION_ID;
    }

    @Override
    public Field<Integer> field9() {
        return Germinatebase.GERMINATEBASE.ENTITYTYPE_ID;
    }

    @Override
    public Field<Integer> field10() {
        return Germinatebase.GERMINATEBASE.ENTITYPARENT_ID;
    }

    @Override
    public Field<Double> field11() {
        return Germinatebase.GERMINATEBASE.PDCI;
    }

    @Override
    public Field<Timestamp> field12() {
        return Germinatebase.GERMINATEBASE.CREATED_ON;
    }

    @Override
    public Field<Timestamp> field13() {
        return Germinatebase.GERMINATEBASE.UPDATED_ON;
    }

    @Override
    public Integer component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getGeneralIdentifier();
    }

    @Override
    public String component3() {
        return getNumber();
    }

    @Override
    public String component4() {
        return getName();
    }

    @Override
    public String component5() {
        return getBankNumber();
    }

    @Override
    public Integer component6() {
        return getTaxonomyId();
    }

    @Override
    public String component7() {
        return getPlantPassport();
    }

    @Override
    public Integer component8() {
        return getLocationId();
    }

    @Override
    public Integer component9() {
        return getEntitytypeId();
    }

    @Override
    public Integer component10() {
        return getEntityparentId();
    }

    @Override
    public Double component11() {
        return getPdci();
    }

    @Override
    public Timestamp component12() {
        return getCreatedOn();
    }

    @Override
    public Timestamp component13() {
        return getUpdatedOn();
    }

    @Override
    public Integer value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getGeneralIdentifier();
    }

    @Override
    public String value3() {
        return getNumber();
    }

    @Override
    public String value4() {
        return getName();
    }

    @Override
    public String value5() {
        return getBankNumber();
    }

    @Override
    public Integer value6() {
        return getTaxonomyId();
    }

    @Override
    public String value7() {
        return getPlantPassport();
    }

    @Override
    public Integer value8() {
        return getLocationId();
    }

    @Override
    public Integer value9() {
        return getEntitytypeId();
    }

    @Override
    public Integer value10() {
        return getEntityparentId();
    }

    @Override
    public Double value11() {
        return getPdci();
    }

    @Override
    public Timestamp value12() {
        return getCreatedOn();
    }

    @Override
    public Timestamp value13() {
        return getUpdatedOn();
    }

    @Override
    public GerminatebaseRecord value1(Integer value) {
        setId(value);
        return this;
    }

    @Override
    public GerminatebaseRecord value2(String value) {
        setGeneralIdentifier(value);
        return this;
    }

    @Override
    public GerminatebaseRecord value3(String value) {
        setNumber(value);
        return this;
    }

    @Override
    public GerminatebaseRecord value4(String value) {
        setName(value);
        return this;
    }

    @Override
    public GerminatebaseRecord value5(String value) {
        setBankNumber(value);
        return this;
    }

    @Override
    public GerminatebaseRecord value6(Integer value) {
        setTaxonomyId(value);
        return this;
    }

    @Override
    public GerminatebaseRecord value7(String value) {
        setPlantPassport(value);
        return this;
    }

    @Override
    public GerminatebaseRecord value8(Integer value) {
        setLocationId(value);
        return this;
    }

    @Override
    public GerminatebaseRecord value9(Integer value) {
        setEntitytypeId(value);
        return this;
    }

    @Override
    public GerminatebaseRecord value10(Integer value) {
        setEntityparentId(value);
        return this;
    }

    @Override
    public GerminatebaseRecord value11(Double value) {
        setPdci(value);
        return this;
    }

    @Override
    public GerminatebaseRecord value12(Timestamp value) {
        setCreatedOn(value);
        return this;
    }

    @Override
    public GerminatebaseRecord value13(Timestamp value) {
        setUpdatedOn(value);
        return this;
    }

    @Override
    public GerminatebaseRecord values(Integer value1, String value2, String value3, String value4, String value5, Integer value6, String value7, Integer value8, Integer value9, Integer value10, Double value11, Timestamp value12, Timestamp value13) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        value10(value10);
        value11(value11);
        value12(value12);
        value13(value13);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached GerminatebaseRecord
     */
    public GerminatebaseRecord() {
        super(Germinatebase.GERMINATEBASE);
    }

    /**
     * Create a detached, initialised GerminatebaseRecord
     */
    public GerminatebaseRecord(Integer id, String generalIdentifier, String number, String name, String bankNumber, Integer taxonomyId, String plantPassport, Integer locationId, Integer entitytypeId, Integer entityparentId, Double pdci, Timestamp createdOn, Timestamp updatedOn) {
        super(Germinatebase.GERMINATEBASE);

        setId(id);
        setGeneralIdentifier(generalIdentifier);
        setNumber(number);
        setName(name);
        setBankNumber(bankNumber);
        setTaxonomyId(taxonomyId);
        setPlantPassport(plantPassport);
        setLocationId(locationId);
        setEntitytypeId(entitytypeId);
        setEntityparentId(entityparentId);
        setPdci(pdci);
        setCreatedOn(createdOn);
        setUpdatedOn(updatedOn);
    }

    /**
     * Create a detached, initialised GerminatebaseRecord
     */
    public GerminatebaseRecord(jhi.germinate.server.database.codegen.tables.pojos.Germinatebase value) {
        super(Germinatebase.GERMINATEBASE);

        if (value != null) {
            setId(value.getId());
            setGeneralIdentifier(value.getGeneralIdentifier());
            setNumber(value.getNumber());
            setName(value.getName());
            setBankNumber(value.getBankNumber());
            setTaxonomyId(value.getTaxonomyId());
            setPlantPassport(value.getPlantPassport());
            setLocationId(value.getLocationId());
            setEntitytypeId(value.getEntitytypeId());
            setEntityparentId(value.getEntityparentId());
            setPdci(value.getPdci());
            setCreatedOn(value.getCreatedOn());
            setUpdatedOn(value.getUpdatedOn());
        }
    }
    // @formatter:on
}
