/*
 * This file is generated by jOOQ.
 */
package jhi.germinate.server.database.codegen.tables.records;


import jhi.germinate.server.database.codegen.enums.ViewTablePedigreesRelationshipType;
import jhi.germinate.server.database.codegen.tables.ViewTablePedigrees;

import org.jooq.Field;
import org.jooq.Record14;
import org.jooq.Row14;
import org.jooq.impl.TableRecordImpl;


// @formatter:off
/**
 * VIEW
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ViewTablePedigreesRecord extends TableRecordImpl<ViewTablePedigreesRecord> implements Record14<Integer, String, String, Integer, String, String, Integer, String, Integer, String, ViewTablePedigreesRelationshipType, String, String, String> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>germinate_db.view_table_pedigrees.parent_id</code>.
     * Primary id for this table. This uniquely identifies the row.
     */
    public void setParentId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>germinate_db.view_table_pedigrees.parent_id</code>.
     * Primary id for this table. This uniquely identifies the row.
     */
    public Integer getParentId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>germinate_db.view_table_pedigrees.parent_gid</code>. A
     * unique identifier.
     */
    public void setParentGid(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>germinate_db.view_table_pedigrees.parent_gid</code>. A
     * unique identifier.
     */
    public String getParentGid() {
        return (String) get(1);
    }

    /**
     * Setter for <code>germinate_db.view_table_pedigrees.parent_name</code>. A
     * unique name which defines an entry in the germinatbase table.
     */
    public void setParentName(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>germinate_db.view_table_pedigrees.parent_name</code>. A
     * unique name which defines an entry in the germinatbase table.
     */
    public String getParentName() {
        return (String) get(2);
    }

    /**
     * Setter for <code>germinate_db.view_table_pedigrees.child_id</code>.
     * Primary id for this table. This uniquely identifies the row.
     */
    public void setChildId(Integer value) {
        set(3, value);
    }

    /**
     * Getter for <code>germinate_db.view_table_pedigrees.child_id</code>.
     * Primary id for this table. This uniquely identifies the row.
     */
    public Integer getChildId() {
        return (Integer) get(3);
    }

    /**
     * Setter for <code>germinate_db.view_table_pedigrees.child_gid</code>. A
     * unique identifier.
     */
    public void setChildGid(String value) {
        set(4, value);
    }

    /**
     * Getter for <code>germinate_db.view_table_pedigrees.child_gid</code>. A
     * unique identifier.
     */
    public String getChildGid() {
        return (String) get(4);
    }

    /**
     * Setter for <code>germinate_db.view_table_pedigrees.child_name</code>. A
     * unique name which defines an entry in the germinatbase table.
     */
    public void setChildName(String value) {
        set(5, value);
    }

    /**
     * Getter for <code>germinate_db.view_table_pedigrees.child_name</code>. A
     * unique name which defines an entry in the germinatbase table.
     */
    public String getChildName() {
        return (String) get(5);
    }

    /**
     * Setter for <code>germinate_db.view_table_pedigrees.dataset_id</code>.
     * Primary id for this table. This uniquely identifies the row.
     */
    public void setDatasetId(Integer value) {
        set(6, value);
    }

    /**
     * Getter for <code>germinate_db.view_table_pedigrees.dataset_id</code>.
     * Primary id for this table. This uniquely identifies the row.
     */
    public Integer getDatasetId() {
        return (Integer) get(6);
    }

    /**
     * Setter for <code>germinate_db.view_table_pedigrees.dataset_name</code>.
     * Describes the dataset.
     */
    public void setDatasetName(String value) {
        set(7, value);
    }

    /**
     * Getter for <code>germinate_db.view_table_pedigrees.dataset_name</code>.
     * Describes the dataset.
     */
    public String getDatasetName() {
        return (String) get(7);
    }

    /**
     * Setter for <code>germinate_db.view_table_pedigrees.experiment_id</code>.
     * Primary id for this table. This uniquely identifies the row.
     */
    public void setExperimentId(Integer value) {
        set(8, value);
    }

    /**
     * Getter for <code>germinate_db.view_table_pedigrees.experiment_id</code>.
     * Primary id for this table. This uniquely identifies the row.
     */
    public Integer getExperimentId() {
        return (Integer) get(8);
    }

    /**
     * Setter for
     * <code>germinate_db.view_table_pedigrees.experiment_name</code>. The name
     * of the experiment.
     */
    public void setExperimentName(String value) {
        set(9, value);
    }

    /**
     * Getter for
     * <code>germinate_db.view_table_pedigrees.experiment_name</code>. The name
     * of the experiment.
     */
    public String getExperimentName() {
        return (String) get(9);
    }

    /**
     * Setter for
     * <code>germinate_db.view_table_pedigrees.relationship_type</code>. Male or
     * Female parent. Should be recorded as 'M' (male) or 'F' (female).
     */
    public void setRelationshipType(ViewTablePedigreesRelationshipType value) {
        set(10, value);
    }

    /**
     * Getter for
     * <code>germinate_db.view_table_pedigrees.relationship_type</code>. Male or
     * Female parent. Should be recorded as 'M' (male) or 'F' (female).
     */
    public ViewTablePedigreesRelationshipType getRelationshipType() {
        return (ViewTablePedigreesRelationshipType) get(10);
    }

    /**
     * Setter for
     * <code>germinate_db.view_table_pedigrees.relationship_description</code>.
     * Can be used as a meta-data field to describe the relationships if a
     * complex rellationship is required. Examples may include, 'is a complex
     * cross containing', 'F4 generation' and so on. This is used by the Helium
     * pedigree visualiztion tool.
     */
    public void setRelationshipDescription(String value) {
        set(11, value);
    }

    /**
     * Getter for
     * <code>germinate_db.view_table_pedigrees.relationship_description</code>.
     * Can be used as a meta-data field to describe the relationships if a
     * complex rellationship is required. Examples may include, 'is a complex
     * cross containing', 'F4 generation' and so on. This is used by the Helium
     * pedigree visualiztion tool.
     */
    public String getRelationshipDescription() {
        return (String) get(11);
    }

    /**
     * Setter for
     * <code>germinate_db.view_table_pedigrees.pedigree_description</code>. The
     * name of the pedigree.
     */
    public void setPedigreeDescription(String value) {
        set(12, value);
    }

    /**
     * Getter for
     * <code>germinate_db.view_table_pedigrees.pedigree_description</code>. The
     * name of the pedigree.
     */
    public String getPedigreeDescription() {
        return (String) get(12);
    }

    /**
     * Setter for
     * <code>germinate_db.view_table_pedigrees.pedigree_author</code>. Who is
     * responsible for the creation of the pedigree. Attribution should be
     * included in here for pedigree sources.
     */
    public void setPedigreeAuthor(String value) {
        set(13, value);
    }

    /**
     * Getter for
     * <code>germinate_db.view_table_pedigrees.pedigree_author</code>. Who is
     * responsible for the creation of the pedigree. Attribution should be
     * included in here for pedigree sources.
     */
    public String getPedigreeAuthor() {
        return (String) get(13);
    }

    // -------------------------------------------------------------------------
    // Record14 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row14<Integer, String, String, Integer, String, String, Integer, String, Integer, String, ViewTablePedigreesRelationshipType, String, String, String> fieldsRow() {
        return (Row14) super.fieldsRow();
    }

    @Override
    public Row14<Integer, String, String, Integer, String, String, Integer, String, Integer, String, ViewTablePedigreesRelationshipType, String, String, String> valuesRow() {
        return (Row14) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return ViewTablePedigrees.VIEW_TABLE_PEDIGREES.PARENT_ID;
    }

    @Override
    public Field<String> field2() {
        return ViewTablePedigrees.VIEW_TABLE_PEDIGREES.PARENT_GID;
    }

    @Override
    public Field<String> field3() {
        return ViewTablePedigrees.VIEW_TABLE_PEDIGREES.PARENT_NAME;
    }

    @Override
    public Field<Integer> field4() {
        return ViewTablePedigrees.VIEW_TABLE_PEDIGREES.CHILD_ID;
    }

    @Override
    public Field<String> field5() {
        return ViewTablePedigrees.VIEW_TABLE_PEDIGREES.CHILD_GID;
    }

    @Override
    public Field<String> field6() {
        return ViewTablePedigrees.VIEW_TABLE_PEDIGREES.CHILD_NAME;
    }

    @Override
    public Field<Integer> field7() {
        return ViewTablePedigrees.VIEW_TABLE_PEDIGREES.DATASET_ID;
    }

    @Override
    public Field<String> field8() {
        return ViewTablePedigrees.VIEW_TABLE_PEDIGREES.DATASET_NAME;
    }

    @Override
    public Field<Integer> field9() {
        return ViewTablePedigrees.VIEW_TABLE_PEDIGREES.EXPERIMENT_ID;
    }

    @Override
    public Field<String> field10() {
        return ViewTablePedigrees.VIEW_TABLE_PEDIGREES.EXPERIMENT_NAME;
    }

    @Override
    public Field<ViewTablePedigreesRelationshipType> field11() {
        return ViewTablePedigrees.VIEW_TABLE_PEDIGREES.RELATIONSHIP_TYPE;
    }

    @Override
    public Field<String> field12() {
        return ViewTablePedigrees.VIEW_TABLE_PEDIGREES.RELATIONSHIP_DESCRIPTION;
    }

    @Override
    public Field<String> field13() {
        return ViewTablePedigrees.VIEW_TABLE_PEDIGREES.PEDIGREE_DESCRIPTION;
    }

    @Override
    public Field<String> field14() {
        return ViewTablePedigrees.VIEW_TABLE_PEDIGREES.PEDIGREE_AUTHOR;
    }

    @Override
    public Integer component1() {
        return getParentId();
    }

    @Override
    public String component2() {
        return getParentGid();
    }

    @Override
    public String component3() {
        return getParentName();
    }

    @Override
    public Integer component4() {
        return getChildId();
    }

    @Override
    public String component5() {
        return getChildGid();
    }

    @Override
    public String component6() {
        return getChildName();
    }

    @Override
    public Integer component7() {
        return getDatasetId();
    }

    @Override
    public String component8() {
        return getDatasetName();
    }

    @Override
    public Integer component9() {
        return getExperimentId();
    }

    @Override
    public String component10() {
        return getExperimentName();
    }

    @Override
    public ViewTablePedigreesRelationshipType component11() {
        return getRelationshipType();
    }

    @Override
    public String component12() {
        return getRelationshipDescription();
    }

    @Override
    public String component13() {
        return getPedigreeDescription();
    }

    @Override
    public String component14() {
        return getPedigreeAuthor();
    }

    @Override
    public Integer value1() {
        return getParentId();
    }

    @Override
    public String value2() {
        return getParentGid();
    }

    @Override
    public String value3() {
        return getParentName();
    }

    @Override
    public Integer value4() {
        return getChildId();
    }

    @Override
    public String value5() {
        return getChildGid();
    }

    @Override
    public String value6() {
        return getChildName();
    }

    @Override
    public Integer value7() {
        return getDatasetId();
    }

    @Override
    public String value8() {
        return getDatasetName();
    }

    @Override
    public Integer value9() {
        return getExperimentId();
    }

    @Override
    public String value10() {
        return getExperimentName();
    }

    @Override
    public ViewTablePedigreesRelationshipType value11() {
        return getRelationshipType();
    }

    @Override
    public String value12() {
        return getRelationshipDescription();
    }

    @Override
    public String value13() {
        return getPedigreeDescription();
    }

    @Override
    public String value14() {
        return getPedigreeAuthor();
    }

    @Override
    public ViewTablePedigreesRecord value1(Integer value) {
        setParentId(value);
        return this;
    }

    @Override
    public ViewTablePedigreesRecord value2(String value) {
        setParentGid(value);
        return this;
    }

    @Override
    public ViewTablePedigreesRecord value3(String value) {
        setParentName(value);
        return this;
    }

    @Override
    public ViewTablePedigreesRecord value4(Integer value) {
        setChildId(value);
        return this;
    }

    @Override
    public ViewTablePedigreesRecord value5(String value) {
        setChildGid(value);
        return this;
    }

    @Override
    public ViewTablePedigreesRecord value6(String value) {
        setChildName(value);
        return this;
    }

    @Override
    public ViewTablePedigreesRecord value7(Integer value) {
        setDatasetId(value);
        return this;
    }

    @Override
    public ViewTablePedigreesRecord value8(String value) {
        setDatasetName(value);
        return this;
    }

    @Override
    public ViewTablePedigreesRecord value9(Integer value) {
        setExperimentId(value);
        return this;
    }

    @Override
    public ViewTablePedigreesRecord value10(String value) {
        setExperimentName(value);
        return this;
    }

    @Override
    public ViewTablePedigreesRecord value11(ViewTablePedigreesRelationshipType value) {
        setRelationshipType(value);
        return this;
    }

    @Override
    public ViewTablePedigreesRecord value12(String value) {
        setRelationshipDescription(value);
        return this;
    }

    @Override
    public ViewTablePedigreesRecord value13(String value) {
        setPedigreeDescription(value);
        return this;
    }

    @Override
    public ViewTablePedigreesRecord value14(String value) {
        setPedigreeAuthor(value);
        return this;
    }

    @Override
    public ViewTablePedigreesRecord values(Integer value1, String value2, String value3, Integer value4, String value5, String value6, Integer value7, String value8, Integer value9, String value10, ViewTablePedigreesRelationshipType value11, String value12, String value13, String value14) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        value10(value10);
        value11(value11);
        value12(value12);
        value13(value13);
        value14(value14);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ViewTablePedigreesRecord
     */
    public ViewTablePedigreesRecord() {
        super(ViewTablePedigrees.VIEW_TABLE_PEDIGREES);
    }

    /**
     * Create a detached, initialised ViewTablePedigreesRecord
     */
    public ViewTablePedigreesRecord(Integer parentId, String parentGid, String parentName, Integer childId, String childGid, String childName, Integer datasetId, String datasetName, Integer experimentId, String experimentName, ViewTablePedigreesRelationshipType relationshipType, String relationshipDescription, String pedigreeDescription, String pedigreeAuthor) {
        super(ViewTablePedigrees.VIEW_TABLE_PEDIGREES);

        setParentId(parentId);
        setParentGid(parentGid);
        setParentName(parentName);
        setChildId(childId);
        setChildGid(childGid);
        setChildName(childName);
        setDatasetId(datasetId);
        setDatasetName(datasetName);
        setExperimentId(experimentId);
        setExperimentName(experimentName);
        setRelationshipType(relationshipType);
        setRelationshipDescription(relationshipDescription);
        setPedigreeDescription(pedigreeDescription);
        setPedigreeAuthor(pedigreeAuthor);
    }

    /**
     * Create a detached, initialised ViewTablePedigreesRecord
     */
    public ViewTablePedigreesRecord(jhi.germinate.server.database.codegen.tables.pojos.ViewTablePedigrees value) {
        super(ViewTablePedigrees.VIEW_TABLE_PEDIGREES);

        if (value != null) {
            setParentId(value.getParentId());
            setParentGid(value.getParentGid());
            setParentName(value.getParentName());
            setChildId(value.getChildId());
            setChildGid(value.getChildGid());
            setChildName(value.getChildName());
            setDatasetId(value.getDatasetId());
            setDatasetName(value.getDatasetName());
            setExperimentId(value.getExperimentId());
            setExperimentName(value.getExperimentName());
            setRelationshipType(value.getRelationshipType());
            setRelationshipDescription(value.getRelationshipDescription());
            setPedigreeDescription(value.getPedigreeDescription());
            setPedigreeAuthor(value.getPedigreeAuthor());
        }
    }
    // @formatter:on
}
