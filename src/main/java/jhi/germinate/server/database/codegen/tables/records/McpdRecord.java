/*
 * This file is generated by jOOQ.
 */
package jhi.germinate.server.database.codegen.tables.records;


import java.math.BigDecimal;
import java.sql.Timestamp;

import jhi.germinate.server.database.codegen.tables.Mcpd;

import org.jooq.Record1;
import org.jooq.impl.UpdatableRecordImpl;


// @formatter:off
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class McpdRecord extends UpdatableRecordImpl<McpdRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>germinate_db.mcpd.germinatebase_id</code>.
     */
    public void setGerminatebaseId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>germinate_db.mcpd.germinatebase_id</code>.
     */
    public Integer getGerminatebaseId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>germinate_db.mcpd.puid</code>. Any persistent, unique
     * identifier assigned to the accession so it can be unambiguously
     * referenced at the global level and the information associated with it
     * harvested through automated means. Report one PUID for each accession.
     */
    public void setPuid(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>germinate_db.mcpd.puid</code>. Any persistent, unique
     * identifier assigned to the accession so it can be unambiguously
     * referenced at the global level and the information associated with it
     * harvested through automated means. Report one PUID for each accession.
     */
    public String getPuid() {
        return (String) get(1);
    }

    /**
     * Setter for <code>germinate_db.mcpd.instcode</code>. FAO WIEWS code of the
     * institute where the accession is maintained. The codes consist of the
     * 3-letter ISO 3166 country code of the country where the institute is
     * located plus a number (e.g. COL001). The current set of institute codes
     * is available from http://www.fao.org/wiews. For those institutes not yet
     * having an FAO Code, or for those with 'obsolete' codes, see 'Common
     * formatting rules (v)'.
     */
    public void setInstcode(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>germinate_db.mcpd.instcode</code>. FAO WIEWS code of the
     * institute where the accession is maintained. The codes consist of the
     * 3-letter ISO 3166 country code of the country where the institute is
     * located plus a number (e.g. COL001). The current set of institute codes
     * is available from http://www.fao.org/wiews. For those institutes not yet
     * having an FAO Code, or for those with 'obsolete' codes, see 'Common
     * formatting rules (v)'.
     */
    public String getInstcode() {
        return (String) get(2);
    }

    /**
     * Setter for <code>germinate_db.mcpd.accenumb</code>. This is the unique
     * identifier for accessions within a genebank, and is assigned when a
     * sample is entered into the genebank collection (e.g. 'PI 113869').
     */
    public void setAccenumb(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>germinate_db.mcpd.accenumb</code>. This is the unique
     * identifier for accessions within a genebank, and is assigned when a
     * sample is entered into the genebank collection (e.g. 'PI 113869').
     */
    public String getAccenumb() {
        return (String) get(3);
    }

    /**
     * Setter for <code>germinate_db.mcpd.collnumb</code>. Original identifier
     * assigned by the collector(s) of the sample, normally composed of the name
     * or initials of the collector(s) followed by a number (e.g. 'FM9909').
     * This identifier is essential for identifying duplicates held in different
     * collections.
     */
    public void setCollnumb(String value) {
        set(4, value);
    }

    /**
     * Getter for <code>germinate_db.mcpd.collnumb</code>. Original identifier
     * assigned by the collector(s) of the sample, normally composed of the name
     * or initials of the collector(s) followed by a number (e.g. 'FM9909').
     * This identifier is essential for identifying duplicates held in different
     * collections.
     */
    public String getCollnumb() {
        return (String) get(4);
    }

    /**
     * Setter for <code>germinate_db.mcpd.collcode</code>. FAO WIEWS code of the
     * institute collecting the sample. If the holding institute has collected
     * the material, the collecting institute code (COLLCODE) should be the same
     * as the holding institute code (INSTCODE). Follows INSTCODE standard.
     * Multiple values are separated by a semicolon without space.
     */
    public void setCollcode(String value) {
        set(5, value);
    }

    /**
     * Getter for <code>germinate_db.mcpd.collcode</code>. FAO WIEWS code of the
     * institute collecting the sample. If the holding institute has collected
     * the material, the collecting institute code (COLLCODE) should be the same
     * as the holding institute code (INSTCODE). Follows INSTCODE standard.
     * Multiple values are separated by a semicolon without space.
     */
    public String getCollcode() {
        return (String) get(5);
    }

    /**
     * Setter for <code>germinate_db.mcpd.collname</code>. Name of the institute
     * collecting the sample. This descriptor should be used only if COLLCODE
     * cannot be filled because the FAO WIEWS code for this institute is not
     * available. Multiple values are separated by a semicolon without space.
     */
    public void setCollname(String value) {
        set(6, value);
    }

    /**
     * Getter for <code>germinate_db.mcpd.collname</code>. Name of the institute
     * collecting the sample. This descriptor should be used only if COLLCODE
     * cannot be filled because the FAO WIEWS code for this institute is not
     * available. Multiple values are separated by a semicolon without space.
     */
    public String getCollname() {
        return (String) get(6);
    }

    /**
     * Setter for <code>germinate_db.mcpd.collinstaddress</code>. Address of the
     * institute collecting the sample. This descriptor should be used only if
     * COLLCODE cannot be filled since the FAO WIEWS code for this institute is
     * not available. Multiple values are separated by a semicolon without
     * space.
     */
    public void setCollinstaddress(String value) {
        set(7, value);
    }

    /**
     * Getter for <code>germinate_db.mcpd.collinstaddress</code>. Address of the
     * institute collecting the sample. This descriptor should be used only if
     * COLLCODE cannot be filled since the FAO WIEWS code for this institute is
     * not available. Multiple values are separated by a semicolon without
     * space.
     */
    public String getCollinstaddress() {
        return (String) get(7);
    }

    /**
     * Setter for <code>germinate_db.mcpd.collmissid</code>. Identifier of the
     * collecting mission used by the Collecting Institute (4 or 4.1) (e.g.
     * 'CIATFOR052', 'CN426').
     */
    public void setCollmissid(String value) {
        set(8, value);
    }

    /**
     * Getter for <code>germinate_db.mcpd.collmissid</code>. Identifier of the
     * collecting mission used by the Collecting Institute (4 or 4.1) (e.g.
     * 'CIATFOR052', 'CN426').
     */
    public String getCollmissid() {
        return (String) get(8);
    }

    /**
     * Setter for <code>germinate_db.mcpd.genus</code>. Genus name for taxon.
     * Initial uppercase letter required.
     */
    public void setGenus(String value) {
        set(9, value);
    }

    /**
     * Getter for <code>germinate_db.mcpd.genus</code>. Genus name for taxon.
     * Initial uppercase letter required.
     */
    public String getGenus() {
        return (String) get(9);
    }

    /**
     * Setter for <code>germinate_db.mcpd.species</code>. Specific epithet
     * portion of the scientific name in lowercase letters. Only the following
     * abbreviation is allowed: 'sp.'
     */
    public void setSpecies(String value) {
        set(10, value);
    }

    /**
     * Getter for <code>germinate_db.mcpd.species</code>. Specific epithet
     * portion of the scientific name in lowercase letters. Only the following
     * abbreviation is allowed: 'sp.'
     */
    public String getSpecies() {
        return (String) get(10);
    }

    /**
     * Setter for <code>germinate_db.mcpd.spauthor</code>. Provide the authority
     * for the species name.
     */
    public void setSpauthor(String value) {
        set(11, value);
    }

    /**
     * Getter for <code>germinate_db.mcpd.spauthor</code>. Provide the authority
     * for the species name.
     */
    public String getSpauthor() {
        return (String) get(11);
    }

    /**
     * Setter for <code>germinate_db.mcpd.subtaxa</code>. Subtaxon can be used
     * to store any additional taxonomic identifier. The following abbreviations
     * are allowed: 'subsp.' (for subspecies); 'convar.' (for convariety);
     * 'var.' (for variety); 'f.' (for form); 'Group' (for 'cultivar group').
     */
    public void setSubtaxa(String value) {
        set(12, value);
    }

    /**
     * Getter for <code>germinate_db.mcpd.subtaxa</code>. Subtaxon can be used
     * to store any additional taxonomic identifier. The following abbreviations
     * are allowed: 'subsp.' (for subspecies); 'convar.' (for convariety);
     * 'var.' (for variety); 'f.' (for form); 'Group' (for 'cultivar group').
     */
    public String getSubtaxa() {
        return (String) get(12);
    }

    /**
     * Setter for <code>germinate_db.mcpd.subtauthor</code>. Provide the
     * subtaxon authority at the most detailed taxonomic level.
     */
    public void setSubtauthor(String value) {
        set(13, value);
    }

    /**
     * Getter for <code>germinate_db.mcpd.subtauthor</code>. Provide the
     * subtaxon authority at the most detailed taxonomic level.
     */
    public String getSubtauthor() {
        return (String) get(13);
    }

    /**
     * Setter for <code>germinate_db.mcpd.cropname</code>. Common name of the
     * crop. Example: 'malting barley', 'macadamia', 'maïs'.
     */
    public void setCropname(String value) {
        set(14, value);
    }

    /**
     * Getter for <code>germinate_db.mcpd.cropname</code>. Common name of the
     * crop. Example: 'malting barley', 'macadamia', 'maïs'.
     */
    public String getCropname() {
        return (String) get(14);
    }

    /**
     * Setter for <code>germinate_db.mcpd.accename</code>. Either a registered
     * or other designation given to the material received, other than the
     * donor's accession number (23) or collecting number (3). First letter
     * uppercase. Multiple names are separated by a semicolon without space.
     * Example: Accession name: Bogatyr;Symphony;Emma.
     */
    public void setAccename(String value) {
        set(15, value);
    }

    /**
     * Getter for <code>germinate_db.mcpd.accename</code>. Either a registered
     * or other designation given to the material received, other than the
     * donor's accession number (23) or collecting number (3). First letter
     * uppercase. Multiple names are separated by a semicolon without space.
     * Example: Accession name: Bogatyr;Symphony;Emma.
     */
    public String getAccename() {
        return (String) get(15);
    }

    /**
     * Setter for <code>germinate_db.mcpd.acqdate</code>. Date on which the
     * accession entered the collection where YYYY is the year, MM is the month
     * and DD is the day. Missing data (MM or DD) should be indicated with
     * hyphens or '00' [double zero].
     */
    public void setAcqdate(String value) {
        set(16, value);
    }

    /**
     * Getter for <code>germinate_db.mcpd.acqdate</code>. Date on which the
     * accession entered the collection where YYYY is the year, MM is the month
     * and DD is the day. Missing data (MM or DD) should be indicated with
     * hyphens or '00' [double zero].
     */
    public String getAcqdate() {
        return (String) get(16);
    }

    /**
     * Setter for <code>germinate_db.mcpd.origcty</code>. 3-letter ISO 3166-1
     * code of the country in which the sample was originally collected (e.g.
     * landrace, crop wild relative, farmers' variety), bred or selected
     * (breeding lines, GMOs, segregating populations, hybrids, modern
     * cultivars, etc.).
     */
    public void setOrigcty(String value) {
        set(17, value);
    }

    /**
     * Getter for <code>germinate_db.mcpd.origcty</code>. 3-letter ISO 3166-1
     * code of the country in which the sample was originally collected (e.g.
     * landrace, crop wild relative, farmers' variety), bred or selected
     * (breeding lines, GMOs, segregating populations, hybrids, modern
     * cultivars, etc.).
     */
    public String getOrigcty() {
        return (String) get(17);
    }

    /**
     * Setter for <code>germinate_db.mcpd.collsite</code>. Location information
     * below the country level that describes where the accession was collected,
     * preferable in English. This might include the distance in kilometres and
     * direction from the nearest town, village or map grid reference point,
     * (e.g. 7 km south of Curitiba in the state of Parana).
     */
    public void setCollsite(String value) {
        set(18, value);
    }

    /**
     * Getter for <code>germinate_db.mcpd.collsite</code>. Location information
     * below the country level that describes where the accession was collected,
     * preferable in English. This might include the distance in kilometres and
     * direction from the nearest town, village or map grid reference point,
     * (e.g. 7 km south of Curitiba in the state of Parana).
     */
    public String getCollsite() {
        return (String) get(18);
    }

    /**
     * Setter for <code>germinate_db.mcpd.declatitude</code>. Latitude expressed
     * in decimal degrees. Positive values are North of the Equator; negative
     * values are South of the Equator (e.g. -44.6975).
     */
    public void setDeclatitude(BigDecimal value) {
        set(19, value);
    }

    /**
     * Getter for <code>germinate_db.mcpd.declatitude</code>. Latitude expressed
     * in decimal degrees. Positive values are North of the Equator; negative
     * values are South of the Equator (e.g. -44.6975).
     */
    public BigDecimal getDeclatitude() {
        return (BigDecimal) get(19);
    }

    /**
     * Setter for <code>germinate_db.mcpd.latitude</code>. Degrees (2 digits)
     * minutes (2 digits), and seconds (2 digits) followed by N (North) or S
     * (South) (e.g. 103020S). Every missing digit (minutes or seconds) should
     * be indicated with a hyphen. Leading zeros are required (e.g. 10----S;
     * 011530N; 4531--S).
     */
    public void setLatitude(String value) {
        set(20, value);
    }

    /**
     * Getter for <code>germinate_db.mcpd.latitude</code>. Degrees (2 digits)
     * minutes (2 digits), and seconds (2 digits) followed by N (North) or S
     * (South) (e.g. 103020S). Every missing digit (minutes or seconds) should
     * be indicated with a hyphen. Leading zeros are required (e.g. 10----S;
     * 011530N; 4531--S).
     */
    public String getLatitude() {
        return (String) get(20);
    }

    /**
     * Setter for <code>germinate_db.mcpd.declongitude</code>. Longitude
     * expressed in decimal degrees. Positive values are East of the Greenwich
     * Meridian; negative values are West of the Greenwich Meridian (e.g.
     * +120.9123).
     */
    public void setDeclongitude(BigDecimal value) {
        set(21, value);
    }

    /**
     * Getter for <code>germinate_db.mcpd.declongitude</code>. Longitude
     * expressed in decimal degrees. Positive values are East of the Greenwich
     * Meridian; negative values are West of the Greenwich Meridian (e.g.
     * +120.9123).
     */
    public BigDecimal getDeclongitude() {
        return (BigDecimal) get(21);
    }

    /**
     * Setter for <code>germinate_db.mcpd.longitude</code>. Degrees (3 digits),
     * minutes (2 digits), and seconds (2 digits) followed by E (East) or W
     * (West) (e.g. 0762510W). Every missing digit (minutes or seconds) should
     * be indicated with a hyphen. Leading zeros are required (e.g. 076----W).
     */
    public void setLongitude(String value) {
        set(22, value);
    }

    /**
     * Getter for <code>germinate_db.mcpd.longitude</code>. Degrees (3 digits),
     * minutes (2 digits), and seconds (2 digits) followed by E (East) or W
     * (West) (e.g. 0762510W). Every missing digit (minutes or seconds) should
     * be indicated with a hyphen. Leading zeros are required (e.g. 076----W).
     */
    public String getLongitude() {
        return (String) get(22);
    }

    /**
     * Setter for <code>germinate_db.mcpd.coorduncert</code>. Uncertainty
     * associated with the coordinates in metres. Leave the value empty if the
     * uncertainty is unknown.
     */
    public void setCoorduncert(Integer value) {
        set(23, value);
    }

    /**
     * Getter for <code>germinate_db.mcpd.coorduncert</code>. Uncertainty
     * associated with the coordinates in metres. Leave the value empty if the
     * uncertainty is unknown.
     */
    public Integer getCoorduncert() {
        return (Integer) get(23);
    }

    /**
     * Setter for <code>germinate_db.mcpd.coorddatum</code>. The geodetic datum
     * or spatial reference system upon which the coordinates given in decimal
     * latitude and decimal longitude are based (e.g. WGS84, ETRS89, NAD83). The
     * GPS uses the WGS84 datum.
     */
    public void setCoorddatum(String value) {
        set(24, value);
    }

    /**
     * Getter for <code>germinate_db.mcpd.coorddatum</code>. The geodetic datum
     * or spatial reference system upon which the coordinates given in decimal
     * latitude and decimal longitude are based (e.g. WGS84, ETRS89, NAD83). The
     * GPS uses the WGS84 datum.
     */
    public String getCoorddatum() {
        return (String) get(24);
    }

    /**
     * Setter for <code>germinate_db.mcpd.georefmeth</code>. The georeferencing
     * method used (GPS, determined from map, gazetteer, or estimated using
     * software). Leave the value empty if georeferencing method is not known.
     */
    public void setGeorefmeth(String value) {
        set(25, value);
    }

    /**
     * Getter for <code>germinate_db.mcpd.georefmeth</code>. The georeferencing
     * method used (GPS, determined from map, gazetteer, or estimated using
     * software). Leave the value empty if georeferencing method is not known.
     */
    public String getGeorefmeth() {
        return (String) get(25);
    }

    /**
     * Setter for <code>germinate_db.mcpd.elevation</code>. Elevation of
     * collecting site expressed in metres above sea level. Negative values are
     * allowed.
     */
    public void setElevation(BigDecimal value) {
        set(26, value);
    }

    /**
     * Getter for <code>germinate_db.mcpd.elevation</code>. Elevation of
     * collecting site expressed in metres above sea level. Negative values are
     * allowed.
     */
    public BigDecimal getElevation() {
        return (BigDecimal) get(26);
    }

    /**
     * Setter for <code>germinate_db.mcpd.colldate</code>. Collecting date of
     * the sample, where YYYY is the year, MM is the month and DD is the day.
     * Missing data (MM or DD) should be indicated with hyphens or '00' [double
     * zero].
     */
    public void setColldate(String value) {
        set(27, value);
    }

    /**
     * Getter for <code>germinate_db.mcpd.colldate</code>. Collecting date of
     * the sample, where YYYY is the year, MM is the month and DD is the day.
     * Missing data (MM or DD) should be indicated with hyphens or '00' [double
     * zero].
     */
    public String getColldate() {
        return (String) get(27);
    }

    /**
     * Setter for <code>germinate_db.mcpd.bredcode</code>. FAO WIEWS code of the
     * institute that has bred the material. If the holding institute has bred
     * the material, the breeding institute code (BREDCODE) should be the same
     * as the holding institute code (INSTCODE). Follows INSTCODE standard.
     * Multiple values are separated by a semicolon without space.
     */
    public void setBredcode(String value) {
        set(28, value);
    }

    /**
     * Getter for <code>germinate_db.mcpd.bredcode</code>. FAO WIEWS code of the
     * institute that has bred the material. If the holding institute has bred
     * the material, the breeding institute code (BREDCODE) should be the same
     * as the holding institute code (INSTCODE). Follows INSTCODE standard.
     * Multiple values are separated by a semicolon without space.
     */
    public String getBredcode() {
        return (String) get(28);
    }

    /**
     * Setter for <code>germinate_db.mcpd.bredname</code>. Name of the institute
     * (or person) that bred the material. This descriptor should be used only
     * if BREDCODE cannot be filled because the FAO WIEWS code for this
     * institute is not available. Multiple names are separated by a semicolon
     * without space.
     */
    public void setBredname(String value) {
        set(29, value);
    }

    /**
     * Getter for <code>germinate_db.mcpd.bredname</code>. Name of the institute
     * (or person) that bred the material. This descriptor should be used only
     * if BREDCODE cannot be filled because the FAO WIEWS code for this
     * institute is not available. Multiple names are separated by a semicolon
     * without space.
     */
    public String getBredname() {
        return (String) get(29);
    }

    /**
     * Setter for <code>germinate_db.mcpd.sampstat</code>. The coding scheme
     * proposed can be used at 3 different levels of detail: either by using the
     * general codes (in boldface) such as 100, 200, 300, 400, or by using the
     * more specific codes such as 110, 120, etc.
     */
    public void setSampstat(Integer value) {
        set(30, value);
    }

    /**
     * Getter for <code>germinate_db.mcpd.sampstat</code>. The coding scheme
     * proposed can be used at 3 different levels of detail: either by using the
     * general codes (in boldface) such as 100, 200, 300, 400, or by using the
     * more specific codes such as 110, 120, etc.
     */
    public Integer getSampstat() {
        return (Integer) get(30);
    }

    /**
     * Setter for <code>germinate_db.mcpd.ancest</code>. Information about
     * either pedigree or other description of ancestral information (e.g.
     * parent variety in case of mutant or selection). For example a pedigree
     * 'Hanna/7*Atlas//Turk/8*Atlas' or a description 'mutation found in Hanna',
     * 'selection from Irene' or 'cross involving amongst others Hanna and
     * Irene'.
     */
    public void setAncest(String value) {
        set(31, value);
    }

    /**
     * Getter for <code>germinate_db.mcpd.ancest</code>. Information about
     * either pedigree or other description of ancestral information (e.g.
     * parent variety in case of mutant or selection). For example a pedigree
     * 'Hanna/7*Atlas//Turk/8*Atlas' or a description 'mutation found in Hanna',
     * 'selection from Irene' or 'cross involving amongst others Hanna and
     * Irene'.
     */
    public String getAncest() {
        return (String) get(31);
    }

    /**
     * Setter for <code>germinate_db.mcpd.collsrc</code>. The coding scheme
     * proposed can be used at 2 different levels of detail: either by using the
     * general codes (in boldface) such as 10, 20, 30, 40, etc., or by using the
     * more specific codes, such as 11, 12, etc.
     */
    public void setCollsrc(Integer value) {
        set(32, value);
    }

    /**
     * Getter for <code>germinate_db.mcpd.collsrc</code>. The coding scheme
     * proposed can be used at 2 different levels of detail: either by using the
     * general codes (in boldface) such as 10, 20, 30, 40, etc., or by using the
     * more specific codes, such as 11, 12, etc.
     */
    public Integer getCollsrc() {
        return (Integer) get(32);
    }

    /**
     * Setter for <code>germinate_db.mcpd.donorcode</code>. FAO WIEWS code of
     * the donor institute. Follows INSTCODE standard.
     */
    public void setDonorcode(String value) {
        set(33, value);
    }

    /**
     * Getter for <code>germinate_db.mcpd.donorcode</code>. FAO WIEWS code of
     * the donor institute. Follows INSTCODE standard.
     */
    public String getDonorcode() {
        return (String) get(33);
    }

    /**
     * Setter for <code>germinate_db.mcpd.donorname</code>. Name of the donor
     * institute (or person). This descriptor should be used only if DONORCODE
     * cannot be filled because the FAO WIEWS code for this institute is not
     * available.
     */
    public void setDonorname(String value) {
        set(34, value);
    }

    /**
     * Getter for <code>germinate_db.mcpd.donorname</code>. Name of the donor
     * institute (or person). This descriptor should be used only if DONORCODE
     * cannot be filled because the FAO WIEWS code for this institute is not
     * available.
     */
    public String getDonorname() {
        return (String) get(34);
    }

    /**
     * Setter for <code>germinate_db.mcpd.donornumb</code>. Identifier assigned
     * to an accession by the donor. Follows ACCENUMB standard.
     */
    public void setDonornumb(String value) {
        set(35, value);
    }

    /**
     * Getter for <code>germinate_db.mcpd.donornumb</code>. Identifier assigned
     * to an accession by the donor. Follows ACCENUMB standard.
     */
    public String getDonornumb() {
        return (String) get(35);
    }

    /**
     * Setter for <code>germinate_db.mcpd.othernumb</code>. Any other
     * identifiers known to exist in other collections for this accession. Use
     * the following format: INSTCODE:ACCENUMB;INSTCODE:identifier;… INSTCODE
     * and identifier are separated by a colon without space. Pairs of INSTCODE
     * and identifier are separated by a semicolon without space. When the
     * institute is not known, the identifier should be preceded by a colon.
     */
    public void setOthernumb(String value) {
        set(36, value);
    }

    /**
     * Getter for <code>germinate_db.mcpd.othernumb</code>. Any other
     * identifiers known to exist in other collections for this accession. Use
     * the following format: INSTCODE:ACCENUMB;INSTCODE:identifier;… INSTCODE
     * and identifier are separated by a colon without space. Pairs of INSTCODE
     * and identifier are separated by a semicolon without space. When the
     * institute is not known, the identifier should be preceded by a colon.
     */
    public String getOthernumb() {
        return (String) get(36);
    }

    /**
     * Setter for <code>germinate_db.mcpd.duplsite</code>. FAO WIEWS code of the
     * institute(s) where a safety duplicate of the accession is maintained.
     * Multiple values are separated by a semicolon without space. Follows
     * INSTCODE standard.
     */
    public void setDuplsite(String value) {
        set(37, value);
    }

    /**
     * Getter for <code>germinate_db.mcpd.duplsite</code>. FAO WIEWS code of the
     * institute(s) where a safety duplicate of the accession is maintained.
     * Multiple values are separated by a semicolon without space. Follows
     * INSTCODE standard.
     */
    public String getDuplsite() {
        return (String) get(37);
    }

    /**
     * Setter for <code>germinate_db.mcpd.duplinstname</code>. Name of the
     * institute where a safety duplicate of the accession is maintained.
     * Multiple values are separated by a semicolon without space.
     */
    public void setDuplinstname(String value) {
        set(38, value);
    }

    /**
     * Getter for <code>germinate_db.mcpd.duplinstname</code>. Name of the
     * institute where a safety duplicate of the accession is maintained.
     * Multiple values are separated by a semicolon without space.
     */
    public String getDuplinstname() {
        return (String) get(38);
    }

    /**
     * Setter for <code>germinate_db.mcpd.storage</code>. If germplasm is
     * maintained under different types of storage, multiple choices are
     * allowed, separated by a semicolon (e.g. 20;30). (Refer to FAO/IPGRI
     * Genebank Standards 1994 for details on storage type.)
     */
    public void setStorage(String value) {
        set(39, value);
    }

    /**
     * Getter for <code>germinate_db.mcpd.storage</code>. If germplasm is
     * maintained under different types of storage, multiple choices are
     * allowed, separated by a semicolon (e.g. 20;30). (Refer to FAO/IPGRI
     * Genebank Standards 1994 for details on storage type.)
     */
    public String getStorage() {
        return (String) get(39);
    }

    /**
     * Setter for <code>germinate_db.mcpd.mlsstat</code>. The status of an
     * accession with regards to the Multilateral System (MLS) of the
     * International Treaty on Plant Genetic Resources for Food and Agriculture.
     * Leave the value empty if the status is not known
     */
    public void setMlsstat(Integer value) {
        set(40, value);
    }

    /**
     * Getter for <code>germinate_db.mcpd.mlsstat</code>. The status of an
     * accession with regards to the Multilateral System (MLS) of the
     * International Treaty on Plant Genetic Resources for Food and Agriculture.
     * Leave the value empty if the status is not known
     */
    public Integer getMlsstat() {
        return (Integer) get(40);
    }

    /**
     * Setter for <code>germinate_db.mcpd.remarks</code>. The remarks field is
     * used to add notes or to elaborate on descriptors with value 99 or 999 (=
     * Other). Prefix remarks with the field name they refer to and a colon (:)
     * without space (e.g. COLLSRC:riverside). Distinct remarks referring to
     * different fields are separated by semicolons without space.
     */
    public void setRemarks(String value) {
        set(41, value);
    }

    /**
     * Getter for <code>germinate_db.mcpd.remarks</code>. The remarks field is
     * used to add notes or to elaborate on descriptors with value 99 or 999 (=
     * Other). Prefix remarks with the field name they refer to and a colon (:)
     * without space (e.g. COLLSRC:riverside). Distinct remarks referring to
     * different fields are separated by semicolons without space.
     */
    public String getRemarks() {
        return (String) get(41);
    }

    /**
     * Setter for <code>germinate_db.mcpd.created_on</code>. Date and time when
     * this record was created.
     */
    public void setCreatedOn(Timestamp value) {
        set(42, value);
    }

    /**
     * Getter for <code>germinate_db.mcpd.created_on</code>. Date and time when
     * this record was created.
     */
    public Timestamp getCreatedOn() {
        return (Timestamp) get(42);
    }

    /**
     * Setter for <code>germinate_db.mcpd.updated_on</code>. Timestamp of the
     * last update to this record.
     */
    public void setUpdatedOn(Timestamp value) {
        set(43, value);
    }

    /**
     * Getter for <code>germinate_db.mcpd.updated_on</code>. Timestamp of the
     * last update to this record.
     */
    public Timestamp getUpdatedOn() {
        return (Timestamp) get(43);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached McpdRecord
     */
    public McpdRecord() {
        super(Mcpd.MCPD);
    }

    /**
     * Create a detached, initialised McpdRecord
     */
    public McpdRecord(Integer germinatebaseId, String puid, String instcode, String accenumb, String collnumb, String collcode, String collname, String collinstaddress, String collmissid, String genus, String species, String spauthor, String subtaxa, String subtauthor, String cropname, String accename, String acqdate, String origcty, String collsite, BigDecimal declatitude, String latitude, BigDecimal declongitude, String longitude, Integer coorduncert, String coorddatum, String georefmeth, BigDecimal elevation, String colldate, String bredcode, String bredname, Integer sampstat, String ancest, Integer collsrc, String donorcode, String donorname, String donornumb, String othernumb, String duplsite, String duplinstname, String storage, Integer mlsstat, String remarks, Timestamp createdOn, Timestamp updatedOn) {
        super(Mcpd.MCPD);

        setGerminatebaseId(germinatebaseId);
        setPuid(puid);
        setInstcode(instcode);
        setAccenumb(accenumb);
        setCollnumb(collnumb);
        setCollcode(collcode);
        setCollname(collname);
        setCollinstaddress(collinstaddress);
        setCollmissid(collmissid);
        setGenus(genus);
        setSpecies(species);
        setSpauthor(spauthor);
        setSubtaxa(subtaxa);
        setSubtauthor(subtauthor);
        setCropname(cropname);
        setAccename(accename);
        setAcqdate(acqdate);
        setOrigcty(origcty);
        setCollsite(collsite);
        setDeclatitude(declatitude);
        setLatitude(latitude);
        setDeclongitude(declongitude);
        setLongitude(longitude);
        setCoorduncert(coorduncert);
        setCoorddatum(coorddatum);
        setGeorefmeth(georefmeth);
        setElevation(elevation);
        setColldate(colldate);
        setBredcode(bredcode);
        setBredname(bredname);
        setSampstat(sampstat);
        setAncest(ancest);
        setCollsrc(collsrc);
        setDonorcode(donorcode);
        setDonorname(donorname);
        setDonornumb(donornumb);
        setOthernumb(othernumb);
        setDuplsite(duplsite);
        setDuplinstname(duplinstname);
        setStorage(storage);
        setMlsstat(mlsstat);
        setRemarks(remarks);
        setCreatedOn(createdOn);
        setUpdatedOn(updatedOn);
    }

    /**
     * Create a detached, initialised McpdRecord
     */
    public McpdRecord(jhi.germinate.server.database.codegen.tables.pojos.Mcpd value) {
        super(Mcpd.MCPD);

        if (value != null) {
            setGerminatebaseId(value.getGerminatebaseId());
            setPuid(value.getPuid());
            setInstcode(value.getInstcode());
            setAccenumb(value.getAccenumb());
            setCollnumb(value.getCollnumb());
            setCollcode(value.getCollcode());
            setCollname(value.getCollname());
            setCollinstaddress(value.getCollinstaddress());
            setCollmissid(value.getCollmissid());
            setGenus(value.getGenus());
            setSpecies(value.getSpecies());
            setSpauthor(value.getSpauthor());
            setSubtaxa(value.getSubtaxa());
            setSubtauthor(value.getSubtauthor());
            setCropname(value.getCropname());
            setAccename(value.getAccename());
            setAcqdate(value.getAcqdate());
            setOrigcty(value.getOrigcty());
            setCollsite(value.getCollsite());
            setDeclatitude(value.getDeclatitude());
            setLatitude(value.getLatitude());
            setDeclongitude(value.getDeclongitude());
            setLongitude(value.getLongitude());
            setCoorduncert(value.getCoorduncert());
            setCoorddatum(value.getCoorddatum());
            setGeorefmeth(value.getGeorefmeth());
            setElevation(value.getElevation());
            setColldate(value.getColldate());
            setBredcode(value.getBredcode());
            setBredname(value.getBredname());
            setSampstat(value.getSampstat());
            setAncest(value.getAncest());
            setCollsrc(value.getCollsrc());
            setDonorcode(value.getDonorcode());
            setDonorname(value.getDonorname());
            setDonornumb(value.getDonornumb());
            setOthernumb(value.getOthernumb());
            setDuplsite(value.getDuplsite());
            setDuplinstname(value.getDuplinstname());
            setStorage(value.getStorage());
            setMlsstat(value.getMlsstat());
            setRemarks(value.getRemarks());
            setCreatedOn(value.getCreatedOn());
            setUpdatedOn(value.getUpdatedOn());
        }
    }
    // @formatter:on
}
