/*
 * This file is generated by jOOQ.
 */
package jhi.germinate.server.database.codegen.tables;


import java.math.BigDecimal;
import java.sql.Timestamp;

import jhi.germinate.server.database.binding.SynonymBinding;
import jhi.germinate.server.database.codegen.GerminateDb;
import jhi.germinate.server.database.codegen.tables.records.ViewTableCompoundDataRecord;

import org.jooq.Field;
import org.jooq.Name;
import org.jooq.Row15;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


// @formatter:off
/**
 * VIEW
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ViewTableCompoundData extends TableImpl<ViewTableCompoundDataRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>germinate_db.view_table_compound_data</code>
     */
    public static final ViewTableCompoundData VIEW_TABLE_COMPOUND_DATA = new ViewTableCompoundData();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ViewTableCompoundDataRecord> getRecordType() {
        return ViewTableCompoundDataRecord.class;
    }

    /**
     * The column
     * <code>germinate_db.view_table_compound_data.germplasm_id</code>. Primary
     * id for this table. This uniquely identifies the row.
     */
    public final TableField<ViewTableCompoundDataRecord, Integer> GERMPLASM_ID = createField(DSL.name("germplasm_id"), SQLDataType.INTEGER.defaultValue(DSL.inline("0", SQLDataType.INTEGER)), this, "Primary id for this table. This uniquely identifies the row.");

    /**
     * The column
     * <code>germinate_db.view_table_compound_data.germplasm_gid</code>. A
     * unique identifier.
     */
    public final TableField<ViewTableCompoundDataRecord, String> GERMPLASM_GID = createField(DSL.name("germplasm_gid"), SQLDataType.VARCHAR(255), this, "A unique identifier.");

    /**
     * The column
     * <code>germinate_db.view_table_compound_data.germplasm_name</code>. A
     * unique name which defines an entry in the germinatbase table.
     */
    public final TableField<ViewTableCompoundDataRecord, String> GERMPLASM_NAME = createField(DSL.name("germplasm_name"), SQLDataType.VARCHAR(255), this, "A unique name which defines an entry in the germinatbase table.");

    /**
     * The column
     * <code>germinate_db.view_table_compound_data.germplasm_synonyms</code>.
     * The synonyms as a json array.
     */
    public final TableField<ViewTableCompoundDataRecord, String[]> GERMPLASM_SYNONYMS = createField(DSL.name("germplasm_synonyms"), SQLDataType.JSON, this, "The synonyms as a json array.", new SynonymBinding());

    /**
     * The column
     * <code>germinate_db.view_table_compound_data.entity_parent_name</code>. A
     * unique name which defines an entry in the germinatbase table.
     */
    public final TableField<ViewTableCompoundDataRecord, String> ENTITY_PARENT_NAME = createField(DSL.name("entity_parent_name"), SQLDataType.VARCHAR(255), this, "A unique name which defines an entry in the germinatbase table.");

    /**
     * The column
     * <code>germinate_db.view_table_compound_data.entity_parent_general_identifier</code>.
     * A unique identifier.
     */
    public final TableField<ViewTableCompoundDataRecord, String> ENTITY_PARENT_GENERAL_IDENTIFIER = createField(DSL.name("entity_parent_general_identifier"), SQLDataType.VARCHAR(255), this, "A unique identifier.");

    /**
     * The column
     * <code>germinate_db.view_table_compound_data.entity_type</code>. The name
     * of the entity type.
     */
    public final TableField<ViewTableCompoundDataRecord, String> ENTITY_TYPE = createField(DSL.name("entity_type"), SQLDataType.VARCHAR(255), this, "The name of the entity type.");

    /**
     * The column <code>germinate_db.view_table_compound_data.dataset_id</code>.
     * Primary id for this table. This uniquely identifies the row.
     */
    public final TableField<ViewTableCompoundDataRecord, Integer> DATASET_ID = createField(DSL.name("dataset_id"), SQLDataType.INTEGER.defaultValue(DSL.inline("0", SQLDataType.INTEGER)), this, "Primary id for this table. This uniquely identifies the row.");

    /**
     * The column
     * <code>germinate_db.view_table_compound_data.dataset_name</code>.
     * Describes the dataset.
     */
    public final TableField<ViewTableCompoundDataRecord, String> DATASET_NAME = createField(DSL.name("dataset_name"), SQLDataType.CLOB, this, "Describes the dataset.");

    /**
     * The column
     * <code>germinate_db.view_table_compound_data.dataset_description</code>.
     * The name of this dataset.
     */
    public final TableField<ViewTableCompoundDataRecord, String> DATASET_DESCRIPTION = createField(DSL.name("dataset_description"), SQLDataType.CLOB, this, "The name of this dataset.");

    /**
     * The column
     * <code>germinate_db.view_table_compound_data.compound_id</code>. Primary
     * id for this table. This uniquely identifies the row.
     */
    public final TableField<ViewTableCompoundDataRecord, Integer> COMPOUND_ID = createField(DSL.name("compound_id"), SQLDataType.INTEGER.defaultValue(DSL.inline("0", SQLDataType.INTEGER)), this, "Primary id for this table. This uniquely identifies the row.");

    /**
     * The column
     * <code>germinate_db.view_table_compound_data.compound_name</code>.
     * Compound full name.
     */
    public final TableField<ViewTableCompoundDataRecord, String> COMPOUND_NAME = createField(DSL.name("compound_name"), SQLDataType.VARCHAR(255), this, "Compound full name.");

    /**
     * The column <code>germinate_db.view_table_compound_data.unit_name</code>.
     * The name of the unit. This should be the name of the unit in full.
     */
    public final TableField<ViewTableCompoundDataRecord, String> UNIT_NAME = createField(DSL.name("unit_name"), SQLDataType.VARCHAR(255).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "The name of the unit. This should be the name of the unit in full.");

    /**
     * The column
     * <code>germinate_db.view_table_compound_data.recording_date</code>. Date
     * when the phenotypic result was recorded. Should be formatted 'YYYY-MM-DD
     * HH:MM:SS' or just 'YYYY-MM-DD' where a timestamp is not available.
     */
    public final TableField<ViewTableCompoundDataRecord, Timestamp> RECORDING_DATE = createField(DSL.name("recording_date"), SQLDataType.TIMESTAMP(0), this, "Date when the phenotypic result was recorded. Should be formatted 'YYYY-MM-DD HH:MM:SS' or just 'YYYY-MM-DD' where a timestamp is not available.");

    /**
     * The column
     * <code>germinate_db.view_table_compound_data.compound_value</code>. The
     * compound value for this compound_id and germinatebase_id combination.
     */
    public final TableField<ViewTableCompoundDataRecord, BigDecimal> COMPOUND_VALUE = createField(DSL.name("compound_value"), SQLDataType.DECIMAL(64, 10).nullable(false), this, "The compound value for this compound_id and germinatebase_id combination.");

    private ViewTableCompoundData(Name alias, Table<ViewTableCompoundDataRecord> aliased) {
        this(alias, aliased, null);
    }

    private ViewTableCompoundData(Name alias, Table<ViewTableCompoundDataRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("VIEW"), TableOptions.view("create view `view_table_compound_data` as select `germinate_template_4_22_08_10`.`germinatebase`.`id` AS `germplasm_id`,`germinate_template_4_22_08_10`.`germinatebase`.`general_identifier` AS `germplasm_gid`,`germinate_template_4_22_08_10`.`germinatebase`.`name` AS `germplasm_name`,`germinate_template_4_22_08_10`.`synonyms`.`synonyms` AS `germplasm_synonyms`,`g`.`name` AS `entity_parent_name`,`g`.`general_identifier` AS `entity_parent_general_identifier`,`germinate_template_4_22_08_10`.`entitytypes`.`name` AS `entity_type`,`germinate_template_4_22_08_10`.`datasets`.`id` AS `dataset_id`,`germinate_template_4_22_08_10`.`datasets`.`name` AS `dataset_name`,`germinate_template_4_22_08_10`.`datasets`.`description` AS `dataset_description`,`germinate_template_4_22_08_10`.`compounds`.`id` AS `compound_id`,`germinate_template_4_22_08_10`.`compounds`.`name` AS `compound_name`,`germinate_template_4_22_08_10`.`units`.`unit_name` AS `unit_name`,`germinate_template_4_22_08_10`.`compounddata`.`recording_date` AS `recording_date`,`germinate_template_4_22_08_10`.`compounddata`.`compound_value` AS `compound_value` from (((((((`germinate_template_4_22_08_10`.`compounddata` left join `germinate_template_4_22_08_10`.`germinatebase` on((`germinate_template_4_22_08_10`.`germinatebase`.`id` = `germinate_template_4_22_08_10`.`compounddata`.`germinatebase_id`))) left join `germinate_template_4_22_08_10`.`germinatebase` `g` on((`germinate_template_4_22_08_10`.`germinatebase`.`entityparent_id` = `g`.`id`))) left join `germinate_template_4_22_08_10`.`synonyms` on(((`germinate_template_4_22_08_10`.`synonyms`.`synonymtype_id` = 1) and (`germinate_template_4_22_08_10`.`synonyms`.`foreign_id` = `germinate_template_4_22_08_10`.`germinatebase`.`id`)))) left join `germinate_template_4_22_08_10`.`entitytypes` on((`germinate_template_4_22_08_10`.`entitytypes`.`id` = `germinate_template_4_22_08_10`.`germinatebase`.`entitytype_id`))) left join `germinate_template_4_22_08_10`.`compounds` on((`germinate_template_4_22_08_10`.`compounds`.`id` = `germinate_template_4_22_08_10`.`compounddata`.`compound_id`))) left join `germinate_template_4_22_08_10`.`units` on((`germinate_template_4_22_08_10`.`units`.`id` = `germinate_template_4_22_08_10`.`compounds`.`unit_id`))) left join `germinate_template_4_22_08_10`.`datasets` on((`germinate_template_4_22_08_10`.`datasets`.`id` = `germinate_template_4_22_08_10`.`compounddata`.`dataset_id`)))"));
    }

    /**
     * Create an aliased <code>germinate_db.view_table_compound_data</code>
     * table reference
     */
    public ViewTableCompoundData(String alias) {
        this(DSL.name(alias), VIEW_TABLE_COMPOUND_DATA);
    }

    /**
     * Create an aliased <code>germinate_db.view_table_compound_data</code>
     * table reference
     */
    public ViewTableCompoundData(Name alias) {
        this(alias, VIEW_TABLE_COMPOUND_DATA);
    }

    /**
     * Create a <code>germinate_db.view_table_compound_data</code> table
     * reference
     */
    public ViewTableCompoundData() {
        this(DSL.name("view_table_compound_data"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : GerminateDb.GERMINATE_DB;
    }

    @Override
    public ViewTableCompoundData as(String alias) {
        return new ViewTableCompoundData(DSL.name(alias), this);
    }

    @Override
    public ViewTableCompoundData as(Name alias) {
        return new ViewTableCompoundData(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ViewTableCompoundData rename(String name) {
        return new ViewTableCompoundData(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ViewTableCompoundData rename(Name name) {
        return new ViewTableCompoundData(name, null);
    }

    // -------------------------------------------------------------------------
    // Row15 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row15<Integer, String, String, String[], String, String, String, Integer, String, String, Integer, String, String, Timestamp, BigDecimal> fieldsRow() {
        return (Row15) super.fieldsRow();
    }
    // @formatter:on
}
