/*
 * This file is generated by jOOQ.
 */
package jhi.germinate.server.database.codegen.tables;


import java.sql.Timestamp;

import jhi.germinate.server.database.codegen.GerminateDb;
import jhi.germinate.server.database.codegen.enums.GermplasminstitutionsType;
import jhi.germinate.server.database.codegen.tables.records.GermplasminstitutionsRecord;

import org.jooq.Field;
import org.jooq.Name;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


// @formatter:off
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Germplasminstitutions extends TableImpl<GermplasminstitutionsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>germinate_db.germplasminstitutions</code>
     */
    public static final Germplasminstitutions GERMPLASMINSTITUTIONS = new Germplasminstitutions();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<GermplasminstitutionsRecord> getRecordType() {
        return GermplasminstitutionsRecord.class;
    }

    /**
     * The column
     * <code>germinate_db.germplasminstitutions.germinatebase_id</code>.
     */
    public final TableField<GermplasminstitutionsRecord, Integer> GERMINATEBASE_ID = createField(DSL.name("germinatebase_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column
     * <code>germinate_db.germplasminstitutions.institution_id</code>.
     */
    public final TableField<GermplasminstitutionsRecord, Integer> INSTITUTION_ID = createField(DSL.name("institution_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>germinate_db.germplasminstitutions.type</code>.
     */
    public final TableField<GermplasminstitutionsRecord, GermplasminstitutionsType> TYPE = createField(DSL.name("type"), SQLDataType.VARCHAR(11).nullable(false).defaultValue(DSL.inline("maintenance", SQLDataType.VARCHAR)).asEnumDataType(jhi.germinate.server.database.codegen.enums.GermplasminstitutionsType.class), this, "");

    /**
     * The column <code>germinate_db.germplasminstitutions.created_on</code>.
     */
    public final TableField<GermplasminstitutionsRecord, Timestamp> CREATED_ON = createField(DSL.name("created_on"), SQLDataType.TIMESTAMP(0).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>germinate_db.germplasminstitutions.updated_on</code>.
     */
    public final TableField<GermplasminstitutionsRecord, Timestamp> UPDATED_ON = createField(DSL.name("updated_on"), SQLDataType.TIMESTAMP(0).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.TIMESTAMP)), this, "");

    private Germplasminstitutions(Name alias, Table<GermplasminstitutionsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Germplasminstitutions(Name alias, Table<GermplasminstitutionsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>germinate_db.germplasminstitutions</code> table
     * reference
     */
    public Germplasminstitutions(String alias) {
        this(DSL.name(alias), GERMPLASMINSTITUTIONS);
    }

    /**
     * Create an aliased <code>germinate_db.germplasminstitutions</code> table
     * reference
     */
    public Germplasminstitutions(Name alias) {
        this(alias, GERMPLASMINSTITUTIONS);
    }

    /**
     * Create a <code>germinate_db.germplasminstitutions</code> table reference
     */
    public Germplasminstitutions() {
        this(DSL.name("germplasminstitutions"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : GerminateDb.GERMINATE_DB;
    }

    @Override
    public UniqueKey<GermplasminstitutionsRecord> getPrimaryKey() {
        return Internal.createUniqueKey(Germplasminstitutions.GERMPLASMINSTITUTIONS, DSL.name("KEY_germplasminstitutions_PRIMARY"), new TableField[] { Germplasminstitutions.GERMPLASMINSTITUTIONS.GERMINATEBASE_ID, Germplasminstitutions.GERMPLASMINSTITUTIONS.INSTITUTION_ID, Germplasminstitutions.GERMPLASMINSTITUTIONS.TYPE }, true);
    }

    @Override
    public Germplasminstitutions as(String alias) {
        return new Germplasminstitutions(DSL.name(alias), this);
    }

    @Override
    public Germplasminstitutions as(Name alias) {
        return new Germplasminstitutions(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Germplasminstitutions rename(String name) {
        return new Germplasminstitutions(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Germplasminstitutions rename(Name name) {
        return new Germplasminstitutions(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Integer, Integer, GermplasminstitutionsType, Timestamp, Timestamp> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
    // @formatter:on
}
