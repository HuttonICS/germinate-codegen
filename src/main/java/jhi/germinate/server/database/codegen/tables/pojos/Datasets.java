/*
 * This file is generated by jOOQ.
 */
package jhi.germinate.server.database.codegen.tables.pojos;


import java.io.Serializable;
import java.sql.Date;
import java.sql.Timestamp;

import jhi.germinate.server.database.pojo.DublinCore;


// @formatter:off
/**
 * Datasets which are defined within Germinate although there can be external
 * datasets which are links out to external data sources most will be held
 * within Germinate.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Datasets implements Serializable {

    private static final long serialVersionUID = 1L;

    private Integer    id;
    private Integer    experimentId;
    private Integer    datasettypeId;
    private String     name;
    private String     description;
    private Date       dateStart;
    private Date       dateEnd;
    private String     sourceFile;
    private String     datatype;
    private DublinCore dublinCore;
    private String     version;
    private Integer    createdBy;
    private Integer    datasetStateId;
    private Integer    licenseId;
    private Boolean    isExternal;
    private String     hyperlink;
    private Timestamp  createdOn;
    private Timestamp  updatedOn;
    private String     contact;

    public Datasets() {}

    public Datasets(Datasets value) {
        this.id = value.id;
        this.experimentId = value.experimentId;
        this.datasettypeId = value.datasettypeId;
        this.name = value.name;
        this.description = value.description;
        this.dateStart = value.dateStart;
        this.dateEnd = value.dateEnd;
        this.sourceFile = value.sourceFile;
        this.datatype = value.datatype;
        this.dublinCore = value.dublinCore;
        this.version = value.version;
        this.createdBy = value.createdBy;
        this.datasetStateId = value.datasetStateId;
        this.licenseId = value.licenseId;
        this.isExternal = value.isExternal;
        this.hyperlink = value.hyperlink;
        this.createdOn = value.createdOn;
        this.updatedOn = value.updatedOn;
        this.contact = value.contact;
    }

    public Datasets(
        Integer    id,
        Integer    experimentId,
        Integer    datasettypeId,
        String     name,
        String     description,
        Date       dateStart,
        Date       dateEnd,
        String     sourceFile,
        String     datatype,
        DublinCore dublinCore,
        String     version,
        Integer    createdBy,
        Integer    datasetStateId,
        Integer    licenseId,
        Boolean    isExternal,
        String     hyperlink,
        Timestamp  createdOn,
        Timestamp  updatedOn,
        String     contact
    ) {
        this.id = id;
        this.experimentId = experimentId;
        this.datasettypeId = datasettypeId;
        this.name = name;
        this.description = description;
        this.dateStart = dateStart;
        this.dateEnd = dateEnd;
        this.sourceFile = sourceFile;
        this.datatype = datatype;
        this.dublinCore = dublinCore;
        this.version = version;
        this.createdBy = createdBy;
        this.datasetStateId = datasetStateId;
        this.licenseId = licenseId;
        this.isExternal = isExternal;
        this.hyperlink = hyperlink;
        this.createdOn = createdOn;
        this.updatedOn = updatedOn;
        this.contact = contact;
    }

    /**
     * Getter for <code>germinate_db.datasets.id</code>. Primary id for this
     * table. This uniquely identifies the row.
     */
    public Integer getId() {
        return this.id;
    }

    /**
     * Setter for <code>germinate_db.datasets.id</code>. Primary id for this
     * table. This uniquely identifies the row.
     */
    public void setId(Integer id) {
        this.id = id;
    }

    /**
     * Getter for <code>germinate_db.datasets.experiment_id</code>. Foreign key
     * to experiments (experiments.id).
     */
    public Integer getExperimentId() {
        return this.experimentId;
    }

    /**
     * Setter for <code>germinate_db.datasets.experiment_id</code>. Foreign key
     * to experiments (experiments.id).
     */
    public void setExperimentId(Integer experimentId) {
        this.experimentId = experimentId;
    }

    /**
     * Getter for <code>germinate_db.datasets.datasettype_id</code>. Foreign key
     * to datasettypes (datasettypes.id).
     */
    public Integer getDatasettypeId() {
        return this.datasettypeId;
    }

    /**
     * Setter for <code>germinate_db.datasets.datasettype_id</code>. Foreign key
     * to datasettypes (datasettypes.id).
     */
    public void setDatasettypeId(Integer datasettypeId) {
        this.datasettypeId = datasettypeId;
    }

    /**
     * Getter for <code>germinate_db.datasets.name</code>. Describes the
     * dataset.
     */
    public String getName() {
        return this.name;
    }

    /**
     * Setter for <code>germinate_db.datasets.name</code>. Describes the
     * dataset.
     */
    public void setName(String name) {
        this.name = name;
    }

    /**
     * Getter for <code>germinate_db.datasets.description</code>. The name of
     * this dataset.
     */
    public String getDescription() {
        return this.description;
    }

    /**
     * Setter for <code>germinate_db.datasets.description</code>. The name of
     * this dataset.
     */
    public void setDescription(String description) {
        this.description = description;
    }

    /**
     * Getter for <code>germinate_db.datasets.date_start</code>. Date that the
     * dataset was generated.
     */
    public Date getDateStart() {
        return this.dateStart;
    }

    /**
     * Setter for <code>germinate_db.datasets.date_start</code>. Date that the
     * dataset was generated.
     */
    public void setDateStart(Date dateStart) {
        this.dateStart = dateStart;
    }

    /**
     * Getter for <code>germinate_db.datasets.date_end</code>. Date at which the
     * dataset recording ended.
     */
    public Date getDateEnd() {
        return this.dateEnd;
    }

    /**
     * Setter for <code>germinate_db.datasets.date_end</code>. Date at which the
     * dataset recording ended.
     */
    public void setDateEnd(Date dateEnd) {
        this.dateEnd = dateEnd;
    }

    /**
     * Getter for <code>germinate_db.datasets.source_file</code>.
     */
    public String getSourceFile() {
        return this.sourceFile;
    }

    /**
     * Setter for <code>germinate_db.datasets.source_file</code>.
     */
    public void setSourceFile(String sourceFile) {
        this.sourceFile = sourceFile;
    }

    /**
     * Getter for <code>germinate_db.datasets.datatype</code>. A description of
     * the data type of the contained data. Examples might be: "raw data",
     * "BLUPs", etc.
     */
    public String getDatatype() {
        return this.datatype;
    }

    /**
     * Setter for <code>germinate_db.datasets.datatype</code>. A description of
     * the data type of the contained data. Examples might be: "raw data",
     * "BLUPs", etc.
     */
    public void setDatatype(String datatype) {
        this.datatype = datatype;
    }

    /**
     * Getter for <code>germinate_db.datasets.dublin_core</code>.
     */
    public DublinCore getDublinCore() {
        return this.dublinCore;
    }

    /**
     * Setter for <code>germinate_db.datasets.dublin_core</code>.
     */
    public void setDublinCore(DublinCore dublinCore) {
        this.dublinCore = dublinCore;
    }

    /**
     * Getter for <code>germinate_db.datasets.version</code>. Dataset version if
     * this exists.
     */
    public String getVersion() {
        return this.version;
    }

    /**
     * Setter for <code>germinate_db.datasets.version</code>. Dataset version if
     * this exists.
     */
    public void setVersion(String version) {
        this.version = version;
    }

    /**
     * Getter for <code>germinate_db.datasets.created_by</code>. Defines who
     * created the dataset. This is a FK in Gatekeeper users table. Foreign key
     * to Gatekeeper users (users.id).
     */
    public Integer getCreatedBy() {
        return this.createdBy;
    }

    /**
     * Setter for <code>germinate_db.datasets.created_by</code>. Defines who
     * created the dataset. This is a FK in Gatekeeper users table. Foreign key
     * to Gatekeeper users (users.id).
     */
    public void setCreatedBy(Integer createdBy) {
        this.createdBy = createdBy;
    }

    /**
     * Getter for <code>germinate_db.datasets.dataset_state_id</code>. Foreign
     * key to datasetstates (datasetstates.id).
     */
    public Integer getDatasetStateId() {
        return this.datasetStateId;
    }

    /**
     * Setter for <code>germinate_db.datasets.dataset_state_id</code>. Foreign
     * key to datasetstates (datasetstates.id).
     */
    public void setDatasetStateId(Integer datasetStateId) {
        this.datasetStateId = datasetStateId;
    }

    /**
     * Getter for <code>germinate_db.datasets.license_id</code>.
     */
    public Integer getLicenseId() {
        return this.licenseId;
    }

    /**
     * Setter for <code>germinate_db.datasets.license_id</code>.
     */
    public void setLicenseId(Integer licenseId) {
        this.licenseId = licenseId;
    }

    /**
     * Getter for <code>germinate_db.datasets.is_external</code>. Defines if the
     * dataset is contained within Germinate or from an external source and not
     * stored in the database.
     */
    public Boolean getIsExternal() {
        return this.isExternal;
    }

    /**
     * Setter for <code>germinate_db.datasets.is_external</code>. Defines if the
     * dataset is contained within Germinate or from an external source and not
     * stored in the database.
     */
    public void setIsExternal(Boolean isExternal) {
        this.isExternal = isExternal;
    }

    /**
     * Getter for <code>germinate_db.datasets.hyperlink</code>. Link to access
     * the external dasets.
     */
    public String getHyperlink() {
        return this.hyperlink;
    }

    /**
     * Setter for <code>germinate_db.datasets.hyperlink</code>. Link to access
     * the external dasets.
     */
    public void setHyperlink(String hyperlink) {
        this.hyperlink = hyperlink;
    }

    /**
     * Getter for <code>germinate_db.datasets.created_on</code>. When the record
     * was created.

     */
    public Timestamp getCreatedOn() {
        return this.createdOn;
    }

    /**
     * Setter for <code>germinate_db.datasets.created_on</code>. When the record
     * was created.

     */
    public void setCreatedOn(Timestamp createdOn) {
        this.createdOn = createdOn;
    }

    /**
     * Getter for <code>germinate_db.datasets.updated_on</code>. When the record
     * was updated. This may be different from the created on date if subsequent
     * changes have been made to the underlying record.
     */
    public Timestamp getUpdatedOn() {
        return this.updatedOn;
    }

    /**
     * Setter for <code>germinate_db.datasets.updated_on</code>. When the record
     * was updated. This may be different from the created on date if subsequent
     * changes have been made to the underlying record.
     */
    public void setUpdatedOn(Timestamp updatedOn) {
        this.updatedOn = updatedOn;
    }

    /**
     * Getter for <code>germinate_db.datasets.contact</code>. The contact to get
     * more information about this dataset.
     */
    public String getContact() {
        return this.contact;
    }

    /**
     * Setter for <code>germinate_db.datasets.contact</code>. The contact to get
     * more information about this dataset.
     */
    public void setContact(String contact) {
        this.contact = contact;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("Datasets (");

        sb.append(id);
        sb.append(", ").append(experimentId);
        sb.append(", ").append(datasettypeId);
        sb.append(", ").append(name);
        sb.append(", ").append(description);
        sb.append(", ").append(dateStart);
        sb.append(", ").append(dateEnd);
        sb.append(", ").append(sourceFile);
        sb.append(", ").append(datatype);
        sb.append(", ").append(dublinCore);
        sb.append(", ").append(version);
        sb.append(", ").append(createdBy);
        sb.append(", ").append(datasetStateId);
        sb.append(", ").append(licenseId);
        sb.append(", ").append(isExternal);
        sb.append(", ").append(hyperlink);
        sb.append(", ").append(createdOn);
        sb.append(", ").append(updatedOn);
        sb.append(", ").append(contact);

        sb.append(")");
        return sb.toString();
    }
    // @formatter:on
}
