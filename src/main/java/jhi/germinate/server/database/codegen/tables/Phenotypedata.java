/*
 * This file is generated by jOOQ.
 */
package jhi.germinate.server.database.codegen.tables;


import java.math.BigDecimal;
import java.sql.Timestamp;

import jhi.germinate.server.database.codegen.GerminateDb;
import jhi.germinate.server.database.codegen.tables.records.PhenotypedataRecord;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Row16;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


// @formatter:off
/**
 * Contains phenotypic data which has been collected.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Phenotypedata extends TableImpl<PhenotypedataRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>germinate_db.phenotypedata</code>
     */
    public static final Phenotypedata PHENOTYPEDATA = new Phenotypedata();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PhenotypedataRecord> getRecordType() {
        return PhenotypedataRecord.class;
    }

    /**
     * The column <code>germinate_db.phenotypedata.id</code>. Primary id for
     * this table. This uniquely identifies the row.
     */
    public final TableField<PhenotypedataRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "Primary id for this table. This uniquely identifies the row.");

    /**
     * The column <code>germinate_db.phenotypedata.phenotype_id</code>. Foreign
     * key phenotypes (phenotype.id).
     */
    public final TableField<PhenotypedataRecord, Integer> PHENOTYPE_ID = createField(DSL.name("phenotype_id"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.inline("0", SQLDataType.INTEGER)), this, "Foreign key phenotypes (phenotype.id).");

    /**
     * The column <code>germinate_db.phenotypedata.germinatebase_id</code>.
     * Foreign key germinatebase (germinatebase.id).
     */
    public final TableField<PhenotypedataRecord, Integer> GERMINATEBASE_ID = createField(DSL.name("germinatebase_id"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.inline("0", SQLDataType.INTEGER)), this, "Foreign key germinatebase (germinatebase.id).");

    /**
     * The column <code>germinate_db.phenotypedata.rep</code>.
     */
    public final TableField<PhenotypedataRecord, String> REP = createField(DSL.name("rep"), SQLDataType.VARCHAR(10).nullable(false).defaultValue(DSL.inline("1", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>germinate_db.phenotypedata.block</code>.
     */
    public final TableField<PhenotypedataRecord, String> BLOCK = createField(DSL.name("block"), SQLDataType.VARCHAR(10).nullable(false).defaultValue(DSL.inline("1", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>germinate_db.phenotypedata.latitude</code>.
     */
    public final TableField<PhenotypedataRecord, BigDecimal> LATITUDE = createField(DSL.name("latitude"), SQLDataType.DECIMAL(64, 10), this, "");

    /**
     * The column <code>germinate_db.phenotypedata.longitude</code>.
     */
    public final TableField<PhenotypedataRecord, BigDecimal> LONGITUDE = createField(DSL.name("longitude"), SQLDataType.DECIMAL(64, 10), this, "");

    /**
     * The column <code>germinate_db.phenotypedata.elevation</code>.
     */
    public final TableField<PhenotypedataRecord, BigDecimal> ELEVATION = createField(DSL.name("elevation"), SQLDataType.DECIMAL(64, 10), this, "");

    /**
     * The column <code>germinate_db.phenotypedata.phenotype_value</code>. The
     * phenotype value for this phenotype_id and germinatebase_id combination.
     */
    public final TableField<PhenotypedataRecord, String> PHENOTYPE_VALUE = createField(DSL.name("phenotype_value"), SQLDataType.VARCHAR(255), this, "The phenotype value for this phenotype_id and germinatebase_id combination.");

    /**
     * The column <code>germinate_db.phenotypedata.dataset_id</code>. Foreign
     * key datasets (datasets.id).
     */
    public final TableField<PhenotypedataRecord, Integer> DATASET_ID = createField(DSL.name("dataset_id"), SQLDataType.INTEGER.nullable(false), this, "Foreign key datasets (datasets.id).");

    /**
     * The column <code>germinate_db.phenotypedata.recording_date</code>. Date
     * when the phenotypic result was recorded. Should be formatted 'YYYY-MM-DD
     * HH:MM:SS' or just 'YYYY-MM-DD' where a timestamp is not available.
     */
    public final TableField<PhenotypedataRecord, Timestamp> RECORDING_DATE = createField(DSL.name("recording_date"), SQLDataType.TIMESTAMP(0), this, "Date when the phenotypic result was recorded. Should be formatted 'YYYY-MM-DD HH:MM:SS' or just 'YYYY-MM-DD' where a timestamp is not available.");

    /**
     * The column <code>germinate_db.phenotypedata.created_on</code>. When the
     * record was created.
     */
    public final TableField<PhenotypedataRecord, Timestamp> CREATED_ON = createField(DSL.name("created_on"), SQLDataType.TIMESTAMP(0).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.TIMESTAMP)), this, "When the record was created.");

    /**
     * The column <code>germinate_db.phenotypedata.updated_on</code>. When the
     * record was updated. This may be different from the created on date if
     * subsequent changes have been made to the underlying record.
     */
    public final TableField<PhenotypedataRecord, Timestamp> UPDATED_ON = createField(DSL.name("updated_on"), SQLDataType.TIMESTAMP(0).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.TIMESTAMP)), this, "When the record was updated. This may be different from the created on date if subsequent changes have been made to the underlying record.");

    /**
     * The column <code>germinate_db.phenotypedata.location_id</code>. Foreign
     * key to locations (locations.id).
     */
    public final TableField<PhenotypedataRecord, Integer> LOCATION_ID = createField(DSL.name("location_id"), SQLDataType.INTEGER, this, "Foreign key to locations (locations.id).");

    /**
     * The column <code>germinate_db.phenotypedata.treatment_id</code>. Foreign
     * key to treatments (treatments.id).
     */
    public final TableField<PhenotypedataRecord, Integer> TREATMENT_ID = createField(DSL.name("treatment_id"), SQLDataType.INTEGER, this, "Foreign key to treatments (treatments.id).");

    /**
     * The column <code>germinate_db.phenotypedata.trialseries_id</code>.
     * Foreign key to trialseries (trialseries.id).
     */
    public final TableField<PhenotypedataRecord, Integer> TRIALSERIES_ID = createField(DSL.name("trialseries_id"), SQLDataType.INTEGER, this, "Foreign key to trialseries (trialseries.id).");

    private Phenotypedata(Name alias, Table<PhenotypedataRecord> aliased) {
        this(alias, aliased, null);
    }

    private Phenotypedata(Name alias, Table<PhenotypedataRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Contains phenotypic data which has been collected."), TableOptions.table());
    }

    /**
     * Create an aliased <code>germinate_db.phenotypedata</code> table reference
     */
    public Phenotypedata(String alias) {
        this(DSL.name(alias), PHENOTYPEDATA);
    }

    /**
     * Create an aliased <code>germinate_db.phenotypedata</code> table reference
     */
    public Phenotypedata(Name alias) {
        this(alias, PHENOTYPEDATA);
    }

    /**
     * Create a <code>germinate_db.phenotypedata</code> table reference
     */
    public Phenotypedata() {
        this(DSL.name("phenotypedata"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : GerminateDb.GERMINATE_DB;
    }

    @Override
    public Identity<PhenotypedataRecord, Integer> getIdentity() {
        return (Identity<PhenotypedataRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<PhenotypedataRecord> getPrimaryKey() {
        return Internal.createUniqueKey(Phenotypedata.PHENOTYPEDATA, DSL.name("KEY_phenotypedata_PRIMARY"), new TableField[] { Phenotypedata.PHENOTYPEDATA.ID }, true);
    }

    @Override
    public Phenotypedata as(String alias) {
        return new Phenotypedata(DSL.name(alias), this);
    }

    @Override
    public Phenotypedata as(Name alias) {
        return new Phenotypedata(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Phenotypedata rename(String name) {
        return new Phenotypedata(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Phenotypedata rename(Name name) {
        return new Phenotypedata(name, null);
    }

    // -------------------------------------------------------------------------
    // Row16 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row16<Integer, Integer, Integer, String, String, BigDecimal, BigDecimal, BigDecimal, String, Integer, Timestamp, Timestamp, Timestamp, Integer, Integer, Integer> fieldsRow() {
        return (Row16) super.fieldsRow();
    }
    // @formatter:on
}
