/*
 * This file is generated by jOOQ.
 */
package jhi.germinate.server.database.codegen.tables;


import java.sql.Timestamp;

import jhi.germinate.server.database.codegen.GerminateDb;
import jhi.germinate.server.database.codegen.enums.PedigreesRelationshipType;
import jhi.germinate.server.database.codegen.tables.records.PedigreesRecord;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


// @formatter:off
/**
 * Holds pedigree definitions. A pedigree is constructed from a series of
 * individial-&gt;parent records. This gives a great deal of flexibility in how
 * pedigree networks can be constructed. This table is required for operation
 * with the Helium pedigree viewer.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Pedigrees extends TableImpl<PedigreesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>germinate_db.pedigrees</code>
     */
    public static final Pedigrees PEDIGREES = new Pedigrees();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PedigreesRecord> getRecordType() {
        return PedigreesRecord.class;
    }

    /**
     * The column <code>germinate_db.pedigrees.id</code>. Primary id for this
     * table. This uniquely identifies the row.
     */
    public final TableField<PedigreesRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "Primary id for this table. This uniquely identifies the row.");

    /**
     * The column <code>germinate_db.pedigrees.dataset_id</code>.
     */
    public final TableField<PedigreesRecord, Integer> DATASET_ID = createField(DSL.name("dataset_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>germinate_db.pedigrees.germinatebase_id</code>. Foreign
     * key germinatebase (germinatebase.id).
     */
    public final TableField<PedigreesRecord, Integer> GERMINATEBASE_ID = createField(DSL.name("germinatebase_id"), SQLDataType.INTEGER.nullable(false), this, "Foreign key germinatebase (germinatebase.id).");

    /**
     * The column <code>germinate_db.pedigrees.parent_id</code>. Foreign key
     * germinatebase (germinatebase.id). This is the parrent of the individual
     * identified in the germinatebase_id column.
     */
    public final TableField<PedigreesRecord, Integer> PARENT_ID = createField(DSL.name("parent_id"), SQLDataType.INTEGER.nullable(false), this, "Foreign key germinatebase (germinatebase.id). This is the parrent of the individual identified in the germinatebase_id column.");

    /**
     * The column <code>germinate_db.pedigrees.relationship_type</code>. Male or
     * Female parent. Should be recorded as 'M' (male) or 'F' (female).
     */
    public final TableField<PedigreesRecord, PedigreesRelationshipType> RELATIONSHIP_TYPE = createField(DSL.name("relationship_type"), SQLDataType.VARCHAR(5).nullable(false).defaultValue(DSL.inline("OTHER", SQLDataType.VARCHAR)).asEnumDataType(jhi.germinate.server.database.codegen.enums.PedigreesRelationshipType.class), this, "Male or Female parent. Should be recorded as 'M' (male) or 'F' (female).");

    /**
     * The column <code>germinate_db.pedigrees.pedigreedescription_id</code>.
     * Foreign key pedigreedescriptions (pedigreedescriptions.id).
     */
    public final TableField<PedigreesRecord, Integer> PEDIGREEDESCRIPTION_ID = createField(DSL.name("pedigreedescription_id"), SQLDataType.INTEGER.nullable(false), this, "Foreign key pedigreedescriptions (pedigreedescriptions.id).");

    /**
     * The column <code>germinate_db.pedigrees.relationship_description</code>.
     * Can be used as a meta-data field to describe the relationships if a
     * complex rellationship is required. Examples may include, 'is a complex
     * cross containing', 'F4 generation' and so on. This is used by the Helium
     * pedigree visualiztion tool.
     */
    public final TableField<PedigreesRecord, String> RELATIONSHIP_DESCRIPTION = createField(DSL.name("relationship_description"), SQLDataType.CLOB, this, "Can be used as a meta-data field to describe the relationships if a complex rellationship is required. Examples may include, 'is a complex cross containing', 'F4 generation' and so on. This is used by the Helium pedigree visualiztion tool.");

    /**
     * The column <code>germinate_db.pedigrees.created_on</code>. When the
     * record was created.
     */
    public final TableField<PedigreesRecord, Timestamp> CREATED_ON = createField(DSL.name("created_on"), SQLDataType.TIMESTAMP(0).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.TIMESTAMP)), this, "When the record was created.");

    /**
     * The column <code>germinate_db.pedigrees.updated_on</code>. When the
     * record was updated. This may be different from the created on date if
     * subsequent changes have been made to the underlying record.
     */
    public final TableField<PedigreesRecord, Timestamp> UPDATED_ON = createField(DSL.name("updated_on"), SQLDataType.TIMESTAMP(0).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.TIMESTAMP)), this, "When the record was updated. This may be different from the created on date if subsequent changes have been made to the underlying record.");

    private Pedigrees(Name alias, Table<PedigreesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Pedigrees(Name alias, Table<PedigreesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Holds pedigree definitions. A pedigree is constructed from a series of individial->parent records. This gives a great deal of flexibility in how pedigree networks can be constructed. This table is required for operation with the Helium pedigree viewer."), TableOptions.table());
    }

    /**
     * Create an aliased <code>germinate_db.pedigrees</code> table reference
     */
    public Pedigrees(String alias) {
        this(DSL.name(alias), PEDIGREES);
    }

    /**
     * Create an aliased <code>germinate_db.pedigrees</code> table reference
     */
    public Pedigrees(Name alias) {
        this(alias, PEDIGREES);
    }

    /**
     * Create a <code>germinate_db.pedigrees</code> table reference
     */
    public Pedigrees() {
        this(DSL.name("pedigrees"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : GerminateDb.GERMINATE_DB;
    }

    @Override
    public Identity<PedigreesRecord, Integer> getIdentity() {
        return (Identity<PedigreesRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<PedigreesRecord> getPrimaryKey() {
        return Internal.createUniqueKey(Pedigrees.PEDIGREES, DSL.name("KEY_pedigrees_PRIMARY"), new TableField[] { Pedigrees.PEDIGREES.ID }, true);
    }

    @Override
    public Pedigrees as(String alias) {
        return new Pedigrees(DSL.name(alias), this);
    }

    @Override
    public Pedigrees as(Name alias) {
        return new Pedigrees(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Pedigrees rename(String name) {
        return new Pedigrees(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Pedigrees rename(Name name) {
        return new Pedigrees(name, null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<Integer, Integer, Integer, Integer, PedigreesRelationshipType, Integer, String, Timestamp, Timestamp> fieldsRow() {
        return (Row9) super.fieldsRow();
    }
    // @formatter:on
}
