/*
 * This file is generated by jOOQ.
 */
package jhi.germinate.server.database.codegen.tables;


import java.sql.Timestamp;

import jhi.germinate.server.database.binding.SynonymBinding;
import jhi.germinate.server.database.codegen.GerminateDb;
import jhi.germinate.server.database.codegen.tables.records.ViewTableMarkersRecord;

import org.jooq.Field;
import org.jooq.Name;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


// @formatter:off
/**
 * VIEW
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ViewTableMarkers extends TableImpl<ViewTableMarkersRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>germinate_db.view_table_markers</code>
     */
    public static final ViewTableMarkers VIEW_TABLE_MARKERS = new ViewTableMarkers();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ViewTableMarkersRecord> getRecordType() {
        return ViewTableMarkersRecord.class;
    }

    /**
     * The column <code>germinate_db.view_table_markers.marker_id</code>.
     * Primary id for this table. This uniquely identifies the row.
     */
    public final TableField<ViewTableMarkersRecord, Integer> MARKER_ID = createField(DSL.name("marker_id"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.inline("0", SQLDataType.INTEGER)), this, "Primary id for this table. This uniquely identifies the row.");

    /**
     * The column <code>germinate_db.view_table_markers.marker_name</code>. The
     * name of the marker. This should be a unique name which identifies the
     * marker.
     */
    public final TableField<ViewTableMarkersRecord, String> MARKER_NAME = createField(DSL.name("marker_name"), SQLDataType.VARCHAR(45).nullable(false), this, "The name of the marker. This should be a unique name which identifies the marker.");

    /**
     * The column <code>germinate_db.view_table_markers.marker_type</code>.
     * Describes the marker type. Markers (markers) have a defined type. This
     * could be AFLP, MicroSat, SNP and so on.
     */
    public final TableField<ViewTableMarkersRecord, String> MARKER_TYPE = createField(DSL.name("marker_type"), SQLDataType.VARCHAR(255).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "Describes the marker type. Markers (markers) have a defined type. This could be AFLP, MicroSat, SNP and so on.");

    /**
     * The column <code>germinate_db.view_table_markers.marker_synonyms</code>.
     * The synonyms as a json array.
     */
    public final TableField<ViewTableMarkersRecord, String[]> MARKER_SYNONYMS = createField(DSL.name("marker_synonyms"), SQLDataType.JSON, this, "The synonyms as a json array.", new SynonymBinding());

    /**
     * The column <code>germinate_db.view_table_markers.created_on</code>. When
     * the record was created.

     */
    public final TableField<ViewTableMarkersRecord, Timestamp> CREATED_ON = createField(DSL.name("created_on"), SQLDataType.TIMESTAMP(0), this, "When the record was created.\n");

    /**
     * The column <code>germinate_db.view_table_markers.updated_on</code>. When
     * the record was updated. This may be different from the created on date if
     * subsequent changes have been made to the underlying record.
     */
    public final TableField<ViewTableMarkersRecord, Timestamp> UPDATED_ON = createField(DSL.name("updated_on"), SQLDataType.TIMESTAMP(0), this, "When the record was updated. This may be different from the created on date if subsequent changes have been made to the underlying record.");

    private ViewTableMarkers(Name alias, Table<ViewTableMarkersRecord> aliased) {
        this(alias, aliased, null);
    }

    private ViewTableMarkers(Name alias, Table<ViewTableMarkersRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("VIEW"), TableOptions.view("create view `view_table_markers` as select `germinate_template_4_22_05_04`.`markers`.`id` AS `marker_id`,`germinate_template_4_22_05_04`.`markers`.`marker_name` AS `marker_name`,`germinate_template_4_22_05_04`.`markertypes`.`description` AS `marker_type`,`germinate_template_4_22_05_04`.`synonyms`.`synonyms` AS `marker_synonyms`,`germinate_template_4_22_05_04`.`markers`.`created_on` AS `created_on`,`germinate_template_4_22_05_04`.`markers`.`updated_on` AS `updated_on` from ((`germinate_template_4_22_05_04`.`markers` left join `germinate_template_4_22_05_04`.`markertypes` on((`germinate_template_4_22_05_04`.`markertypes`.`id` = `germinate_template_4_22_05_04`.`markers`.`markertype_id`))) left join `germinate_template_4_22_05_04`.`synonyms` on(((`germinate_template_4_22_05_04`.`synonyms`.`foreign_id` = `germinate_template_4_22_05_04`.`markers`.`id`) and (`germinate_template_4_22_05_04`.`synonyms`.`synonymtype_id` = 2))))"));
    }

    /**
     * Create an aliased <code>germinate_db.view_table_markers</code> table
     * reference
     */
    public ViewTableMarkers(String alias) {
        this(DSL.name(alias), VIEW_TABLE_MARKERS);
    }

    /**
     * Create an aliased <code>germinate_db.view_table_markers</code> table
     * reference
     */
    public ViewTableMarkers(Name alias) {
        this(alias, VIEW_TABLE_MARKERS);
    }

    /**
     * Create a <code>germinate_db.view_table_markers</code> table reference
     */
    public ViewTableMarkers() {
        this(DSL.name("view_table_markers"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : GerminateDb.GERMINATE_DB;
    }

    @Override
    public ViewTableMarkers as(String alias) {
        return new ViewTableMarkers(DSL.name(alias), this);
    }

    @Override
    public ViewTableMarkers as(Name alias) {
        return new ViewTableMarkers(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ViewTableMarkers rename(String name) {
        return new ViewTableMarkers(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ViewTableMarkers rename(Name name) {
        return new ViewTableMarkers(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Integer, String, String, String[], Timestamp, Timestamp> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
    // @formatter:on
}
