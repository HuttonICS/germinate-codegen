/*
 * This file is generated by jOOQ.
 */
package jhi.germinate.server.database.codegen.tables;


import java.sql.Timestamp;

import jhi.germinate.server.database.codegen.GerminateDb;
import jhi.germinate.server.database.codegen.tables.records.CountriesRecord;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


// @formatter:off
/**
 * Countries that are used in the locations type tables in Germinate. These are
 * the ISO codes for countries.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Countries extends TableImpl<CountriesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>germinate_db.countries</code>
     */
    public static final Countries COUNTRIES = new Countries();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CountriesRecord> getRecordType() {
        return CountriesRecord.class;
    }

    /**
     * The column <code>germinate_db.countries.id</code>. Primary id for this
     * table. This uniquely identifies the row.
     */
    public final TableField<CountriesRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "Primary id for this table. This uniquely identifies the row.");

    /**
     * The column <code>germinate_db.countries.country_code2</code>. ISO 2 Code
     * for country.
     */
    public final TableField<CountriesRecord, String> COUNTRY_CODE2 = createField(DSL.name("country_code2"), SQLDataType.CHAR(2).nullable(false).defaultValue(DSL.inline("", SQLDataType.CHAR)), this, "ISO 2 Code for country.");

    /**
     * The column <code>germinate_db.countries.country_code3</code>. ISO 3 Code
     * for country.
     */
    public final TableField<CountriesRecord, String> COUNTRY_CODE3 = createField(DSL.name("country_code3"), SQLDataType.CHAR(3).nullable(false).defaultValue(DSL.inline("", SQLDataType.CHAR)), this, "ISO 3 Code for country.");

    /**
     * The column <code>germinate_db.countries.country_name</code>. Country
     * name.
     */
    public final TableField<CountriesRecord, String> COUNTRY_NAME = createField(DSL.name("country_name"), SQLDataType.VARCHAR(255).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "Country name.");

    /**
     * The column <code>germinate_db.countries.created_on</code>. When the
     * record was created.
     */
    public final TableField<CountriesRecord, Timestamp> CREATED_ON = createField(DSL.name("created_on"), SQLDataType.TIMESTAMP(0).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.TIMESTAMP)), this, "When the record was created.");

    /**
     * The column <code>germinate_db.countries.updated_on</code>. When the
     * record was updated. This may be different from the created on date if
     * subsequent changes have been made to the underlying record.
     */
    public final TableField<CountriesRecord, Timestamp> UPDATED_ON = createField(DSL.name("updated_on"), SQLDataType.TIMESTAMP(0).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.TIMESTAMP)), this, "When the record was updated. This may be different from the created on date if subsequent changes have been made to the underlying record.");

    private Countries(Name alias, Table<CountriesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Countries(Name alias, Table<CountriesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Countries that are used in the locations type tables in Germinate. These are the ISO codes for countries."), TableOptions.table());
    }

    /**
     * Create an aliased <code>germinate_db.countries</code> table reference
     */
    public Countries(String alias) {
        this(DSL.name(alias), COUNTRIES);
    }

    /**
     * Create an aliased <code>germinate_db.countries</code> table reference
     */
    public Countries(Name alias) {
        this(alias, COUNTRIES);
    }

    /**
     * Create a <code>germinate_db.countries</code> table reference
     */
    public Countries() {
        this(DSL.name("countries"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : GerminateDb.GERMINATE_DB;
    }

    @Override
    public Identity<CountriesRecord, Integer> getIdentity() {
        return (Identity<CountriesRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<CountriesRecord> getPrimaryKey() {
        return Internal.createUniqueKey(Countries.COUNTRIES, DSL.name("KEY_countries_PRIMARY"), new TableField[] { Countries.COUNTRIES.ID }, true);
    }

    @Override
    public Countries as(String alias) {
        return new Countries(DSL.name(alias), this);
    }

    @Override
    public Countries as(Name alias) {
        return new Countries(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Countries rename(String name) {
        return new Countries(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Countries rename(Name name) {
        return new Countries(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Integer, String, String, String, Timestamp, Timestamp> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
    // @formatter:on
}
