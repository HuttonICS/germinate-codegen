/*
 * This file is generated by jOOQ.
 */
package jhi.germinate.server.database.codegen.tables;


import java.sql.Timestamp;

import jhi.germinate.server.database.codegen.GerminateDb;
import jhi.germinate.server.database.codegen.tables.records.DatasetmembersRecord;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


// @formatter:off
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Datasetmembers extends TableImpl<DatasetmembersRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>germinate_db.datasetmembers</code>
     */
    public static final Datasetmembers DATASETMEMBERS = new Datasetmembers();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DatasetmembersRecord> getRecordType() {
        return DatasetmembersRecord.class;
    }

    /**
     * The column <code>germinate_db.datasetmembers.id</code>.
     */
    public final TableField<DatasetmembersRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>germinate_db.datasetmembers.dataset_id</code>.
     */
    public final TableField<DatasetmembersRecord, Integer> DATASET_ID = createField(DSL.name("dataset_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>germinate_db.datasetmembers.foreign_id</code>.
     */
    public final TableField<DatasetmembersRecord, Integer> FOREIGN_ID = createField(DSL.name("foreign_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>germinate_db.datasetmembers.datasetmembertype_id</code>.
     */
    public final TableField<DatasetmembersRecord, Integer> DATASETMEMBERTYPE_ID = createField(DSL.name("datasetmembertype_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>germinate_db.datasetmembers.created_on</code>. When the
     * record was created.
     */
    public final TableField<DatasetmembersRecord, Timestamp> CREATED_ON = createField(DSL.name("created_on"), SQLDataType.TIMESTAMP(0).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.TIMESTAMP)), this, "When the record was created.");

    /**
     * The column <code>germinate_db.datasetmembers.updated_on</code>. When the
     * record was updated. This may be different from the created on date if
     * subsequent changes have been made to the underlying record.
     */
    public final TableField<DatasetmembersRecord, Timestamp> UPDATED_ON = createField(DSL.name("updated_on"), SQLDataType.TIMESTAMP(0).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.TIMESTAMP)), this, "When the record was updated. This may be different from the created on date if subsequent changes have been made to the underlying record.");

    private Datasetmembers(Name alias, Table<DatasetmembersRecord> aliased) {
        this(alias, aliased, null);
    }

    private Datasetmembers(Name alias, Table<DatasetmembersRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>germinate_db.datasetmembers</code> table
     * reference
     */
    public Datasetmembers(String alias) {
        this(DSL.name(alias), DATASETMEMBERS);
    }

    /**
     * Create an aliased <code>germinate_db.datasetmembers</code> table
     * reference
     */
    public Datasetmembers(Name alias) {
        this(alias, DATASETMEMBERS);
    }

    /**
     * Create a <code>germinate_db.datasetmembers</code> table reference
     */
    public Datasetmembers() {
        this(DSL.name("datasetmembers"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : GerminateDb.GERMINATE_DB;
    }

    @Override
    public Identity<DatasetmembersRecord, Integer> getIdentity() {
        return (Identity<DatasetmembersRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<DatasetmembersRecord> getPrimaryKey() {
        return Internal.createUniqueKey(Datasetmembers.DATASETMEMBERS, DSL.name("KEY_datasetmembers_PRIMARY"), new TableField[] { Datasetmembers.DATASETMEMBERS.ID }, true);
    }

    @Override
    public Datasetmembers as(String alias) {
        return new Datasetmembers(DSL.name(alias), this);
    }

    @Override
    public Datasetmembers as(Name alias) {
        return new Datasetmembers(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Datasetmembers rename(String name) {
        return new Datasetmembers(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Datasetmembers rename(Name name) {
        return new Datasetmembers(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Integer, Integer, Integer, Integer, Timestamp, Timestamp> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
    // @formatter:on
}
