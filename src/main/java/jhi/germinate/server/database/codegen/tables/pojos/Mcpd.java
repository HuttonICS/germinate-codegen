/*
 * This file is generated by jOOQ.
 */
package jhi.germinate.server.database.codegen.tables.pojos;


import java.io.Serializable;
import java.math.BigDecimal;
import java.sql.Timestamp;


// @formatter:off
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Mcpd implements Serializable {

    private static final long serialVersionUID = 1L;

    private Integer    germinatebaseId;
    private String     puid;
    private String     instcode;
    private String     accenumb;
    private String     collnumb;
    private String     collcode;
    private String     collname;
    private String     collinstaddress;
    private String     collmissid;
    private String     genus;
    private String     species;
    private String     spauthor;
    private String     subtaxa;
    private String     subtauthor;
    private String     cropname;
    private String     accename;
    private String     acqdate;
    private String     origcty;
    private String     collsite;
    private BigDecimal declatitude;
    private String     latitude;
    private BigDecimal declongitude;
    private String     longitude;
    private Integer    coorduncert;
    private String     coorddatum;
    private String     georefmeth;
    private BigDecimal elevation;
    private String     colldate;
    private String     bredcode;
    private String     bredname;
    private Integer    sampstat;
    private String     ancest;
    private Integer    collsrc;
    private String     donorcode;
    private String     donorname;
    private String     donornumb;
    private String     othernumb;
    private String     duplsite;
    private String     duplinstname;
    private String     storage;
    private Integer    mlsstat;
    private String     remarks;
    private Timestamp  createdOn;
    private Timestamp  updatedOn;

    public Mcpd() {}

    public Mcpd(Mcpd value) {
        this.germinatebaseId = value.germinatebaseId;
        this.puid = value.puid;
        this.instcode = value.instcode;
        this.accenumb = value.accenumb;
        this.collnumb = value.collnumb;
        this.collcode = value.collcode;
        this.collname = value.collname;
        this.collinstaddress = value.collinstaddress;
        this.collmissid = value.collmissid;
        this.genus = value.genus;
        this.species = value.species;
        this.spauthor = value.spauthor;
        this.subtaxa = value.subtaxa;
        this.subtauthor = value.subtauthor;
        this.cropname = value.cropname;
        this.accename = value.accename;
        this.acqdate = value.acqdate;
        this.origcty = value.origcty;
        this.collsite = value.collsite;
        this.declatitude = value.declatitude;
        this.latitude = value.latitude;
        this.declongitude = value.declongitude;
        this.longitude = value.longitude;
        this.coorduncert = value.coorduncert;
        this.coorddatum = value.coorddatum;
        this.georefmeth = value.georefmeth;
        this.elevation = value.elevation;
        this.colldate = value.colldate;
        this.bredcode = value.bredcode;
        this.bredname = value.bredname;
        this.sampstat = value.sampstat;
        this.ancest = value.ancest;
        this.collsrc = value.collsrc;
        this.donorcode = value.donorcode;
        this.donorname = value.donorname;
        this.donornumb = value.donornumb;
        this.othernumb = value.othernumb;
        this.duplsite = value.duplsite;
        this.duplinstname = value.duplinstname;
        this.storage = value.storage;
        this.mlsstat = value.mlsstat;
        this.remarks = value.remarks;
        this.createdOn = value.createdOn;
        this.updatedOn = value.updatedOn;
    }

    public Mcpd(
        Integer    germinatebaseId,
        String     puid,
        String     instcode,
        String     accenumb,
        String     collnumb,
        String     collcode,
        String     collname,
        String     collinstaddress,
        String     collmissid,
        String     genus,
        String     species,
        String     spauthor,
        String     subtaxa,
        String     subtauthor,
        String     cropname,
        String     accename,
        String     acqdate,
        String     origcty,
        String     collsite,
        BigDecimal declatitude,
        String     latitude,
        BigDecimal declongitude,
        String     longitude,
        Integer    coorduncert,
        String     coorddatum,
        String     georefmeth,
        BigDecimal elevation,
        String     colldate,
        String     bredcode,
        String     bredname,
        Integer    sampstat,
        String     ancest,
        Integer    collsrc,
        String     donorcode,
        String     donorname,
        String     donornumb,
        String     othernumb,
        String     duplsite,
        String     duplinstname,
        String     storage,
        Integer    mlsstat,
        String     remarks,
        Timestamp  createdOn,
        Timestamp  updatedOn
    ) {
        this.germinatebaseId = germinatebaseId;
        this.puid = puid;
        this.instcode = instcode;
        this.accenumb = accenumb;
        this.collnumb = collnumb;
        this.collcode = collcode;
        this.collname = collname;
        this.collinstaddress = collinstaddress;
        this.collmissid = collmissid;
        this.genus = genus;
        this.species = species;
        this.spauthor = spauthor;
        this.subtaxa = subtaxa;
        this.subtauthor = subtauthor;
        this.cropname = cropname;
        this.accename = accename;
        this.acqdate = acqdate;
        this.origcty = origcty;
        this.collsite = collsite;
        this.declatitude = declatitude;
        this.latitude = latitude;
        this.declongitude = declongitude;
        this.longitude = longitude;
        this.coorduncert = coorduncert;
        this.coorddatum = coorddatum;
        this.georefmeth = georefmeth;
        this.elevation = elevation;
        this.colldate = colldate;
        this.bredcode = bredcode;
        this.bredname = bredname;
        this.sampstat = sampstat;
        this.ancest = ancest;
        this.collsrc = collsrc;
        this.donorcode = donorcode;
        this.donorname = donorname;
        this.donornumb = donornumb;
        this.othernumb = othernumb;
        this.duplsite = duplsite;
        this.duplinstname = duplinstname;
        this.storage = storage;
        this.mlsstat = mlsstat;
        this.remarks = remarks;
        this.createdOn = createdOn;
        this.updatedOn = updatedOn;
    }

    /**
     * Getter for <code>germinate_db.mcpd.germinatebase_id</code>.
     */
    public Integer getGerminatebaseId() {
        return this.germinatebaseId;
    }

    /**
     * Setter for <code>germinate_db.mcpd.germinatebase_id</code>.
     */
    public void setGerminatebaseId(Integer germinatebaseId) {
        this.germinatebaseId = germinatebaseId;
    }

    /**
     * Getter for <code>germinate_db.mcpd.puid</code>. Any persistent, unique
     * identifier assigned to the accession so it can be unambiguously
     * referenced at the global level and the information associated with it
     * harvested through automated means. Report one PUID for each accession.
     */
    public String getPuid() {
        return this.puid;
    }

    /**
     * Setter for <code>germinate_db.mcpd.puid</code>. Any persistent, unique
     * identifier assigned to the accession so it can be unambiguously
     * referenced at the global level and the information associated with it
     * harvested through automated means. Report one PUID for each accession.
     */
    public void setPuid(String puid) {
        this.puid = puid;
    }

    /**
     * Getter for <code>germinate_db.mcpd.instcode</code>. FAO WIEWS code of the
     * institute where the accession is maintained. The codes consist of the
     * 3-letter ISO 3166 country code of the country where the institute is
     * located plus a number (e.g. COL001). The current set of institute codes
     * is available from http://www.fao.org/wiews. For those institutes not yet
     * having an FAO Code, or for those with 'obsolete' codes, see 'Common
     * formatting rules (v)'.
     */
    public String getInstcode() {
        return this.instcode;
    }

    /**
     * Setter for <code>germinate_db.mcpd.instcode</code>. FAO WIEWS code of the
     * institute where the accession is maintained. The codes consist of the
     * 3-letter ISO 3166 country code of the country where the institute is
     * located plus a number (e.g. COL001). The current set of institute codes
     * is available from http://www.fao.org/wiews. For those institutes not yet
     * having an FAO Code, or for those with 'obsolete' codes, see 'Common
     * formatting rules (v)'.
     */
    public void setInstcode(String instcode) {
        this.instcode = instcode;
    }

    /**
     * Getter for <code>germinate_db.mcpd.accenumb</code>. This is the unique
     * identifier for accessions within a genebank, and is assigned when a
     * sample is entered into the genebank collection (e.g. 'PI 113869').
     */
    public String getAccenumb() {
        return this.accenumb;
    }

    /**
     * Setter for <code>germinate_db.mcpd.accenumb</code>. This is the unique
     * identifier for accessions within a genebank, and is assigned when a
     * sample is entered into the genebank collection (e.g. 'PI 113869').
     */
    public void setAccenumb(String accenumb) {
        this.accenumb = accenumb;
    }

    /**
     * Getter for <code>germinate_db.mcpd.collnumb</code>. Original identifier
     * assigned by the collector(s) of the sample, normally composed of the name
     * or initials of the collector(s) followed by a number (e.g. 'FM9909').
     * This identifier is essential for identifying duplicates held in different
     * collections.
     */
    public String getCollnumb() {
        return this.collnumb;
    }

    /**
     * Setter for <code>germinate_db.mcpd.collnumb</code>. Original identifier
     * assigned by the collector(s) of the sample, normally composed of the name
     * or initials of the collector(s) followed by a number (e.g. 'FM9909').
     * This identifier is essential for identifying duplicates held in different
     * collections.
     */
    public void setCollnumb(String collnumb) {
        this.collnumb = collnumb;
    }

    /**
     * Getter for <code>germinate_db.mcpd.collcode</code>. FAO WIEWS code of the
     * institute collecting the sample. If the holding institute has collected
     * the material, the collecting institute code (COLLCODE) should be the same
     * as the holding institute code (INSTCODE). Follows INSTCODE standard.
     * Multiple values are separated by a semicolon without space.
     */
    public String getCollcode() {
        return this.collcode;
    }

    /**
     * Setter for <code>germinate_db.mcpd.collcode</code>. FAO WIEWS code of the
     * institute collecting the sample. If the holding institute has collected
     * the material, the collecting institute code (COLLCODE) should be the same
     * as the holding institute code (INSTCODE). Follows INSTCODE standard.
     * Multiple values are separated by a semicolon without space.
     */
    public void setCollcode(String collcode) {
        this.collcode = collcode;
    }

    /**
     * Getter for <code>germinate_db.mcpd.collname</code>. Name of the institute
     * collecting the sample. This descriptor should be used only if COLLCODE
     * cannot be filled because the FAO WIEWS code for this institute is not
     * available. Multiple values are separated by a semicolon without space.
     */
    public String getCollname() {
        return this.collname;
    }

    /**
     * Setter for <code>germinate_db.mcpd.collname</code>. Name of the institute
     * collecting the sample. This descriptor should be used only if COLLCODE
     * cannot be filled because the FAO WIEWS code for this institute is not
     * available. Multiple values are separated by a semicolon without space.
     */
    public void setCollname(String collname) {
        this.collname = collname;
    }

    /**
     * Getter for <code>germinate_db.mcpd.collinstaddress</code>. Address of the
     * institute collecting the sample. This descriptor should be used only if
     * COLLCODE cannot be filled since the FAO WIEWS code for this institute is
     * not available. Multiple values are separated by a semicolon without
     * space.
     */
    public String getCollinstaddress() {
        return this.collinstaddress;
    }

    /**
     * Setter for <code>germinate_db.mcpd.collinstaddress</code>. Address of the
     * institute collecting the sample. This descriptor should be used only if
     * COLLCODE cannot be filled since the FAO WIEWS code for this institute is
     * not available. Multiple values are separated by a semicolon without
     * space.
     */
    public void setCollinstaddress(String collinstaddress) {
        this.collinstaddress = collinstaddress;
    }

    /**
     * Getter for <code>germinate_db.mcpd.collmissid</code>. Identifier of the
     * collecting mission used by the Collecting Institute (4 or 4.1) (e.g.
     * 'CIATFOR052', 'CN426').
     */
    public String getCollmissid() {
        return this.collmissid;
    }

    /**
     * Setter for <code>germinate_db.mcpd.collmissid</code>. Identifier of the
     * collecting mission used by the Collecting Institute (4 or 4.1) (e.g.
     * 'CIATFOR052', 'CN426').
     */
    public void setCollmissid(String collmissid) {
        this.collmissid = collmissid;
    }

    /**
     * Getter for <code>germinate_db.mcpd.genus</code>. Genus name for taxon.
     * Initial uppercase letter required.
     */
    public String getGenus() {
        return this.genus;
    }

    /**
     * Setter for <code>germinate_db.mcpd.genus</code>. Genus name for taxon.
     * Initial uppercase letter required.
     */
    public void setGenus(String genus) {
        this.genus = genus;
    }

    /**
     * Getter for <code>germinate_db.mcpd.species</code>. Specific epithet
     * portion of the scientific name in lowercase letters. Only the following
     * abbreviation is allowed: 'sp.'
     */
    public String getSpecies() {
        return this.species;
    }

    /**
     * Setter for <code>germinate_db.mcpd.species</code>. Specific epithet
     * portion of the scientific name in lowercase letters. Only the following
     * abbreviation is allowed: 'sp.'
     */
    public void setSpecies(String species) {
        this.species = species;
    }

    /**
     * Getter for <code>germinate_db.mcpd.spauthor</code>. Provide the authority
     * for the species name.
     */
    public String getSpauthor() {
        return this.spauthor;
    }

    /**
     * Setter for <code>germinate_db.mcpd.spauthor</code>. Provide the authority
     * for the species name.
     */
    public void setSpauthor(String spauthor) {
        this.spauthor = spauthor;
    }

    /**
     * Getter for <code>germinate_db.mcpd.subtaxa</code>. Subtaxon can be used
     * to store any additional taxonomic identifier. The following abbreviations
     * are allowed: 'subsp.' (for subspecies); 'convar.' (for convariety);
     * 'var.' (for variety); 'f.' (for form); 'Group' (for 'cultivar group').
     */
    public String getSubtaxa() {
        return this.subtaxa;
    }

    /**
     * Setter for <code>germinate_db.mcpd.subtaxa</code>. Subtaxon can be used
     * to store any additional taxonomic identifier. The following abbreviations
     * are allowed: 'subsp.' (for subspecies); 'convar.' (for convariety);
     * 'var.' (for variety); 'f.' (for form); 'Group' (for 'cultivar group').
     */
    public void setSubtaxa(String subtaxa) {
        this.subtaxa = subtaxa;
    }

    /**
     * Getter for <code>germinate_db.mcpd.subtauthor</code>. Provide the
     * subtaxon authority at the most detailed taxonomic level.
     */
    public String getSubtauthor() {
        return this.subtauthor;
    }

    /**
     * Setter for <code>germinate_db.mcpd.subtauthor</code>. Provide the
     * subtaxon authority at the most detailed taxonomic level.
     */
    public void setSubtauthor(String subtauthor) {
        this.subtauthor = subtauthor;
    }

    /**
     * Getter for <code>germinate_db.mcpd.cropname</code>. Common name of the
     * crop. Example: 'malting barley', 'macadamia', 'maïs'.
     */
    public String getCropname() {
        return this.cropname;
    }

    /**
     * Setter for <code>germinate_db.mcpd.cropname</code>. Common name of the
     * crop. Example: 'malting barley', 'macadamia', 'maïs'.
     */
    public void setCropname(String cropname) {
        this.cropname = cropname;
    }

    /**
     * Getter for <code>germinate_db.mcpd.accename</code>. Either a registered
     * or other designation given to the material received, other than the
     * donor's accession number (23) or collecting number (3). First letter
     * uppercase. Multiple names are separated by a semicolon without space.
     * Example: Accession name: Bogatyr;Symphony;Emma.
     */
    public String getAccename() {
        return this.accename;
    }

    /**
     * Setter for <code>germinate_db.mcpd.accename</code>. Either a registered
     * or other designation given to the material received, other than the
     * donor's accession number (23) or collecting number (3). First letter
     * uppercase. Multiple names are separated by a semicolon without space.
     * Example: Accession name: Bogatyr;Symphony;Emma.
     */
    public void setAccename(String accename) {
        this.accename = accename;
    }

    /**
     * Getter for <code>germinate_db.mcpd.acqdate</code>. Date on which the
     * accession entered the collection where YYYY is the year, MM is the month
     * and DD is the day. Missing data (MM or DD) should be indicated with
     * hyphens or '00' [double zero].
     */
    public String getAcqdate() {
        return this.acqdate;
    }

    /**
     * Setter for <code>germinate_db.mcpd.acqdate</code>. Date on which the
     * accession entered the collection where YYYY is the year, MM is the month
     * and DD is the day. Missing data (MM or DD) should be indicated with
     * hyphens or '00' [double zero].
     */
    public void setAcqdate(String acqdate) {
        this.acqdate = acqdate;
    }

    /**
     * Getter for <code>germinate_db.mcpd.origcty</code>. 3-letter ISO 3166-1
     * code of the country in which the sample was originally collected (e.g.
     * landrace, crop wild relative, farmers' variety), bred or selected
     * (breeding lines, GMOs, segregating populations, hybrids, modern
     * cultivars, etc.).
     */
    public String getOrigcty() {
        return this.origcty;
    }

    /**
     * Setter for <code>germinate_db.mcpd.origcty</code>. 3-letter ISO 3166-1
     * code of the country in which the sample was originally collected (e.g.
     * landrace, crop wild relative, farmers' variety), bred or selected
     * (breeding lines, GMOs, segregating populations, hybrids, modern
     * cultivars, etc.).
     */
    public void setOrigcty(String origcty) {
        this.origcty = origcty;
    }

    /**
     * Getter for <code>germinate_db.mcpd.collsite</code>. Location information
     * below the country level that describes where the accession was collected,
     * preferable in English. This might include the distance in kilometres and
     * direction from the nearest town, village or map grid reference point,
     * (e.g. 7 km south of Curitiba in the state of Parana).
     */
    public String getCollsite() {
        return this.collsite;
    }

    /**
     * Setter for <code>germinate_db.mcpd.collsite</code>. Location information
     * below the country level that describes where the accession was collected,
     * preferable in English. This might include the distance in kilometres and
     * direction from the nearest town, village or map grid reference point,
     * (e.g. 7 km south of Curitiba in the state of Parana).
     */
    public void setCollsite(String collsite) {
        this.collsite = collsite;
    }

    /**
     * Getter for <code>germinate_db.mcpd.declatitude</code>. Latitude expressed
     * in decimal degrees. Positive values are North of the Equator; negative
     * values are South of the Equator (e.g. -44.6975).
     */
    public BigDecimal getDeclatitude() {
        return this.declatitude;
    }

    /**
     * Setter for <code>germinate_db.mcpd.declatitude</code>. Latitude expressed
     * in decimal degrees. Positive values are North of the Equator; negative
     * values are South of the Equator (e.g. -44.6975).
     */
    public void setDeclatitude(BigDecimal declatitude) {
        this.declatitude = declatitude;
    }

    /**
     * Getter for <code>germinate_db.mcpd.latitude</code>. Degrees (2 digits)
     * minutes (2 digits), and seconds (2 digits) followed by N (North) or S
     * (South) (e.g. 103020S). Every missing digit (minutes or seconds) should
     * be indicated with a hyphen. Leading zeros are required (e.g. 10----S;
     * 011530N; 4531--S).
     */
    public String getLatitude() {
        return this.latitude;
    }

    /**
     * Setter for <code>germinate_db.mcpd.latitude</code>. Degrees (2 digits)
     * minutes (2 digits), and seconds (2 digits) followed by N (North) or S
     * (South) (e.g. 103020S). Every missing digit (minutes or seconds) should
     * be indicated with a hyphen. Leading zeros are required (e.g. 10----S;
     * 011530N; 4531--S).
     */
    public void setLatitude(String latitude) {
        this.latitude = latitude;
    }

    /**
     * Getter for <code>germinate_db.mcpd.declongitude</code>. Longitude
     * expressed in decimal degrees. Positive values are East of the Greenwich
     * Meridian; negative values are West of the Greenwich Meridian (e.g.
     * +120.9123).
     */
    public BigDecimal getDeclongitude() {
        return this.declongitude;
    }

    /**
     * Setter for <code>germinate_db.mcpd.declongitude</code>. Longitude
     * expressed in decimal degrees. Positive values are East of the Greenwich
     * Meridian; negative values are West of the Greenwich Meridian (e.g.
     * +120.9123).
     */
    public void setDeclongitude(BigDecimal declongitude) {
        this.declongitude = declongitude;
    }

    /**
     * Getter for <code>germinate_db.mcpd.longitude</code>. Degrees (3 digits),
     * minutes (2 digits), and seconds (2 digits) followed by E (East) or W
     * (West) (e.g. 0762510W). Every missing digit (minutes or seconds) should
     * be indicated with a hyphen. Leading zeros are required (e.g. 076----W).
     */
    public String getLongitude() {
        return this.longitude;
    }

    /**
     * Setter for <code>germinate_db.mcpd.longitude</code>. Degrees (3 digits),
     * minutes (2 digits), and seconds (2 digits) followed by E (East) or W
     * (West) (e.g. 0762510W). Every missing digit (minutes or seconds) should
     * be indicated with a hyphen. Leading zeros are required (e.g. 076----W).
     */
    public void setLongitude(String longitude) {
        this.longitude = longitude;
    }

    /**
     * Getter for <code>germinate_db.mcpd.coorduncert</code>. Uncertainty
     * associated with the coordinates in metres. Leave the value empty if the
     * uncertainty is unknown.
     */
    public Integer getCoorduncert() {
        return this.coorduncert;
    }

    /**
     * Setter for <code>germinate_db.mcpd.coorduncert</code>. Uncertainty
     * associated with the coordinates in metres. Leave the value empty if the
     * uncertainty is unknown.
     */
    public void setCoorduncert(Integer coorduncert) {
        this.coorduncert = coorduncert;
    }

    /**
     * Getter for <code>germinate_db.mcpd.coorddatum</code>. The geodetic datum
     * or spatial reference system upon which the coordinates given in decimal
     * latitude and decimal longitude are based (e.g. WGS84, ETRS89, NAD83). The
     * GPS uses the WGS84 datum.
     */
    public String getCoorddatum() {
        return this.coorddatum;
    }

    /**
     * Setter for <code>germinate_db.mcpd.coorddatum</code>. The geodetic datum
     * or spatial reference system upon which the coordinates given in decimal
     * latitude and decimal longitude are based (e.g. WGS84, ETRS89, NAD83). The
     * GPS uses the WGS84 datum.
     */
    public void setCoorddatum(String coorddatum) {
        this.coorddatum = coorddatum;
    }

    /**
     * Getter for <code>germinate_db.mcpd.georefmeth</code>. The georeferencing
     * method used (GPS, determined from map, gazetteer, or estimated using
     * software). Leave the value empty if georeferencing method is not known.
     */
    public String getGeorefmeth() {
        return this.georefmeth;
    }

    /**
     * Setter for <code>germinate_db.mcpd.georefmeth</code>. The georeferencing
     * method used (GPS, determined from map, gazetteer, or estimated using
     * software). Leave the value empty if georeferencing method is not known.
     */
    public void setGeorefmeth(String georefmeth) {
        this.georefmeth = georefmeth;
    }

    /**
     * Getter for <code>germinate_db.mcpd.elevation</code>. Elevation of
     * collecting site expressed in metres above sea level. Negative values are
     * allowed.
     */
    public BigDecimal getElevation() {
        return this.elevation;
    }

    /**
     * Setter for <code>germinate_db.mcpd.elevation</code>. Elevation of
     * collecting site expressed in metres above sea level. Negative values are
     * allowed.
     */
    public void setElevation(BigDecimal elevation) {
        this.elevation = elevation;
    }

    /**
     * Getter for <code>germinate_db.mcpd.colldate</code>. Collecting date of
     * the sample, where YYYY is the year, MM is the month and DD is the day.
     * Missing data (MM or DD) should be indicated with hyphens or '00' [double
     * zero].
     */
    public String getColldate() {
        return this.colldate;
    }

    /**
     * Setter for <code>germinate_db.mcpd.colldate</code>. Collecting date of
     * the sample, where YYYY is the year, MM is the month and DD is the day.
     * Missing data (MM or DD) should be indicated with hyphens or '00' [double
     * zero].
     */
    public void setColldate(String colldate) {
        this.colldate = colldate;
    }

    /**
     * Getter for <code>germinate_db.mcpd.bredcode</code>. FAO WIEWS code of the
     * institute that has bred the material. If the holding institute has bred
     * the material, the breeding institute code (BREDCODE) should be the same
     * as the holding institute code (INSTCODE). Follows INSTCODE standard.
     * Multiple values are separated by a semicolon without space.
     */
    public String getBredcode() {
        return this.bredcode;
    }

    /**
     * Setter for <code>germinate_db.mcpd.bredcode</code>. FAO WIEWS code of the
     * institute that has bred the material. If the holding institute has bred
     * the material, the breeding institute code (BREDCODE) should be the same
     * as the holding institute code (INSTCODE). Follows INSTCODE standard.
     * Multiple values are separated by a semicolon without space.
     */
    public void setBredcode(String bredcode) {
        this.bredcode = bredcode;
    }

    /**
     * Getter for <code>germinate_db.mcpd.bredname</code>. Name of the institute
     * (or person) that bred the material. This descriptor should be used only
     * if BREDCODE cannot be filled because the FAO WIEWS code for this
     * institute is not available. Multiple names are separated by a semicolon
     * without space.
     */
    public String getBredname() {
        return this.bredname;
    }

    /**
     * Setter for <code>germinate_db.mcpd.bredname</code>. Name of the institute
     * (or person) that bred the material. This descriptor should be used only
     * if BREDCODE cannot be filled because the FAO WIEWS code for this
     * institute is not available. Multiple names are separated by a semicolon
     * without space.
     */
    public void setBredname(String bredname) {
        this.bredname = bredname;
    }

    /**
     * Getter for <code>germinate_db.mcpd.sampstat</code>. The coding scheme
     * proposed can be used at 3 different levels of detail: either by using the
     * general codes (in boldface) such as 100, 200, 300, 400, or by using the
     * more specific codes such as 110, 120, etc.
     */
    public Integer getSampstat() {
        return this.sampstat;
    }

    /**
     * Setter for <code>germinate_db.mcpd.sampstat</code>. The coding scheme
     * proposed can be used at 3 different levels of detail: either by using the
     * general codes (in boldface) such as 100, 200, 300, 400, or by using the
     * more specific codes such as 110, 120, etc.
     */
    public void setSampstat(Integer sampstat) {
        this.sampstat = sampstat;
    }

    /**
     * Getter for <code>germinate_db.mcpd.ancest</code>. Information about
     * either pedigree or other description of ancestral information (e.g.
     * parent variety in case of mutant or selection). For example a pedigree
     * 'Hanna/7*Atlas//Turk/8*Atlas' or a description 'mutation found in Hanna',
     * 'selection from Irene' or 'cross involving amongst others Hanna and
     * Irene'.
     */
    public String getAncest() {
        return this.ancest;
    }

    /**
     * Setter for <code>germinate_db.mcpd.ancest</code>. Information about
     * either pedigree or other description of ancestral information (e.g.
     * parent variety in case of mutant or selection). For example a pedigree
     * 'Hanna/7*Atlas//Turk/8*Atlas' or a description 'mutation found in Hanna',
     * 'selection from Irene' or 'cross involving amongst others Hanna and
     * Irene'.
     */
    public void setAncest(String ancest) {
        this.ancest = ancest;
    }

    /**
     * Getter for <code>germinate_db.mcpd.collsrc</code>. The coding scheme
     * proposed can be used at 2 different levels of detail: either by using the
     * general codes (in boldface) such as 10, 20, 30, 40, etc., or by using the
     * more specific codes, such as 11, 12, etc.
     */
    public Integer getCollsrc() {
        return this.collsrc;
    }

    /**
     * Setter for <code>germinate_db.mcpd.collsrc</code>. The coding scheme
     * proposed can be used at 2 different levels of detail: either by using the
     * general codes (in boldface) such as 10, 20, 30, 40, etc., or by using the
     * more specific codes, such as 11, 12, etc.
     */
    public void setCollsrc(Integer collsrc) {
        this.collsrc = collsrc;
    }

    /**
     * Getter for <code>germinate_db.mcpd.donorcode</code>. FAO WIEWS code of
     * the donor institute. Follows INSTCODE standard.
     */
    public String getDonorcode() {
        return this.donorcode;
    }

    /**
     * Setter for <code>germinate_db.mcpd.donorcode</code>. FAO WIEWS code of
     * the donor institute. Follows INSTCODE standard.
     */
    public void setDonorcode(String donorcode) {
        this.donorcode = donorcode;
    }

    /**
     * Getter for <code>germinate_db.mcpd.donorname</code>. Name of the donor
     * institute (or person). This descriptor should be used only if DONORCODE
     * cannot be filled because the FAO WIEWS code for this institute is not
     * available.
     */
    public String getDonorname() {
        return this.donorname;
    }

    /**
     * Setter for <code>germinate_db.mcpd.donorname</code>. Name of the donor
     * institute (or person). This descriptor should be used only if DONORCODE
     * cannot be filled because the FAO WIEWS code for this institute is not
     * available.
     */
    public void setDonorname(String donorname) {
        this.donorname = donorname;
    }

    /**
     * Getter for <code>germinate_db.mcpd.donornumb</code>. Identifier assigned
     * to an accession by the donor. Follows ACCENUMB standard.
     */
    public String getDonornumb() {
        return this.donornumb;
    }

    /**
     * Setter for <code>germinate_db.mcpd.donornumb</code>. Identifier assigned
     * to an accession by the donor. Follows ACCENUMB standard.
     */
    public void setDonornumb(String donornumb) {
        this.donornumb = donornumb;
    }

    /**
     * Getter for <code>germinate_db.mcpd.othernumb</code>. Any other
     * identifiers known to exist in other collections for this accession. Use
     * the following format: INSTCODE:ACCENUMB;INSTCODE:identifier;… INSTCODE
     * and identifier are separated by a colon without space. Pairs of INSTCODE
     * and identifier are separated by a semicolon without space. When the
     * institute is not known, the identifier should be preceded by a colon.
     */
    public String getOthernumb() {
        return this.othernumb;
    }

    /**
     * Setter for <code>germinate_db.mcpd.othernumb</code>. Any other
     * identifiers known to exist in other collections for this accession. Use
     * the following format: INSTCODE:ACCENUMB;INSTCODE:identifier;… INSTCODE
     * and identifier are separated by a colon without space. Pairs of INSTCODE
     * and identifier are separated by a semicolon without space. When the
     * institute is not known, the identifier should be preceded by a colon.
     */
    public void setOthernumb(String othernumb) {
        this.othernumb = othernumb;
    }

    /**
     * Getter for <code>germinate_db.mcpd.duplsite</code>. FAO WIEWS code of the
     * institute(s) where a safety duplicate of the accession is maintained.
     * Multiple values are separated by a semicolon without space. Follows
     * INSTCODE standard.
     */
    public String getDuplsite() {
        return this.duplsite;
    }

    /**
     * Setter for <code>germinate_db.mcpd.duplsite</code>. FAO WIEWS code of the
     * institute(s) where a safety duplicate of the accession is maintained.
     * Multiple values are separated by a semicolon without space. Follows
     * INSTCODE standard.
     */
    public void setDuplsite(String duplsite) {
        this.duplsite = duplsite;
    }

    /**
     * Getter for <code>germinate_db.mcpd.duplinstname</code>. Name of the
     * institute where a safety duplicate of the accession is maintained.
     * Multiple values are separated by a semicolon without space.
     */
    public String getDuplinstname() {
        return this.duplinstname;
    }

    /**
     * Setter for <code>germinate_db.mcpd.duplinstname</code>. Name of the
     * institute where a safety duplicate of the accession is maintained.
     * Multiple values are separated by a semicolon without space.
     */
    public void setDuplinstname(String duplinstname) {
        this.duplinstname = duplinstname;
    }

    /**
     * Getter for <code>germinate_db.mcpd.storage</code>. If germplasm is
     * maintained under different types of storage, multiple choices are
     * allowed, separated by a semicolon (e.g. 20;30). (Refer to FAO/IPGRI
     * Genebank Standards 1994 for details on storage type.)
     */
    public String getStorage() {
        return this.storage;
    }

    /**
     * Setter for <code>germinate_db.mcpd.storage</code>. If germplasm is
     * maintained under different types of storage, multiple choices are
     * allowed, separated by a semicolon (e.g. 20;30). (Refer to FAO/IPGRI
     * Genebank Standards 1994 for details on storage type.)
     */
    public void setStorage(String storage) {
        this.storage = storage;
    }

    /**
     * Getter for <code>germinate_db.mcpd.mlsstat</code>. The status of an
     * accession with regards to the Multilateral System (MLS) of the
     * International Treaty on Plant Genetic Resources for Food and Agriculture.
     * Leave the value empty if the status is not known
     */
    public Integer getMlsstat() {
        return this.mlsstat;
    }

    /**
     * Setter for <code>germinate_db.mcpd.mlsstat</code>. The status of an
     * accession with regards to the Multilateral System (MLS) of the
     * International Treaty on Plant Genetic Resources for Food and Agriculture.
     * Leave the value empty if the status is not known
     */
    public void setMlsstat(Integer mlsstat) {
        this.mlsstat = mlsstat;
    }

    /**
     * Getter for <code>germinate_db.mcpd.remarks</code>. The remarks field is
     * used to add notes or to elaborate on descriptors with value 99 or 999 (=
     * Other). Prefix remarks with the field name they refer to and a colon (:)
     * without space (e.g. COLLSRC:riverside). Distinct remarks referring to
     * different fields are separated by semicolons without space.
     */
    public String getRemarks() {
        return this.remarks;
    }

    /**
     * Setter for <code>germinate_db.mcpd.remarks</code>. The remarks field is
     * used to add notes or to elaborate on descriptors with value 99 or 999 (=
     * Other). Prefix remarks with the field name they refer to and a colon (:)
     * without space (e.g. COLLSRC:riverside). Distinct remarks referring to
     * different fields are separated by semicolons without space.
     */
    public void setRemarks(String remarks) {
        this.remarks = remarks;
    }

    /**
     * Getter for <code>germinate_db.mcpd.created_on</code>. Date and time when
     * this record was created.
     */
    public Timestamp getCreatedOn() {
        return this.createdOn;
    }

    /**
     * Setter for <code>germinate_db.mcpd.created_on</code>. Date and time when
     * this record was created.
     */
    public void setCreatedOn(Timestamp createdOn) {
        this.createdOn = createdOn;
    }

    /**
     * Getter for <code>germinate_db.mcpd.updated_on</code>. Timestamp of the
     * last update to this record.
     */
    public Timestamp getUpdatedOn() {
        return this.updatedOn;
    }

    /**
     * Setter for <code>germinate_db.mcpd.updated_on</code>. Timestamp of the
     * last update to this record.
     */
    public void setUpdatedOn(Timestamp updatedOn) {
        this.updatedOn = updatedOn;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("Mcpd (");

        sb.append(germinatebaseId);
        sb.append(", ").append(puid);
        sb.append(", ").append(instcode);
        sb.append(", ").append(accenumb);
        sb.append(", ").append(collnumb);
        sb.append(", ").append(collcode);
        sb.append(", ").append(collname);
        sb.append(", ").append(collinstaddress);
        sb.append(", ").append(collmissid);
        sb.append(", ").append(genus);
        sb.append(", ").append(species);
        sb.append(", ").append(spauthor);
        sb.append(", ").append(subtaxa);
        sb.append(", ").append(subtauthor);
        sb.append(", ").append(cropname);
        sb.append(", ").append(accename);
        sb.append(", ").append(acqdate);
        sb.append(", ").append(origcty);
        sb.append(", ").append(collsite);
        sb.append(", ").append(declatitude);
        sb.append(", ").append(latitude);
        sb.append(", ").append(declongitude);
        sb.append(", ").append(longitude);
        sb.append(", ").append(coorduncert);
        sb.append(", ").append(coorddatum);
        sb.append(", ").append(georefmeth);
        sb.append(", ").append(elevation);
        sb.append(", ").append(colldate);
        sb.append(", ").append(bredcode);
        sb.append(", ").append(bredname);
        sb.append(", ").append(sampstat);
        sb.append(", ").append(ancest);
        sb.append(", ").append(collsrc);
        sb.append(", ").append(donorcode);
        sb.append(", ").append(donorname);
        sb.append(", ").append(donornumb);
        sb.append(", ").append(othernumb);
        sb.append(", ").append(duplsite);
        sb.append(", ").append(duplinstname);
        sb.append(", ").append(storage);
        sb.append(", ").append(mlsstat);
        sb.append(", ").append(remarks);
        sb.append(", ").append(createdOn);
        sb.append(", ").append(updatedOn);

        sb.append(")");
        return sb.toString();
    }
    // @formatter:on
}
