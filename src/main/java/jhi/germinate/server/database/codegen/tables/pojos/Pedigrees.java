/*
 * This file is generated by jOOQ.
 */
package jhi.germinate.server.database.codegen.tables.pojos;


import java.io.Serializable;
import java.sql.Timestamp;

import jhi.germinate.server.database.codegen.enums.PedigreesRelationshipType;


// @formatter:off
/**
 * Holds pedigree definitions. A pedigree is constructed from a series of
 * individial-&gt;parent records. This gives a great deal of flexibility in how
 * pedigree networks can be constructed. This table is required for operation
 * with the Helium pedigree viewer.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Pedigrees implements Serializable {

    private static final long serialVersionUID = 1L;

    private Integer                   id;
    private Integer                   datasetId;
    private Integer                   germinatebaseId;
    private Integer                   parentId;
    private PedigreesRelationshipType relationshipType;
    private Integer                   pedigreedescriptionId;
    private String                    relationshipDescription;
    private Timestamp                 createdOn;
    private Timestamp                 updatedOn;

    public Pedigrees() {}

    public Pedigrees(Pedigrees value) {
        this.id = value.id;
        this.datasetId = value.datasetId;
        this.germinatebaseId = value.germinatebaseId;
        this.parentId = value.parentId;
        this.relationshipType = value.relationshipType;
        this.pedigreedescriptionId = value.pedigreedescriptionId;
        this.relationshipDescription = value.relationshipDescription;
        this.createdOn = value.createdOn;
        this.updatedOn = value.updatedOn;
    }

    public Pedigrees(
        Integer                   id,
        Integer                   datasetId,
        Integer                   germinatebaseId,
        Integer                   parentId,
        PedigreesRelationshipType relationshipType,
        Integer                   pedigreedescriptionId,
        String                    relationshipDescription,
        Timestamp                 createdOn,
        Timestamp                 updatedOn
    ) {
        this.id = id;
        this.datasetId = datasetId;
        this.germinatebaseId = germinatebaseId;
        this.parentId = parentId;
        this.relationshipType = relationshipType;
        this.pedigreedescriptionId = pedigreedescriptionId;
        this.relationshipDescription = relationshipDescription;
        this.createdOn = createdOn;
        this.updatedOn = updatedOn;
    }

    /**
     * Getter for <code>germinate_db.pedigrees.id</code>. Primary id for this
     * table. This uniquely identifies the row.
     */
    public Integer getId() {
        return this.id;
    }

    /**
     * Setter for <code>germinate_db.pedigrees.id</code>. Primary id for this
     * table. This uniquely identifies the row.
     */
    public void setId(Integer id) {
        this.id = id;
    }

    /**
     * Getter for <code>germinate_db.pedigrees.dataset_id</code>.
     */
    public Integer getDatasetId() {
        return this.datasetId;
    }

    /**
     * Setter for <code>germinate_db.pedigrees.dataset_id</code>.
     */
    public void setDatasetId(Integer datasetId) {
        this.datasetId = datasetId;
    }

    /**
     * Getter for <code>germinate_db.pedigrees.germinatebase_id</code>. Foreign
     * key germinatebase (germinatebase.id).
     */
    public Integer getGerminatebaseId() {
        return this.germinatebaseId;
    }

    /**
     * Setter for <code>germinate_db.pedigrees.germinatebase_id</code>. Foreign
     * key germinatebase (germinatebase.id).
     */
    public void setGerminatebaseId(Integer germinatebaseId) {
        this.germinatebaseId = germinatebaseId;
    }

    /**
     * Getter for <code>germinate_db.pedigrees.parent_id</code>. Foreign key
     * germinatebase (germinatebase.id). This is the parrent of the individual
     * identified in the germinatebase_id column.
     */
    public Integer getParentId() {
        return this.parentId;
    }

    /**
     * Setter for <code>germinate_db.pedigrees.parent_id</code>. Foreign key
     * germinatebase (germinatebase.id). This is the parrent of the individual
     * identified in the germinatebase_id column.
     */
    public void setParentId(Integer parentId) {
        this.parentId = parentId;
    }

    /**
     * Getter for <code>germinate_db.pedigrees.relationship_type</code>. Male or
     * Female parent. Should be recorded as 'M' (male) or 'F' (female).
     */
    public PedigreesRelationshipType getRelationshipType() {
        return this.relationshipType;
    }

    /**
     * Setter for <code>germinate_db.pedigrees.relationship_type</code>. Male or
     * Female parent. Should be recorded as 'M' (male) or 'F' (female).
     */
    public void setRelationshipType(PedigreesRelationshipType relationshipType) {
        this.relationshipType = relationshipType;
    }

    /**
     * Getter for <code>germinate_db.pedigrees.pedigreedescription_id</code>.
     * Foreign key pedigreedescriptions (pedigreedescriptions.id).
     */
    public Integer getPedigreedescriptionId() {
        return this.pedigreedescriptionId;
    }

    /**
     * Setter for <code>germinate_db.pedigrees.pedigreedescription_id</code>.
     * Foreign key pedigreedescriptions (pedigreedescriptions.id).
     */
    public void setPedigreedescriptionId(Integer pedigreedescriptionId) {
        this.pedigreedescriptionId = pedigreedescriptionId;
    }

    /**
     * Getter for <code>germinate_db.pedigrees.relationship_description</code>.
     * Can be used as a meta-data field to describe the relationships if a
     * complex rellationship is required. Examples may include, 'is a complex
     * cross containing', 'F4 generation' and so on. This is used by the Helium
     * pedigree visualiztion tool.
     */
    public String getRelationshipDescription() {
        return this.relationshipDescription;
    }

    /**
     * Setter for <code>germinate_db.pedigrees.relationship_description</code>.
     * Can be used as a meta-data field to describe the relationships if a
     * complex rellationship is required. Examples may include, 'is a complex
     * cross containing', 'F4 generation' and so on. This is used by the Helium
     * pedigree visualiztion tool.
     */
    public void setRelationshipDescription(String relationshipDescription) {
        this.relationshipDescription = relationshipDescription;
    }

    /**
     * Getter for <code>germinate_db.pedigrees.created_on</code>. When the
     * record was created.
     */
    public Timestamp getCreatedOn() {
        return this.createdOn;
    }

    /**
     * Setter for <code>germinate_db.pedigrees.created_on</code>. When the
     * record was created.
     */
    public void setCreatedOn(Timestamp createdOn) {
        this.createdOn = createdOn;
    }

    /**
     * Getter for <code>germinate_db.pedigrees.updated_on</code>. When the
     * record was updated. This may be different from the created on date if
     * subsequent changes have been made to the underlying record.
     */
    public Timestamp getUpdatedOn() {
        return this.updatedOn;
    }

    /**
     * Setter for <code>germinate_db.pedigrees.updated_on</code>. When the
     * record was updated. This may be different from the created on date if
     * subsequent changes have been made to the underlying record.
     */
    public void setUpdatedOn(Timestamp updatedOn) {
        this.updatedOn = updatedOn;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("Pedigrees (");

        sb.append(id);
        sb.append(", ").append(datasetId);
        sb.append(", ").append(germinatebaseId);
        sb.append(", ").append(parentId);
        sb.append(", ").append(relationshipType);
        sb.append(", ").append(pedigreedescriptionId);
        sb.append(", ").append(relationshipDescription);
        sb.append(", ").append(createdOn);
        sb.append(", ").append(updatedOn);

        sb.append(")");
        return sb.toString();
    }
    // @formatter:on
}
