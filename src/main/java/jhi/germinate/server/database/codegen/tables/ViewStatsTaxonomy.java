/*
 * This file is generated by jOOQ.
 */
package jhi.germinate.server.database.codegen.tables;


import jhi.germinate.server.database.codegen.GerminateDb;
import jhi.germinate.server.database.codegen.tables.records.ViewStatsTaxonomyRecord;

import org.jooq.Field;
import org.jooq.Name;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


// @formatter:off
/**
 * VIEW
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ViewStatsTaxonomy extends TableImpl<ViewStatsTaxonomyRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>germinate_db.view_stats_taxonomy</code>
     */
    public static final ViewStatsTaxonomy VIEW_STATS_TAXONOMY = new ViewStatsTaxonomy();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ViewStatsTaxonomyRecord> getRecordType() {
        return ViewStatsTaxonomyRecord.class;
    }

    /**
     * The column <code>germinate_db.view_stats_taxonomy.genus</code>.
     */
    public final TableField<ViewStatsTaxonomyRecord, String> GENUS = createField(DSL.name("genus"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>germinate_db.view_stats_taxonomy.species</code>.
     */
    public final TableField<ViewStatsTaxonomyRecord, String> SPECIES = createField(DSL.name("species"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>germinate_db.view_stats_taxonomy.subtaxa</code>.
     */
    public final TableField<ViewStatsTaxonomyRecord, String> SUBTAXA = createField(DSL.name("subtaxa"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>germinate_db.view_stats_taxonomy.count</code>.
     */
    public final TableField<ViewStatsTaxonomyRecord, Long> COUNT = createField(DSL.name("count"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.BIGINT)), this, "");

    private ViewStatsTaxonomy(Name alias, Table<ViewStatsTaxonomyRecord> aliased) {
        this(alias, aliased, null);
    }

    private ViewStatsTaxonomy(Name alias, Table<ViewStatsTaxonomyRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("VIEW"), TableOptions.view("create view `view_stats_taxonomy` as select `t`.`genus` AS `genus`,`t`.`species` AS `species`,`t`.`subtaxa` AS `subtaxa`,`t`.`count` AS `count` from (select `germinate_template_4_24_02_09`.`taxonomies`.`genus` AS `genus`,`germinate_template_4_24_02_09`.`taxonomies`.`species` AS `species`,`germinate_template_4_24_02_09`.`taxonomies`.`subtaxa` AS `subtaxa`,count(1) AS `count` from (`germinate_template_4_24_02_09`.`germinatebase` left join `germinate_template_4_24_02_09`.`taxonomies` on((`germinate_template_4_24_02_09`.`taxonomies`.`id` = `germinate_template_4_24_02_09`.`germinatebase`.`taxonomy_id`))) where ((`germinate_template_4_24_02_09`.`taxonomies`.`genus` is not null) and (`germinate_template_4_24_02_09`.`germinatebase`.`entitytype_id` = 1)) group by `germinate_template_4_24_02_09`.`taxonomies`.`id` union select 'N/A' AS `genus`,NULL AS `species`,NULL AS `subtaxa`,count(1) AS `count` from (`germinate_template_4_24_02_09`.`germinatebase` left join `germinate_template_4_24_02_09`.`taxonomies` on((`germinate_template_4_24_02_09`.`taxonomies`.`id` = `germinate_template_4_24_02_09`.`germinatebase`.`taxonomy_id`))) where (isnull(`germinate_template_4_24_02_09`.`taxonomies`.`genus`) and (`germinate_template_4_24_02_09`.`germinatebase`.`entitytype_id` = 1)) group by `germinate_template_4_24_02_09`.`taxonomies`.`id`) `t` order by `t`.`count` desc"));
    }

    /**
     * Create an aliased <code>germinate_db.view_stats_taxonomy</code> table
     * reference
     */
    public ViewStatsTaxonomy(String alias) {
        this(DSL.name(alias), VIEW_STATS_TAXONOMY);
    }

    /**
     * Create an aliased <code>germinate_db.view_stats_taxonomy</code> table
     * reference
     */
    public ViewStatsTaxonomy(Name alias) {
        this(alias, VIEW_STATS_TAXONOMY);
    }

    /**
     * Create a <code>germinate_db.view_stats_taxonomy</code> table reference
     */
    public ViewStatsTaxonomy() {
        this(DSL.name("view_stats_taxonomy"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : GerminateDb.GERMINATE_DB;
    }

    @Override
    public ViewStatsTaxonomy as(String alias) {
        return new ViewStatsTaxonomy(DSL.name(alias), this);
    }

    @Override
    public ViewStatsTaxonomy as(Name alias) {
        return new ViewStatsTaxonomy(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ViewStatsTaxonomy rename(String name) {
        return new ViewStatsTaxonomy(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ViewStatsTaxonomy rename(Name name) {
        return new ViewStatsTaxonomy(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<String, String, String, Long> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
    // @formatter:on
}
