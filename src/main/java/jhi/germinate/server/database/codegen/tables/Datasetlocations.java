/*
 * This file is generated by jOOQ.
 */
package jhi.germinate.server.database.codegen.tables;


import java.sql.Timestamp;

import jhi.germinate.server.database.codegen.GerminateDb;
import jhi.germinate.server.database.codegen.tables.records.DatasetlocationsRecord;

import org.jooq.Field;
import org.jooq.Name;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


// @formatter:off
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Datasetlocations extends TableImpl<DatasetlocationsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>germinate_db.datasetlocations</code>
     */
    public static final Datasetlocations DATASETLOCATIONS = new Datasetlocations();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DatasetlocationsRecord> getRecordType() {
        return DatasetlocationsRecord.class;
    }

    /**
     * The column <code>germinate_db.datasetlocations.dataset_id</code>.
     */
    public final TableField<DatasetlocationsRecord, Integer> DATASET_ID = createField(DSL.name("dataset_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>germinate_db.datasetlocations.location_id</code>.
     */
    public final TableField<DatasetlocationsRecord, Integer> LOCATION_ID = createField(DSL.name("location_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>germinate_db.datasetlocations.created_on</code>.
     */
    public final TableField<DatasetlocationsRecord, Timestamp> CREATED_ON = createField(DSL.name("created_on"), SQLDataType.TIMESTAMP(0).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>germinate_db.datasetlocations.updated_on</code>.
     */
    public final TableField<DatasetlocationsRecord, Timestamp> UPDATED_ON = createField(DSL.name("updated_on"), SQLDataType.TIMESTAMP(0).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.TIMESTAMP)), this, "");

    private Datasetlocations(Name alias, Table<DatasetlocationsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Datasetlocations(Name alias, Table<DatasetlocationsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>germinate_db.datasetlocations</code> table
     * reference
     */
    public Datasetlocations(String alias) {
        this(DSL.name(alias), DATASETLOCATIONS);
    }

    /**
     * Create an aliased <code>germinate_db.datasetlocations</code> table
     * reference
     */
    public Datasetlocations(Name alias) {
        this(alias, DATASETLOCATIONS);
    }

    /**
     * Create a <code>germinate_db.datasetlocations</code> table reference
     */
    public Datasetlocations() {
        this(DSL.name("datasetlocations"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : GerminateDb.GERMINATE_DB;
    }

    @Override
    public UniqueKey<DatasetlocationsRecord> getPrimaryKey() {
        return Internal.createUniqueKey(Datasetlocations.DATASETLOCATIONS, DSL.name("KEY_datasetlocations_PRIMARY"), new TableField[] { Datasetlocations.DATASETLOCATIONS.DATASET_ID, Datasetlocations.DATASETLOCATIONS.LOCATION_ID }, true);
    }

    @Override
    public Datasetlocations as(String alias) {
        return new Datasetlocations(DSL.name(alias), this);
    }

    @Override
    public Datasetlocations as(Name alias) {
        return new Datasetlocations(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Datasetlocations rename(String name) {
        return new Datasetlocations(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Datasetlocations rename(Name name) {
        return new Datasetlocations(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, Integer, Timestamp, Timestamp> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
    // @formatter:on
}
