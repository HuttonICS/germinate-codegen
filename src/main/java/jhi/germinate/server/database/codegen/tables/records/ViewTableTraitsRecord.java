/*
 * This file is generated by jOOQ.
 */
package jhi.germinate.server.database.codegen.tables.records;


import jhi.germinate.server.database.codegen.enums.ViewTableTraitsDataType;
import jhi.germinate.server.database.codegen.tables.ViewTableTraits;
import jhi.germinate.server.database.pojo.TraitRestrictions;

import org.jooq.Field;
import org.jooq.Record13;
import org.jooq.Row13;
import org.jooq.impl.TableRecordImpl;


// @formatter:off
/**
 * VIEW
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ViewTableTraitsRecord extends TableRecordImpl<ViewTableTraitsRecord> implements Record13<Integer, String, String, String, ViewTableTraitsDataType, TraitRestrictions, Integer, String, String, String, String[], Integer[], Long> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>germinate_db.view_table_traits.trait_id</code>. Primary
     * id for this table. This uniquely identifies the row.
     */
    public void setTraitId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>germinate_db.view_table_traits.trait_id</code>. Primary
     * id for this table. This uniquely identifies the row.
     */
    public Integer getTraitId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>germinate_db.view_table_traits.trait_name</code>.
     * Phenotype full name.
     */
    public void setTraitName(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>germinate_db.view_table_traits.trait_name</code>.
     * Phenotype full name.
     */
    public String getTraitName() {
        return (String) get(1);
    }

    /**
     * Setter for <code>germinate_db.view_table_traits.trait_name_short</code>.
     * Shortened name for the phenotype. This is used in table columns where
     * space is an issue.
     */
    public void setTraitNameShort(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>germinate_db.view_table_traits.trait_name_short</code>.
     * Shortened name for the phenotype. This is used in table columns where
     * space is an issue.
     */
    public String getTraitNameShort() {
        return (String) get(2);
    }

    /**
     * Setter for <code>germinate_db.view_table_traits.trait_description</code>.
     * Full description of the phenotype. This should contain enough infomation
     * to accurately identify the phenoytpe and how it was recorded.
     */
    public void setTraitDescription(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>germinate_db.view_table_traits.trait_description</code>.
     * Full description of the phenotype. This should contain enough infomation
     * to accurately identify the phenoytpe and how it was recorded.
     */
    public String getTraitDescription() {
        return (String) get(3);
    }

    /**
     * Setter for <code>germinate_db.view_table_traits.data_type</code>. Defines
     * the data type of the phenotype. This can be of numeric, text, date or
     * categorical types.
     */
    public void setDataType(ViewTableTraitsDataType value) {
        set(4, value);
    }

    /**
     * Getter for <code>germinate_db.view_table_traits.data_type</code>. Defines
     * the data type of the phenotype. This can be of numeric, text, date or
     * categorical types.
     */
    public ViewTableTraitsDataType getDataType() {
        return (ViewTableTraitsDataType) get(4);
    }

    /**
     * Setter for
     * <code>germinate_db.view_table_traits.trait_restrictions</code>. A json
     * object describing the restrictions placed on this trait. It is an object
     * containing a field called "categories" which is an array of arrays, each
     * describing a categorical scale. Each scale must have the same length as
     * they describe the same categories just using different terms or numbers.
     * The other fields are "min" and "max" to specify upper and lower limits
     * for numeric traits.
     */
    public void setTraitRestrictions(TraitRestrictions value) {
        set(5, value);
    }

    /**
     * Getter for
     * <code>germinate_db.view_table_traits.trait_restrictions</code>. A json
     * object describing the restrictions placed on this trait. It is an object
     * containing a field called "categories" which is an array of arrays, each
     * describing a categorical scale. Each scale must have the same length as
     * they describe the same categories just using different terms or numbers.
     * The other fields are "min" and "max" to specify upper and lower limits
     * for numeric traits.
     */
    public TraitRestrictions getTraitRestrictions() {
        return (TraitRestrictions) get(5);
    }

    /**
     * Setter for <code>germinate_db.view_table_traits.unit_id</code>. Primary
     * id for this table. This uniquely identifies the row.
     */
    public void setUnitId(Integer value) {
        set(6, value);
    }

    /**
     * Getter for <code>germinate_db.view_table_traits.unit_id</code>. Primary
     * id for this table. This uniquely identifies the row.
     */
    public Integer getUnitId() {
        return (Integer) get(6);
    }

    /**
     * Setter for <code>germinate_db.view_table_traits.unit_name</code>. The
     * name of the unit. This should be the name of the unit in full.
     */
    public void setUnitName(String value) {
        set(7, value);
    }

    /**
     * Getter for <code>germinate_db.view_table_traits.unit_name</code>. The
     * name of the unit. This should be the name of the unit in full.
     */
    public String getUnitName() {
        return (String) get(7);
    }

    /**
     * Setter for <code>germinate_db.view_table_traits.unit_description</code>.
     * A description of the unit. If the unit is not a standard SI unit then it
     * is beneficial to have a description which explains what the unit it, how
     * it is derived and any other information which would help identifiy it.
     */
    public void setUnitDescription(String value) {
        set(8, value);
    }

    /**
     * Getter for <code>germinate_db.view_table_traits.unit_description</code>.
     * A description of the unit. If the unit is not a standard SI unit then it
     * is beneficial to have a description which explains what the unit it, how
     * it is derived and any other information which would help identifiy it.
     */
    public String getUnitDescription() {
        return (String) get(8);
    }

    /**
     * Setter for <code>germinate_db.view_table_traits.unit_abbreviation</code>.
     * This should be the unit abbreviation.
     */
    public void setUnitAbbreviation(String value) {
        set(9, value);
    }

    /**
     * Getter for <code>germinate_db.view_table_traits.unit_abbreviation</code>.
     * This should be the unit abbreviation.
     */
    public String getUnitAbbreviation() {
        return (String) get(9);
    }

    /**
     * Setter for <code>germinate_db.view_table_traits.synonyms</code>. The
     * synonyms as a json array.
     */
    public void setSynonyms(String[] value) {
        set(10, value);
    }

    /**
     * Getter for <code>germinate_db.view_table_traits.synonyms</code>. The
     * synonyms as a json array.
     */
    public String[] getSynonyms() {
        return (String[]) get(10);
    }

    /**
     * Setter for <code>germinate_db.view_table_traits.dataset_ids</code>.
     */
    public void setDatasetIds(Integer[] value) {
        set(11, value);
    }

    /**
     * Getter for <code>germinate_db.view_table_traits.dataset_ids</code>.
     */
    public Integer[] getDatasetIds() {
        return (Integer[]) get(11);
    }

    /**
     * Setter for <code>germinate_db.view_table_traits.count</code>.
     */
    public void setCount(Long value) {
        set(12, value);
    }

    /**
     * Getter for <code>germinate_db.view_table_traits.count</code>.
     */
    public Long getCount() {
        return (Long) get(12);
    }

    // -------------------------------------------------------------------------
    // Record13 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row13<Integer, String, String, String, ViewTableTraitsDataType, TraitRestrictions, Integer, String, String, String, String[], Integer[], Long> fieldsRow() {
        return (Row13) super.fieldsRow();
    }

    @Override
    public Row13<Integer, String, String, String, ViewTableTraitsDataType, TraitRestrictions, Integer, String, String, String, String[], Integer[], Long> valuesRow() {
        return (Row13) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return ViewTableTraits.VIEW_TABLE_TRAITS.TRAIT_ID;
    }

    @Override
    public Field<String> field2() {
        return ViewTableTraits.VIEW_TABLE_TRAITS.TRAIT_NAME;
    }

    @Override
    public Field<String> field3() {
        return ViewTableTraits.VIEW_TABLE_TRAITS.TRAIT_NAME_SHORT;
    }

    @Override
    public Field<String> field4() {
        return ViewTableTraits.VIEW_TABLE_TRAITS.TRAIT_DESCRIPTION;
    }

    @Override
    public Field<ViewTableTraitsDataType> field5() {
        return ViewTableTraits.VIEW_TABLE_TRAITS.DATA_TYPE;
    }

    @Override
    public Field<TraitRestrictions> field6() {
        return ViewTableTraits.VIEW_TABLE_TRAITS.TRAIT_RESTRICTIONS;
    }

    @Override
    public Field<Integer> field7() {
        return ViewTableTraits.VIEW_TABLE_TRAITS.UNIT_ID;
    }

    @Override
    public Field<String> field8() {
        return ViewTableTraits.VIEW_TABLE_TRAITS.UNIT_NAME;
    }

    @Override
    public Field<String> field9() {
        return ViewTableTraits.VIEW_TABLE_TRAITS.UNIT_DESCRIPTION;
    }

    @Override
    public Field<String> field10() {
        return ViewTableTraits.VIEW_TABLE_TRAITS.UNIT_ABBREVIATION;
    }

    @Override
    public Field<String[]> field11() {
        return ViewTableTraits.VIEW_TABLE_TRAITS.SYNONYMS;
    }

    @Override
    public Field<Integer[]> field12() {
        return ViewTableTraits.VIEW_TABLE_TRAITS.DATASET_IDS;
    }

    @Override
    public Field<Long> field13() {
        return ViewTableTraits.VIEW_TABLE_TRAITS.COUNT;
    }

    @Override
    public Integer component1() {
        return getTraitId();
    }

    @Override
    public String component2() {
        return getTraitName();
    }

    @Override
    public String component3() {
        return getTraitNameShort();
    }

    @Override
    public String component4() {
        return getTraitDescription();
    }

    @Override
    public ViewTableTraitsDataType component5() {
        return getDataType();
    }

    @Override
    public TraitRestrictions component6() {
        return getTraitRestrictions();
    }

    @Override
    public Integer component7() {
        return getUnitId();
    }

    @Override
    public String component8() {
        return getUnitName();
    }

    @Override
    public String component9() {
        return getUnitDescription();
    }

    @Override
    public String component10() {
        return getUnitAbbreviation();
    }

    @Override
    public String[] component11() {
        return getSynonyms();
    }

    @Override
    public Integer[] component12() {
        return getDatasetIds();
    }

    @Override
    public Long component13() {
        return getCount();
    }

    @Override
    public Integer value1() {
        return getTraitId();
    }

    @Override
    public String value2() {
        return getTraitName();
    }

    @Override
    public String value3() {
        return getTraitNameShort();
    }

    @Override
    public String value4() {
        return getTraitDescription();
    }

    @Override
    public ViewTableTraitsDataType value5() {
        return getDataType();
    }

    @Override
    public TraitRestrictions value6() {
        return getTraitRestrictions();
    }

    @Override
    public Integer value7() {
        return getUnitId();
    }

    @Override
    public String value8() {
        return getUnitName();
    }

    @Override
    public String value9() {
        return getUnitDescription();
    }

    @Override
    public String value10() {
        return getUnitAbbreviation();
    }

    @Override
    public String[] value11() {
        return getSynonyms();
    }

    @Override
    public Integer[] value12() {
        return getDatasetIds();
    }

    @Override
    public Long value13() {
        return getCount();
    }

    @Override
    public ViewTableTraitsRecord value1(Integer value) {
        setTraitId(value);
        return this;
    }

    @Override
    public ViewTableTraitsRecord value2(String value) {
        setTraitName(value);
        return this;
    }

    @Override
    public ViewTableTraitsRecord value3(String value) {
        setTraitNameShort(value);
        return this;
    }

    @Override
    public ViewTableTraitsRecord value4(String value) {
        setTraitDescription(value);
        return this;
    }

    @Override
    public ViewTableTraitsRecord value5(ViewTableTraitsDataType value) {
        setDataType(value);
        return this;
    }

    @Override
    public ViewTableTraitsRecord value6(TraitRestrictions value) {
        setTraitRestrictions(value);
        return this;
    }

    @Override
    public ViewTableTraitsRecord value7(Integer value) {
        setUnitId(value);
        return this;
    }

    @Override
    public ViewTableTraitsRecord value8(String value) {
        setUnitName(value);
        return this;
    }

    @Override
    public ViewTableTraitsRecord value9(String value) {
        setUnitDescription(value);
        return this;
    }

    @Override
    public ViewTableTraitsRecord value10(String value) {
        setUnitAbbreviation(value);
        return this;
    }

    @Override
    public ViewTableTraitsRecord value11(String[] value) {
        setSynonyms(value);
        return this;
    }

    @Override
    public ViewTableTraitsRecord value12(Integer[] value) {
        setDatasetIds(value);
        return this;
    }

    @Override
    public ViewTableTraitsRecord value13(Long value) {
        setCount(value);
        return this;
    }

    @Override
    public ViewTableTraitsRecord values(Integer value1, String value2, String value3, String value4, ViewTableTraitsDataType value5, TraitRestrictions value6, Integer value7, String value8, String value9, String value10, String[] value11, Integer[] value12, Long value13) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        value10(value10);
        value11(value11);
        value12(value12);
        value13(value13);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ViewTableTraitsRecord
     */
    public ViewTableTraitsRecord() {
        super(ViewTableTraits.VIEW_TABLE_TRAITS);
    }

    /**
     * Create a detached, initialised ViewTableTraitsRecord
     */
    public ViewTableTraitsRecord(Integer traitId, String traitName, String traitNameShort, String traitDescription, ViewTableTraitsDataType dataType, TraitRestrictions traitRestrictions, Integer unitId, String unitName, String unitDescription, String unitAbbreviation, String[] synonyms, Integer[] datasetIds, Long count) {
        super(ViewTableTraits.VIEW_TABLE_TRAITS);

        setTraitId(traitId);
        setTraitName(traitName);
        setTraitNameShort(traitNameShort);
        setTraitDescription(traitDescription);
        setDataType(dataType);
        setTraitRestrictions(traitRestrictions);
        setUnitId(unitId);
        setUnitName(unitName);
        setUnitDescription(unitDescription);
        setUnitAbbreviation(unitAbbreviation);
        setSynonyms(synonyms);
        setDatasetIds(datasetIds);
        setCount(count);
    }

    /**
     * Create a detached, initialised ViewTableTraitsRecord
     */
    public ViewTableTraitsRecord(jhi.germinate.server.database.codegen.tables.pojos.ViewTableTraits value) {
        super(ViewTableTraits.VIEW_TABLE_TRAITS);

        if (value != null) {
            setTraitId(value.getTraitId());
            setTraitName(value.getTraitName());
            setTraitNameShort(value.getTraitNameShort());
            setTraitDescription(value.getTraitDescription());
            setDataType(value.getDataType());
            setTraitRestrictions(value.getTraitRestrictions());
            setUnitId(value.getUnitId());
            setUnitName(value.getUnitName());
            setUnitDescription(value.getUnitDescription());
            setUnitAbbreviation(value.getUnitAbbreviation());
            setSynonyms(value.getSynonyms());
            setDatasetIds(value.getDatasetIds());
            setCount(value.getCount());
        }
    }
    // @formatter:on
}
