/*
 * This file is generated by jOOQ.
 */
package jhi.germinate.server.database.codegen.tables.pojos;


import java.io.Serializable;
import java.math.BigDecimal;
import java.sql.Timestamp;

import jhi.germinate.server.database.codegen.enums.MapoverlaysReferenceTable;


// @formatter:off
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Mapoverlays implements Serializable {

    private static final long serialVersionUID = 1L;

    private Integer                   id;
    private String                    name;
    private String                    description;
    private BigDecimal                bottomLeftLat;
    private BigDecimal                bottomLeftLng;
    private BigDecimal                topRightLat;
    private BigDecimal                topRightLng;
    private Boolean                   isLegend;
    private MapoverlaysReferenceTable referenceTable;
    private Integer                   foreignId;
    private Integer                   datasetId;
    private Timestamp                 recordingDate;
    private Timestamp                 createdOn;
    private Timestamp                 updatedOn;

    public Mapoverlays() {}

    public Mapoverlays(Mapoverlays value) {
        this.id = value.id;
        this.name = value.name;
        this.description = value.description;
        this.bottomLeftLat = value.bottomLeftLat;
        this.bottomLeftLng = value.bottomLeftLng;
        this.topRightLat = value.topRightLat;
        this.topRightLng = value.topRightLng;
        this.isLegend = value.isLegend;
        this.referenceTable = value.referenceTable;
        this.foreignId = value.foreignId;
        this.datasetId = value.datasetId;
        this.recordingDate = value.recordingDate;
        this.createdOn = value.createdOn;
        this.updatedOn = value.updatedOn;
    }

    public Mapoverlays(
        Integer                   id,
        String                    name,
        String                    description,
        BigDecimal                bottomLeftLat,
        BigDecimal                bottomLeftLng,
        BigDecimal                topRightLat,
        BigDecimal                topRightLng,
        Boolean                   isLegend,
        MapoverlaysReferenceTable referenceTable,
        Integer                   foreignId,
        Integer                   datasetId,
        Timestamp                 recordingDate,
        Timestamp                 createdOn,
        Timestamp                 updatedOn
    ) {
        this.id = id;
        this.name = name;
        this.description = description;
        this.bottomLeftLat = bottomLeftLat;
        this.bottomLeftLng = bottomLeftLng;
        this.topRightLat = topRightLat;
        this.topRightLng = topRightLng;
        this.isLegend = isLegend;
        this.referenceTable = referenceTable;
        this.foreignId = foreignId;
        this.datasetId = datasetId;
        this.recordingDate = recordingDate;
        this.createdOn = createdOn;
        this.updatedOn = updatedOn;
    }

    /**
     * Getter for <code>germinate_db.mapoverlays.id</code>. The primary key of
     * this table.
     */
    public Integer getId() {
        return this.id;
    }

    /**
     * Setter for <code>germinate_db.mapoverlays.id</code>. The primary key of
     * this table.
     */
    public void setId(Integer id) {
        this.id = id;
    }

    /**
     * Getter for <code>germinate_db.mapoverlays.name</code>. A name for the map
     * overlay.
     */
    public String getName() {
        return this.name;
    }

    /**
     * Setter for <code>germinate_db.mapoverlays.name</code>. A name for the map
     * overlay.
     */
    public void setName(String name) {
        this.name = name;
    }

    /**
     * Getter for <code>germinate_db.mapoverlays.description</code>. An optional
     * description of what is shown on the overlay.
     */
    public String getDescription() {
        return this.description;
    }

    /**
     * Setter for <code>germinate_db.mapoverlays.description</code>. An optional
     * description of what is shown on the overlay.
     */
    public void setDescription(String description) {
        this.description = description;
    }

    /**
     * Getter for <code>germinate_db.mapoverlays.bottom_left_lat</code>. The
     * bottom left latitude coordinates in decimal degrees for anchoring on the
     * map.
     */
    public BigDecimal getBottomLeftLat() {
        return this.bottomLeftLat;
    }

    /**
     * Setter for <code>germinate_db.mapoverlays.bottom_left_lat</code>. The
     * bottom left latitude coordinates in decimal degrees for anchoring on the
     * map.
     */
    public void setBottomLeftLat(BigDecimal bottomLeftLat) {
        this.bottomLeftLat = bottomLeftLat;
    }

    /**
     * Getter for <code>germinate_db.mapoverlays.bottom_left_lng</code>. The
     * bottom left longitude coordinates in decimal degrees for anchoring on the
     * map.
     */
    public BigDecimal getBottomLeftLng() {
        return this.bottomLeftLng;
    }

    /**
     * Setter for <code>germinate_db.mapoverlays.bottom_left_lng</code>. The
     * bottom left longitude coordinates in decimal degrees for anchoring on the
     * map.
     */
    public void setBottomLeftLng(BigDecimal bottomLeftLng) {
        this.bottomLeftLng = bottomLeftLng;
    }

    /**
     * Getter for <code>germinate_db.mapoverlays.top_right_lat</code>. The top
     * right latitude coordinates in decimal degrees for anchoring on the map.
     */
    public BigDecimal getTopRightLat() {
        return this.topRightLat;
    }

    /**
     * Setter for <code>germinate_db.mapoverlays.top_right_lat</code>. The top
     * right latitude coordinates in decimal degrees for anchoring on the map.
     */
    public void setTopRightLat(BigDecimal topRightLat) {
        this.topRightLat = topRightLat;
    }

    /**
     * Getter for <code>germinate_db.mapoverlays.top_right_lng</code>. The top
     * right longitude coordinates in decimal degrees for anchoring on the map.
     */
    public BigDecimal getTopRightLng() {
        return this.topRightLng;
    }

    /**
     * Setter for <code>germinate_db.mapoverlays.top_right_lng</code>. The top
     * right longitude coordinates in decimal degrees for anchoring on the map.
     */
    public void setTopRightLng(BigDecimal topRightLng) {
        this.topRightLng = topRightLng;
    }

    /**
     * Getter for <code>germinate_db.mapoverlays.is_legend</code>. Flag to
     * indicate whether this is a legend or an actual overlay.
     */
    public Boolean getIsLegend() {
        return this.isLegend;
    }

    /**
     * Setter for <code>germinate_db.mapoverlays.is_legend</code>. Flag to
     * indicate whether this is a legend or an actual overlay.
     */
    public void setIsLegend(Boolean isLegend) {
        this.isLegend = isLegend;
    }

    /**
     * Getter for <code>germinate_db.mapoverlays.reference_table</code>.
     * Optionally, other database items can be linked to this. As an example, an
     * overlay can be linked to a climate variable.
     */
    public MapoverlaysReferenceTable getReferenceTable() {
        return this.referenceTable;
    }

    /**
     * Setter for <code>germinate_db.mapoverlays.reference_table</code>.
     * Optionally, other database items can be linked to this. As an example, an
     * overlay can be linked to a climate variable.
     */
    public void setReferenceTable(MapoverlaysReferenceTable referenceTable) {
        this.referenceTable = referenceTable;
    }

    /**
     * Getter for <code>germinate_db.mapoverlays.foreign_id</code>. The foreign
     * id within the reference_table of the linked database object.
     */
    public Integer getForeignId() {
        return this.foreignId;
    }

    /**
     * Setter for <code>germinate_db.mapoverlays.foreign_id</code>. The foreign
     * id within the reference_table of the linked database object.
     */
    public void setForeignId(Integer foreignId) {
        this.foreignId = foreignId;
    }

    /**
     * Getter for <code>germinate_db.mapoverlays.dataset_id</code>. A dataset id
     * this map overlay is linked to. Useful for providing map overlays for
     * trials data that is not specific to a trait within the dataset.
     */
    public Integer getDatasetId() {
        return this.datasetId;
    }

    /**
     * Setter for <code>germinate_db.mapoverlays.dataset_id</code>. A dataset id
     * this map overlay is linked to. Useful for providing map overlays for
     * trials data that is not specific to a trait within the dataset.
     */
    public void setDatasetId(Integer datasetId) {
        this.datasetId = datasetId;
    }

    /**
     * Getter for <code>germinate_db.mapoverlays.recording_date</code>. A date
     * that is associated with the timepoint when this has been recorded.
     */
    public Timestamp getRecordingDate() {
        return this.recordingDate;
    }

    /**
     * Setter for <code>germinate_db.mapoverlays.recording_date</code>. A date
     * that is associated with the timepoint when this has been recorded.
     */
    public void setRecordingDate(Timestamp recordingDate) {
        this.recordingDate = recordingDate;
    }

    /**
     * Getter for <code>germinate_db.mapoverlays.created_on</code>. The datetime
     * when this database record has been created.
     */
    public Timestamp getCreatedOn() {
        return this.createdOn;
    }

    /**
     * Setter for <code>germinate_db.mapoverlays.created_on</code>. The datetime
     * when this database record has been created.
     */
    public void setCreatedOn(Timestamp createdOn) {
        this.createdOn = createdOn;
    }

    /**
     * Getter for <code>germinate_db.mapoverlays.updated_on</code>. The
     * timestamp when this database record has last been updated.
     */
    public Timestamp getUpdatedOn() {
        return this.updatedOn;
    }

    /**
     * Setter for <code>germinate_db.mapoverlays.updated_on</code>. The
     * timestamp when this database record has last been updated.
     */
    public void setUpdatedOn(Timestamp updatedOn) {
        this.updatedOn = updatedOn;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("Mapoverlays (");

        sb.append(id);
        sb.append(", ").append(name);
        sb.append(", ").append(description);
        sb.append(", ").append(bottomLeftLat);
        sb.append(", ").append(bottomLeftLng);
        sb.append(", ").append(topRightLat);
        sb.append(", ").append(topRightLng);
        sb.append(", ").append(isLegend);
        sb.append(", ").append(referenceTable);
        sb.append(", ").append(foreignId);
        sb.append(", ").append(datasetId);
        sb.append(", ").append(recordingDate);
        sb.append(", ").append(createdOn);
        sb.append(", ").append(updatedOn);

        sb.append(")");
        return sb.toString();
    }
    // @formatter:on
}
