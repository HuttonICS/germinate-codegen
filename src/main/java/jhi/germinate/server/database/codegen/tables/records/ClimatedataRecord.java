/*
 * This file is generated by jOOQ.
 */
package jhi.germinate.server.database.codegen.tables.records;


import java.sql.Timestamp;

import jhi.germinate.server.database.codegen.tables.Climatedata;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record9;
import org.jooq.Row9;
import org.jooq.impl.UpdatableRecordImpl;


// @formatter:off
/**
 * Holds montly average climate data such as rainfall, temperature or cloud
 * cover. This is based on locations rather than accessions like most of the
 * other tables in Germinate.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ClimatedataRecord extends UpdatableRecordImpl<ClimatedataRecord> implements Record9<Integer, Integer, Integer, Double, Integer, Timestamp, String, Timestamp, Timestamp> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>germinate_db.climatedata.id</code>. Primary id for this
     * table. This uniquely identifies the row.
     */
    public void setId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>germinate_db.climatedata.id</code>. Primary id for this
     * table. This uniquely identifies the row.
     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>germinate_db.climatedata.climate_id</code>. Foreign key
     * to climates (climates.id).
     */
    public void setClimateId(Integer value) {
        set(1, value);
    }

    /**
     * Getter for <code>germinate_db.climatedata.climate_id</code>. Foreign key
     * to climates (climates.id).
     */
    public Integer getClimateId() {
        return (Integer) get(1);
    }

    /**
     * Setter for <code>germinate_db.climatedata.location_id</code>. Foreign key
     * to locations (locations.id).
     */
    public void setLocationId(Integer value) {
        set(2, value);
    }

    /**
     * Getter for <code>germinate_db.climatedata.location_id</code>. Foreign key
     * to locations (locations.id).
     */
    public Integer getLocationId() {
        return (Integer) get(2);
    }

    /**
     * Setter for <code>germinate_db.climatedata.climate_value</code>. Value for
     * the specific climate attribute. These are monthly averages and not daily.
     * Monthly data is required for the current Germinate climate
     * viisualizations and interface.
     */
    public void setClimateValue(Double value) {
        set(3, value);
    }

    /**
     * Getter for <code>germinate_db.climatedata.climate_value</code>. Value for
     * the specific climate attribute. These are monthly averages and not daily.
     * Monthly data is required for the current Germinate climate
     * viisualizations and interface.
     */
    public Double getClimateValue() {
        return (Double) get(3);
    }

    /**
     * Setter for <code>germinate_db.climatedata.dataset_id</code>. Foreign key
     * to datasets (datasets.id).
     */
    public void setDatasetId(Integer value) {
        set(4, value);
    }

    /**
     * Getter for <code>germinate_db.climatedata.dataset_id</code>. Foreign key
     * to datasets (datasets.id).
     */
    public Integer getDatasetId() {
        return (Integer) get(4);
    }

    /**
     * Setter for <code>germinate_db.climatedata.recording_date</code>. The date
     * at which this data point was recorded.
     */
    public void setRecordingDate(Timestamp value) {
        set(5, value);
    }

    /**
     * Getter for <code>germinate_db.climatedata.recording_date</code>. The date
     * at which this data point was recorded.
     */
    public Timestamp getRecordingDate() {
        return (Timestamp) get(5);
    }

    /**
     * Setter for <code>germinate_db.climatedata.old_recording_date</code>. The
     * month that the data was recorded. This uses an integer to represent the
     * month (1-12).
     */
    public void setOldRecordingDate(String value) {
        set(6, value);
    }

    /**
     * Getter for <code>germinate_db.climatedata.old_recording_date</code>. The
     * month that the data was recorded. This uses an integer to represent the
     * month (1-12).
     */
    public String getOldRecordingDate() {
        return (String) get(6);
    }

    /**
     * Setter for <code>germinate_db.climatedata.created_on</code>. When the
     * record was created.
     */
    public void setCreatedOn(Timestamp value) {
        set(7, value);
    }

    /**
     * Getter for <code>germinate_db.climatedata.created_on</code>. When the
     * record was created.
     */
    public Timestamp getCreatedOn() {
        return (Timestamp) get(7);
    }

    /**
     * Setter for <code>germinate_db.climatedata.updated_on</code>. When the
     * record was updated. This may be different from the created on date if
     * subsequent changes have been made to the underlying record.
     */
    public void setUpdatedOn(Timestamp value) {
        set(8, value);
    }

    /**
     * Getter for <code>germinate_db.climatedata.updated_on</code>. When the
     * record was updated. This may be different from the created on date if
     * subsequent changes have been made to the underlying record.
     */
    public Timestamp getUpdatedOn() {
        return (Timestamp) get(8);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record9 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row9<Integer, Integer, Integer, Double, Integer, Timestamp, String, Timestamp, Timestamp> fieldsRow() {
        return (Row9) super.fieldsRow();
    }

    @Override
    public Row9<Integer, Integer, Integer, Double, Integer, Timestamp, String, Timestamp, Timestamp> valuesRow() {
        return (Row9) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return Climatedata.CLIMATEDATA.ID;
    }

    @Override
    public Field<Integer> field2() {
        return Climatedata.CLIMATEDATA.CLIMATE_ID;
    }

    @Override
    public Field<Integer> field3() {
        return Climatedata.CLIMATEDATA.LOCATION_ID;
    }

    @Override
    public Field<Double> field4() {
        return Climatedata.CLIMATEDATA.CLIMATE_VALUE;
    }

    @Override
    public Field<Integer> field5() {
        return Climatedata.CLIMATEDATA.DATASET_ID;
    }

    @Override
    public Field<Timestamp> field6() {
        return Climatedata.CLIMATEDATA.RECORDING_DATE;
    }

    @Override
    public Field<String> field7() {
        return Climatedata.CLIMATEDATA.OLD_RECORDING_DATE;
    }

    @Override
    public Field<Timestamp> field8() {
        return Climatedata.CLIMATEDATA.CREATED_ON;
    }

    @Override
    public Field<Timestamp> field9() {
        return Climatedata.CLIMATEDATA.UPDATED_ON;
    }

    @Override
    public Integer component1() {
        return getId();
    }

    @Override
    public Integer component2() {
        return getClimateId();
    }

    @Override
    public Integer component3() {
        return getLocationId();
    }

    @Override
    public Double component4() {
        return getClimateValue();
    }

    @Override
    public Integer component5() {
        return getDatasetId();
    }

    @Override
    public Timestamp component6() {
        return getRecordingDate();
    }

    @Override
    public String component7() {
        return getOldRecordingDate();
    }

    @Override
    public Timestamp component8() {
        return getCreatedOn();
    }

    @Override
    public Timestamp component9() {
        return getUpdatedOn();
    }

    @Override
    public Integer value1() {
        return getId();
    }

    @Override
    public Integer value2() {
        return getClimateId();
    }

    @Override
    public Integer value3() {
        return getLocationId();
    }

    @Override
    public Double value4() {
        return getClimateValue();
    }

    @Override
    public Integer value5() {
        return getDatasetId();
    }

    @Override
    public Timestamp value6() {
        return getRecordingDate();
    }

    @Override
    public String value7() {
        return getOldRecordingDate();
    }

    @Override
    public Timestamp value8() {
        return getCreatedOn();
    }

    @Override
    public Timestamp value9() {
        return getUpdatedOn();
    }

    @Override
    public ClimatedataRecord value1(Integer value) {
        setId(value);
        return this;
    }

    @Override
    public ClimatedataRecord value2(Integer value) {
        setClimateId(value);
        return this;
    }

    @Override
    public ClimatedataRecord value3(Integer value) {
        setLocationId(value);
        return this;
    }

    @Override
    public ClimatedataRecord value4(Double value) {
        setClimateValue(value);
        return this;
    }

    @Override
    public ClimatedataRecord value5(Integer value) {
        setDatasetId(value);
        return this;
    }

    @Override
    public ClimatedataRecord value6(Timestamp value) {
        setRecordingDate(value);
        return this;
    }

    @Override
    public ClimatedataRecord value7(String value) {
        setOldRecordingDate(value);
        return this;
    }

    @Override
    public ClimatedataRecord value8(Timestamp value) {
        setCreatedOn(value);
        return this;
    }

    @Override
    public ClimatedataRecord value9(Timestamp value) {
        setUpdatedOn(value);
        return this;
    }

    @Override
    public ClimatedataRecord values(Integer value1, Integer value2, Integer value3, Double value4, Integer value5, Timestamp value6, String value7, Timestamp value8, Timestamp value9) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ClimatedataRecord
     */
    public ClimatedataRecord() {
        super(Climatedata.CLIMATEDATA);
    }

    /**
     * Create a detached, initialised ClimatedataRecord
     */
    public ClimatedataRecord(Integer id, Integer climateId, Integer locationId, Double climateValue, Integer datasetId, Timestamp recordingDate, String oldRecordingDate, Timestamp createdOn, Timestamp updatedOn) {
        super(Climatedata.CLIMATEDATA);

        setId(id);
        setClimateId(climateId);
        setLocationId(locationId);
        setClimateValue(climateValue);
        setDatasetId(datasetId);
        setRecordingDate(recordingDate);
        setOldRecordingDate(oldRecordingDate);
        setCreatedOn(createdOn);
        setUpdatedOn(updatedOn);
    }

    /**
     * Create a detached, initialised ClimatedataRecord
     */
    public ClimatedataRecord(jhi.germinate.server.database.codegen.tables.pojos.Climatedata value) {
        super(Climatedata.CLIMATEDATA);

        if (value != null) {
            setId(value.getId());
            setClimateId(value.getClimateId());
            setLocationId(value.getLocationId());
            setClimateValue(value.getClimateValue());
            setDatasetId(value.getDatasetId());
            setRecordingDate(value.getRecordingDate());
            setOldRecordingDate(value.getOldRecordingDate());
            setCreatedOn(value.getCreatedOn());
            setUpdatedOn(value.getUpdatedOn());
        }
    }
    // @formatter:on
}
