/*
 * This file is generated by jOOQ.
 */
package jhi.germinate.server.database.codegen.tables;


import java.sql.Date;
import java.sql.Timestamp;

import jhi.germinate.server.database.binding.DublinCoreBinding;
import jhi.germinate.server.database.codegen.GerminateDb;
import jhi.germinate.server.database.codegen.tables.records.DatasetsRecord;
import jhi.germinate.server.database.pojo.DublinCore;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Row19;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


// @formatter:off
/**
 * Datasets which are defined within Germinate although there can be external
 * datasets which are links out to external data sources most will be held
 * within Germinate.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Datasets extends TableImpl<DatasetsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>germinate_db.datasets</code>
     */
    public static final Datasets DATASETS = new Datasets();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DatasetsRecord> getRecordType() {
        return DatasetsRecord.class;
    }

    /**
     * The column <code>germinate_db.datasets.id</code>. Primary id for this
     * table. This uniquely identifies the row.
     */
    public final TableField<DatasetsRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "Primary id for this table. This uniquely identifies the row.");

    /**
     * The column <code>germinate_db.datasets.experiment_id</code>. Foreign key
     * to experiments (experiments.id).
     */
    public final TableField<DatasetsRecord, Integer> EXPERIMENT_ID = createField(DSL.name("experiment_id"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.inline("0", SQLDataType.INTEGER)), this, "Foreign key to experiments (experiments.id).");

    /**
     * The column <code>germinate_db.datasets.datasettype_id</code>. Foreign key
     * to datasettypes (datasettypes.id).
     */
    public final TableField<DatasetsRecord, Integer> DATASETTYPE_ID = createField(DSL.name("datasettype_id"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.inline("-1", SQLDataType.INTEGER)), this, "Foreign key to datasettypes (datasettypes.id).");

    /**
     * The column <code>germinate_db.datasets.name</code>. Describes the
     * dataset.
     */
    public final TableField<DatasetsRecord, String> NAME = createField(DSL.name("name"), SQLDataType.CLOB.nullable(false), this, "Describes the dataset.");

    /**
     * The column <code>germinate_db.datasets.description</code>. The name of
     * this dataset.
     */
    public final TableField<DatasetsRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.CLOB, this, "The name of this dataset.");

    /**
     * The column <code>germinate_db.datasets.date_start</code>. Date that the
     * dataset was generated.
     */
    public final TableField<DatasetsRecord, Date> DATE_START = createField(DSL.name("date_start"), SQLDataType.DATE, this, "Date that the dataset was generated.");

    /**
     * The column <code>germinate_db.datasets.date_end</code>. Date at which the
     * dataset recording ended.
     */
    public final TableField<DatasetsRecord, Date> DATE_END = createField(DSL.name("date_end"), SQLDataType.DATE, this, "Date at which the dataset recording ended.");

    /**
     * The column <code>germinate_db.datasets.source_file</code>.
     */
    public final TableField<DatasetsRecord, String> SOURCE_FILE = createField(DSL.name("source_file"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>germinate_db.datasets.datatype</code>. A description of
     * the data type of the contained data. Examples might be: "raw data",
     * "BLUPs", etc.
     */
    public final TableField<DatasetsRecord, String> DATATYPE = createField(DSL.name("datatype"), SQLDataType.VARCHAR(255), this, "A description of the data type of the contained data. Examples might be: \"raw data\", \"BLUPs\", etc.");

    /**
     * The column <code>germinate_db.datasets.dublin_core</code>.
     */
    public final TableField<DatasetsRecord, DublinCore> DUBLIN_CORE = createField(DSL.name("dublin_core"), SQLDataType.JSON, this, "", new DublinCoreBinding());

    /**
     * The column <code>germinate_db.datasets.version</code>. Dataset version if
     * this exists.
     */
    public final TableField<DatasetsRecord, String> VERSION = createField(DSL.name("version"), SQLDataType.CHAR(10), this, "Dataset version if this exists.");

    /**
     * The column <code>germinate_db.datasets.created_by</code>. Defines who
     * created the dataset. This is a FK in Gatekeeper users table. Foreign key
     * to Gatekeeper users (users.id).
     */
    public final TableField<DatasetsRecord, Integer> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.INTEGER, this, "Defines who created the dataset. This is a FK in Gatekeeper users table. Foreign key to Gatekeeper users (users.id).");

    /**
     * The column <code>germinate_db.datasets.dataset_state_id</code>. Foreign
     * key to datasetstates (datasetstates.id).
     */
    public final TableField<DatasetsRecord, Integer> DATASET_STATE_ID = createField(DSL.name("dataset_state_id"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.inline("1", SQLDataType.INTEGER)), this, "Foreign key to datasetstates (datasetstates.id).");

    /**
     * The column <code>germinate_db.datasets.license_id</code>.
     */
    public final TableField<DatasetsRecord, Integer> LICENSE_ID = createField(DSL.name("license_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>germinate_db.datasets.is_external</code>. Defines if the
     * dataset is contained within Germinate or from an external source and not
     * stored in the database.
     */
    public final TableField<DatasetsRecord, Boolean> IS_EXTERNAL = createField(DSL.name("is_external"), SQLDataType.BOOLEAN.defaultValue(DSL.inline("0", SQLDataType.BOOLEAN)), this, "Defines if the dataset is contained within Germinate or from an external source and not stored in the database.");

    /**
     * The column <code>germinate_db.datasets.hyperlink</code>. Link to access
     * the external dasets.
     */
    public final TableField<DatasetsRecord, String> HYPERLINK = createField(DSL.name("hyperlink"), SQLDataType.VARCHAR(255), this, "Link to access the external dasets.");

    /**
     * The column <code>germinate_db.datasets.created_on</code>. When the record
     * was created.

     */
    public final TableField<DatasetsRecord, Timestamp> CREATED_ON = createField(DSL.name("created_on"), SQLDataType.TIMESTAMP(0).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.TIMESTAMP)), this, "When the record was created.\n");

    /**
     * The column <code>germinate_db.datasets.updated_on</code>. When the record
     * was updated. This may be different from the created on date if subsequent
     * changes have been made to the underlying record.
     */
    public final TableField<DatasetsRecord, Timestamp> UPDATED_ON = createField(DSL.name("updated_on"), SQLDataType.TIMESTAMP(0).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.TIMESTAMP)), this, "When the record was updated. This may be different from the created on date if subsequent changes have been made to the underlying record.");

    /**
     * The column <code>germinate_db.datasets.contact</code>. The contact to get
     * more information about this dataset.
     */
    public final TableField<DatasetsRecord, String> CONTACT = createField(DSL.name("contact"), SQLDataType.VARCHAR(255), this, "The contact to get more information about this dataset.");

    private Datasets(Name alias, Table<DatasetsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Datasets(Name alias, Table<DatasetsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Datasets which are defined within Germinate although there can be external datasets which are links out to external data sources most will be held within Germinate."), TableOptions.table());
    }

    /**
     * Create an aliased <code>germinate_db.datasets</code> table reference
     */
    public Datasets(String alias) {
        this(DSL.name(alias), DATASETS);
    }

    /**
     * Create an aliased <code>germinate_db.datasets</code> table reference
     */
    public Datasets(Name alias) {
        this(alias, DATASETS);
    }

    /**
     * Create a <code>germinate_db.datasets</code> table reference
     */
    public Datasets() {
        this(DSL.name("datasets"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : GerminateDb.GERMINATE_DB;
    }

    @Override
    public Identity<DatasetsRecord, Integer> getIdentity() {
        return (Identity<DatasetsRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<DatasetsRecord> getPrimaryKey() {
        return Internal.createUniqueKey(Datasets.DATASETS, DSL.name("KEY_datasets_PRIMARY"), new TableField[] { Datasets.DATASETS.ID }, true);
    }

    @Override
    public Datasets as(String alias) {
        return new Datasets(DSL.name(alias), this);
    }

    @Override
    public Datasets as(Name alias) {
        return new Datasets(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Datasets rename(String name) {
        return new Datasets(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Datasets rename(Name name) {
        return new Datasets(name, null);
    }

    // -------------------------------------------------------------------------
    // Row19 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row19<Integer, Integer, Integer, String, String, Date, Date, String, String, DublinCore, String, Integer, Integer, Integer, Boolean, String, Timestamp, Timestamp, String> fieldsRow() {
        return (Row19) super.fieldsRow();
    }
    // @formatter:on
}
