/*
 * This file is generated by jOOQ.
 */
package jhi.germinate.server.database.codegen.tables.records;


import java.sql.Timestamp;

import jhi.germinate.server.database.codegen.tables.Maps;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record7;
import org.jooq.Row7;
import org.jooq.impl.UpdatableRecordImpl;


// @formatter:off
/**
 * Describes genetic maps that have been defined within Germinate.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MapsRecord extends UpdatableRecordImpl<MapsRecord> implements Record7<Integer, String, String, Boolean, Timestamp, Timestamp, Integer> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>germinate_db.maps.id</code>. Primary id for this table.
     * This uniquely identifies the row.
     */
    public void setId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>germinate_db.maps.id</code>. Primary id for this table.
     * This uniquely identifies the row.
     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>germinate_db.maps.name</code>. Describes the map.
     */
    public void setName(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>germinate_db.maps.name</code>. Describes the map.
     */
    public String getName() {
        return (String) get(1);
    }

    /**
     * Setter for <code>germinate_db.maps.description</code>. The name of this
     * map.
     */
    public void setDescription(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>germinate_db.maps.description</code>. The name of this
     * map.
     */
    public String getDescription() {
        return (String) get(2);
    }

    /**
     * Setter for <code>germinate_db.maps.visibility</code>. Determines if the
     * map is visible to the Germinate interface or hidden.
     */
    public void setVisibility(Boolean value) {
        set(3, value);
    }

    /**
     * Getter for <code>germinate_db.maps.visibility</code>. Determines if the
     * map is visible to the Germinate interface or hidden.
     */
    public Boolean getVisibility() {
        return (Boolean) get(3);
    }

    /**
     * Setter for <code>germinate_db.maps.created_on</code>. When the record was
     * created.
     */
    public void setCreatedOn(Timestamp value) {
        set(4, value);
    }

    /**
     * Getter for <code>germinate_db.maps.created_on</code>. When the record was
     * created.
     */
    public Timestamp getCreatedOn() {
        return (Timestamp) get(4);
    }

    /**
     * Setter for <code>germinate_db.maps.updated_on</code>. When the record was
     * updated. This may be different from the created on date if subsequent
     * changes have been made to the underlying record.
     */
    public void setUpdatedOn(Timestamp value) {
        set(5, value);
    }

    /**
     * Getter for <code>germinate_db.maps.updated_on</code>. When the record was
     * updated. This may be different from the created on date if subsequent
     * changes have been made to the underlying record.
     */
    public Timestamp getUpdatedOn() {
        return (Timestamp) get(5);
    }

    /**
     * Setter for <code>germinate_db.maps.user_id</code>. Foreign key to
     * Gatekeeper users (Gatekeeper users.id).
     */
    public void setUserId(Integer value) {
        set(6, value);
    }

    /**
     * Getter for <code>germinate_db.maps.user_id</code>. Foreign key to
     * Gatekeeper users (Gatekeeper users.id).
     */
    public Integer getUserId() {
        return (Integer) get(6);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record7 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row7<Integer, String, String, Boolean, Timestamp, Timestamp, Integer> fieldsRow() {
        return (Row7) super.fieldsRow();
    }

    @Override
    public Row7<Integer, String, String, Boolean, Timestamp, Timestamp, Integer> valuesRow() {
        return (Row7) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return Maps.MAPS.ID;
    }

    @Override
    public Field<String> field2() {
        return Maps.MAPS.NAME;
    }

    @Override
    public Field<String> field3() {
        return Maps.MAPS.DESCRIPTION;
    }

    @Override
    public Field<Boolean> field4() {
        return Maps.MAPS.VISIBILITY;
    }

    @Override
    public Field<Timestamp> field5() {
        return Maps.MAPS.CREATED_ON;
    }

    @Override
    public Field<Timestamp> field6() {
        return Maps.MAPS.UPDATED_ON;
    }

    @Override
    public Field<Integer> field7() {
        return Maps.MAPS.USER_ID;
    }

    @Override
    public Integer component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getName();
    }

    @Override
    public String component3() {
        return getDescription();
    }

    @Override
    public Boolean component4() {
        return getVisibility();
    }

    @Override
    public Timestamp component5() {
        return getCreatedOn();
    }

    @Override
    public Timestamp component6() {
        return getUpdatedOn();
    }

    @Override
    public Integer component7() {
        return getUserId();
    }

    @Override
    public Integer value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getName();
    }

    @Override
    public String value3() {
        return getDescription();
    }

    @Override
    public Boolean value4() {
        return getVisibility();
    }

    @Override
    public Timestamp value5() {
        return getCreatedOn();
    }

    @Override
    public Timestamp value6() {
        return getUpdatedOn();
    }

    @Override
    public Integer value7() {
        return getUserId();
    }

    @Override
    public MapsRecord value1(Integer value) {
        setId(value);
        return this;
    }

    @Override
    public MapsRecord value2(String value) {
        setName(value);
        return this;
    }

    @Override
    public MapsRecord value3(String value) {
        setDescription(value);
        return this;
    }

    @Override
    public MapsRecord value4(Boolean value) {
        setVisibility(value);
        return this;
    }

    @Override
    public MapsRecord value5(Timestamp value) {
        setCreatedOn(value);
        return this;
    }

    @Override
    public MapsRecord value6(Timestamp value) {
        setUpdatedOn(value);
        return this;
    }

    @Override
    public MapsRecord value7(Integer value) {
        setUserId(value);
        return this;
    }

    @Override
    public MapsRecord values(Integer value1, String value2, String value3, Boolean value4, Timestamp value5, Timestamp value6, Integer value7) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached MapsRecord
     */
    public MapsRecord() {
        super(Maps.MAPS);
    }

    /**
     * Create a detached, initialised MapsRecord
     */
    public MapsRecord(Integer id, String name, String description, Boolean visibility, Timestamp createdOn, Timestamp updatedOn, Integer userId) {
        super(Maps.MAPS);

        setId(id);
        setName(name);
        setDescription(description);
        setVisibility(visibility);
        setCreatedOn(createdOn);
        setUpdatedOn(updatedOn);
        setUserId(userId);
    }

    /**
     * Create a detached, initialised MapsRecord
     */
    public MapsRecord(jhi.germinate.server.database.codegen.tables.pojos.Maps value) {
        super(Maps.MAPS);

        if (value != null) {
            setId(value.getId());
            setName(value.getName());
            setDescription(value.getDescription());
            setVisibility(value.getVisibility());
            setCreatedOn(value.getCreatedOn());
            setUpdatedOn(value.getUpdatedOn());
            setUserId(value.getUserId());
        }
    }
    // @formatter:on
}
