/*
 * This file is generated by jOOQ.
 */
package jhi.germinate.server.database.codegen.tables;


import java.sql.Timestamp;

import jhi.germinate.server.database.codegen.GerminateDb;
import jhi.germinate.server.database.codegen.tables.records.MapsRecord;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


// @formatter:off
/**
 * Describes genetic maps that have been defined within Germinate.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Maps extends TableImpl<MapsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>germinate_db.maps</code>
     */
    public static final Maps MAPS = new Maps();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MapsRecord> getRecordType() {
        return MapsRecord.class;
    }

    /**
     * The column <code>germinate_db.maps.id</code>. Primary id for this table.
     * This uniquely identifies the row.
     */
    public final TableField<MapsRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "Primary id for this table. This uniquely identifies the row.");

    /**
     * The column <code>germinate_db.maps.name</code>. Describes the map.
     */
    public final TableField<MapsRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255).nullable(false), this, "Describes the map.");

    /**
     * The column <code>germinate_db.maps.description</code>. The name of this
     * map.
     */
    public final TableField<MapsRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.CLOB, this, "The name of this map.");

    /**
     * The column <code>germinate_db.maps.visibility</code>. Determines if the
     * map is visible to the Germinate interface or hidden.
     */
    public final TableField<MapsRecord, Boolean> VISIBILITY = createField(DSL.name("visibility"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.inline("1", SQLDataType.BOOLEAN)), this, "Determines if the map is visible to the Germinate interface or hidden.");

    /**
     * The column <code>germinate_db.maps.created_on</code>. When the record was
     * created.
     */
    public final TableField<MapsRecord, Timestamp> CREATED_ON = createField(DSL.name("created_on"), SQLDataType.TIMESTAMP(0).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.TIMESTAMP)), this, "When the record was created.");

    /**
     * The column <code>germinate_db.maps.updated_on</code>. When the record was
     * updated. This may be different from the created on date if subsequent
     * changes have been made to the underlying record.
     */
    public final TableField<MapsRecord, Timestamp> UPDATED_ON = createField(DSL.name("updated_on"), SQLDataType.TIMESTAMP(0).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.TIMESTAMP)), this, "When the record was updated. This may be different from the created on date if subsequent changes have been made to the underlying record.");

    /**
     * The column <code>germinate_db.maps.user_id</code>. Foreign key to
     * Gatekeeper users (Gatekeeper users.id).
     */
    public final TableField<MapsRecord, Integer> USER_ID = createField(DSL.name("user_id"), SQLDataType.INTEGER, this, "Foreign key to Gatekeeper users (Gatekeeper users.id).");

    private Maps(Name alias, Table<MapsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Maps(Name alias, Table<MapsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Describes genetic maps that have been defined within Germinate."), TableOptions.table());
    }

    /**
     * Create an aliased <code>germinate_db.maps</code> table reference
     */
    public Maps(String alias) {
        this(DSL.name(alias), MAPS);
    }

    /**
     * Create an aliased <code>germinate_db.maps</code> table reference
     */
    public Maps(Name alias) {
        this(alias, MAPS);
    }

    /**
     * Create a <code>germinate_db.maps</code> table reference
     */
    public Maps() {
        this(DSL.name("maps"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : GerminateDb.GERMINATE_DB;
    }

    @Override
    public Identity<MapsRecord, Integer> getIdentity() {
        return (Identity<MapsRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<MapsRecord> getPrimaryKey() {
        return Internal.createUniqueKey(Maps.MAPS, DSL.name("KEY_maps_PRIMARY"), new TableField[] { Maps.MAPS.ID }, true);
    }

    @Override
    public Maps as(String alias) {
        return new Maps(DSL.name(alias), this);
    }

    @Override
    public Maps as(Name alias) {
        return new Maps(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Maps rename(String name) {
        return new Maps(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Maps rename(Name name) {
        return new Maps(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Integer, String, String, Boolean, Timestamp, Timestamp, Integer> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
    // @formatter:on
}
