/*
 * This file is generated by jOOQ.
 */
package jhi.germinate.server.database.codegen.tables.records;


import java.sql.Timestamp;

import jhi.germinate.server.database.codegen.enums.PhenotypesDatatype;
import jhi.germinate.server.database.codegen.tables.Phenotypes;
import jhi.germinate.server.database.pojo.TraitRestrictions;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record12;
import org.jooq.Row12;
import org.jooq.impl.UpdatableRecordImpl;


// @formatter:off
/**
 * Defines phenoytpes which are held in Germinate.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PhenotypesRecord extends UpdatableRecordImpl<PhenotypesRecord> implements Record12<Integer, String, String, String, PhenotypesDatatype, TraitRestrictions, Integer, Integer, Integer, Boolean, Timestamp, Timestamp> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>germinate_db.phenotypes.id</code>. Primary id for this
     * table. This uniquely identifies the row.
     */
    public void setId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>germinate_db.phenotypes.id</code>. Primary id for this
     * table. This uniquely identifies the row.
     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>germinate_db.phenotypes.name</code>. Phenotype full
     * name.
     */
    public void setName(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>germinate_db.phenotypes.name</code>. Phenotype full
     * name.
     */
    public String getName() {
        return (String) get(1);
    }

    /**
     * Setter for <code>germinate_db.phenotypes.short_name</code>. Shortened
     * name for the phenotype. This is used in table columns where space is an
     * issue.
     */
    public void setShortName(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>germinate_db.phenotypes.short_name</code>. Shortened
     * name for the phenotype. This is used in table columns where space is an
     * issue.
     */
    public String getShortName() {
        return (String) get(2);
    }

    /**
     * Setter for <code>germinate_db.phenotypes.description</code>. Full
     * description of the phenotype. This should contain enough infomation to
     * accurately identify the phenoytpe and how it was recorded.
     */
    public void setDescription(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>germinate_db.phenotypes.description</code>. Full
     * description of the phenotype. This should contain enough infomation to
     * accurately identify the phenoytpe and how it was recorded.
     */
    public String getDescription() {
        return (String) get(3);
    }

    /**
     * Setter for <code>germinate_db.phenotypes.datatype</code>. Defines the
     * data type of the phenotype. This can be of numeric, text, date or
     * categorical types.
     */
    public void setDatatype(PhenotypesDatatype value) {
        set(4, value);
    }

    /**
     * Getter for <code>germinate_db.phenotypes.datatype</code>. Defines the
     * data type of the phenotype. This can be of numeric, text, date or
     * categorical types.
     */
    public PhenotypesDatatype getDatatype() {
        return (PhenotypesDatatype) get(4);
    }

    /**
     * Setter for <code>germinate_db.phenotypes.restrictions</code>. A json
     * object describing the restrictions placed on this trait. It is an object
     * containing a field called "categories" which is an array of arrays, each
     * describing a categorical scale. Each scale must have the same length as
     * they describe the same categories just using different terms or numbers.
     * The other fields are "min" and "max" to specify upper and lower limits
     * for numeric traits.
     */
    public void setRestrictions(TraitRestrictions value) {
        set(5, value);
    }

    /**
     * Getter for <code>germinate_db.phenotypes.restrictions</code>. A json
     * object describing the restrictions placed on this trait. It is an object
     * containing a field called "categories" which is an array of arrays, each
     * describing a categorical scale. Each scale must have the same length as
     * they describe the same categories just using different terms or numbers.
     * The other fields are "min" and "max" to specify upper and lower limits
     * for numeric traits.
     */
    public TraitRestrictions getRestrictions() {
        return (TraitRestrictions) get(5);
    }

    /**
     * Setter for <code>germinate_db.phenotypes.unit_id</code>. Foreign Key to
     * units (units.id).
     */
    public void setUnitId(Integer value) {
        set(6, value);
    }

    /**
     * Getter for <code>germinate_db.phenotypes.unit_id</code>. Foreign Key to
     * units (units.id).
     */
    public Integer getUnitId() {
        return (Integer) get(6);
    }

    /**
     * Setter for <code>germinate_db.phenotypes.category_id</code>. Foreign key
     * to phenotypecategories (phenotypecategories.id)
     */
    public void setCategoryId(Integer value) {
        set(7, value);
    }

    /**
     * Getter for <code>germinate_db.phenotypes.category_id</code>. Foreign key
     * to phenotypecategories (phenotypecategories.id)
     */
    public Integer getCategoryId() {
        return (Integer) get(7);
    }

    /**
     * Setter for <code>germinate_db.phenotypes.setsize</code>. The number of
     * individual measurements that should be taken for this trait.
     */
    public void setSetsize(Integer value) {
        set(8, value);
    }

    /**
     * Getter for <code>germinate_db.phenotypes.setsize</code>. The number of
     * individual measurements that should be taken for this trait.
     */
    public Integer getSetsize() {
        return (Integer) get(8);
    }

    /**
     * Setter for <code>germinate_db.phenotypes.is_timeseries</code>. Determines
     * whether this trait is a time-series trait or not.
     */
    public void setIsTimeseries(Boolean value) {
        set(9, value);
    }

    /**
     * Getter for <code>germinate_db.phenotypes.is_timeseries</code>. Determines
     * whether this trait is a time-series trait or not.
     */
    public Boolean getIsTimeseries() {
        return (Boolean) get(9);
    }

    /**
     * Setter for <code>germinate_db.phenotypes.created_on</code>. When the
     * record was created.
     */
    public void setCreatedOn(Timestamp value) {
        set(10, value);
    }

    /**
     * Getter for <code>germinate_db.phenotypes.created_on</code>. When the
     * record was created.
     */
    public Timestamp getCreatedOn() {
        return (Timestamp) get(10);
    }

    /**
     * Setter for <code>germinate_db.phenotypes.updated_on</code>. When the
     * record was updated. This may be different from the created on date if
     * changes have been made subsequently to the underlying record.
     */
    public void setUpdatedOn(Timestamp value) {
        set(11, value);
    }

    /**
     * Getter for <code>germinate_db.phenotypes.updated_on</code>. When the
     * record was updated. This may be different from the created on date if
     * changes have been made subsequently to the underlying record.
     */
    public Timestamp getUpdatedOn() {
        return (Timestamp) get(11);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record12 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row12<Integer, String, String, String, PhenotypesDatatype, TraitRestrictions, Integer, Integer, Integer, Boolean, Timestamp, Timestamp> fieldsRow() {
        return (Row12) super.fieldsRow();
    }

    @Override
    public Row12<Integer, String, String, String, PhenotypesDatatype, TraitRestrictions, Integer, Integer, Integer, Boolean, Timestamp, Timestamp> valuesRow() {
        return (Row12) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return Phenotypes.PHENOTYPES.ID;
    }

    @Override
    public Field<String> field2() {
        return Phenotypes.PHENOTYPES.NAME;
    }

    @Override
    public Field<String> field3() {
        return Phenotypes.PHENOTYPES.SHORT_NAME;
    }

    @Override
    public Field<String> field4() {
        return Phenotypes.PHENOTYPES.DESCRIPTION;
    }

    @Override
    public Field<PhenotypesDatatype> field5() {
        return Phenotypes.PHENOTYPES.DATATYPE;
    }

    @Override
    public Field<TraitRestrictions> field6() {
        return Phenotypes.PHENOTYPES.RESTRICTIONS;
    }

    @Override
    public Field<Integer> field7() {
        return Phenotypes.PHENOTYPES.UNIT_ID;
    }

    @Override
    public Field<Integer> field8() {
        return Phenotypes.PHENOTYPES.CATEGORY_ID;
    }

    @Override
    public Field<Integer> field9() {
        return Phenotypes.PHENOTYPES.SETSIZE;
    }

    @Override
    public Field<Boolean> field10() {
        return Phenotypes.PHENOTYPES.IS_TIMESERIES;
    }

    @Override
    public Field<Timestamp> field11() {
        return Phenotypes.PHENOTYPES.CREATED_ON;
    }

    @Override
    public Field<Timestamp> field12() {
        return Phenotypes.PHENOTYPES.UPDATED_ON;
    }

    @Override
    public Integer component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getName();
    }

    @Override
    public String component3() {
        return getShortName();
    }

    @Override
    public String component4() {
        return getDescription();
    }

    @Override
    public PhenotypesDatatype component5() {
        return getDatatype();
    }

    @Override
    public TraitRestrictions component6() {
        return getRestrictions();
    }

    @Override
    public Integer component7() {
        return getUnitId();
    }

    @Override
    public Integer component8() {
        return getCategoryId();
    }

    @Override
    public Integer component9() {
        return getSetsize();
    }

    @Override
    public Boolean component10() {
        return getIsTimeseries();
    }

    @Override
    public Timestamp component11() {
        return getCreatedOn();
    }

    @Override
    public Timestamp component12() {
        return getUpdatedOn();
    }

    @Override
    public Integer value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getName();
    }

    @Override
    public String value3() {
        return getShortName();
    }

    @Override
    public String value4() {
        return getDescription();
    }

    @Override
    public PhenotypesDatatype value5() {
        return getDatatype();
    }

    @Override
    public TraitRestrictions value6() {
        return getRestrictions();
    }

    @Override
    public Integer value7() {
        return getUnitId();
    }

    @Override
    public Integer value8() {
        return getCategoryId();
    }

    @Override
    public Integer value9() {
        return getSetsize();
    }

    @Override
    public Boolean value10() {
        return getIsTimeseries();
    }

    @Override
    public Timestamp value11() {
        return getCreatedOn();
    }

    @Override
    public Timestamp value12() {
        return getUpdatedOn();
    }

    @Override
    public PhenotypesRecord value1(Integer value) {
        setId(value);
        return this;
    }

    @Override
    public PhenotypesRecord value2(String value) {
        setName(value);
        return this;
    }

    @Override
    public PhenotypesRecord value3(String value) {
        setShortName(value);
        return this;
    }

    @Override
    public PhenotypesRecord value4(String value) {
        setDescription(value);
        return this;
    }

    @Override
    public PhenotypesRecord value5(PhenotypesDatatype value) {
        setDatatype(value);
        return this;
    }

    @Override
    public PhenotypesRecord value6(TraitRestrictions value) {
        setRestrictions(value);
        return this;
    }

    @Override
    public PhenotypesRecord value7(Integer value) {
        setUnitId(value);
        return this;
    }

    @Override
    public PhenotypesRecord value8(Integer value) {
        setCategoryId(value);
        return this;
    }

    @Override
    public PhenotypesRecord value9(Integer value) {
        setSetsize(value);
        return this;
    }

    @Override
    public PhenotypesRecord value10(Boolean value) {
        setIsTimeseries(value);
        return this;
    }

    @Override
    public PhenotypesRecord value11(Timestamp value) {
        setCreatedOn(value);
        return this;
    }

    @Override
    public PhenotypesRecord value12(Timestamp value) {
        setUpdatedOn(value);
        return this;
    }

    @Override
    public PhenotypesRecord values(Integer value1, String value2, String value3, String value4, PhenotypesDatatype value5, TraitRestrictions value6, Integer value7, Integer value8, Integer value9, Boolean value10, Timestamp value11, Timestamp value12) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        value10(value10);
        value11(value11);
        value12(value12);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached PhenotypesRecord
     */
    public PhenotypesRecord() {
        super(Phenotypes.PHENOTYPES);
    }

    /**
     * Create a detached, initialised PhenotypesRecord
     */
    public PhenotypesRecord(Integer id, String name, String shortName, String description, PhenotypesDatatype datatype, TraitRestrictions restrictions, Integer unitId, Integer categoryId, Integer setsize, Boolean isTimeseries, Timestamp createdOn, Timestamp updatedOn) {
        super(Phenotypes.PHENOTYPES);

        setId(id);
        setName(name);
        setShortName(shortName);
        setDescription(description);
        setDatatype(datatype);
        setRestrictions(restrictions);
        setUnitId(unitId);
        setCategoryId(categoryId);
        setSetsize(setsize);
        setIsTimeseries(isTimeseries);
        setCreatedOn(createdOn);
        setUpdatedOn(updatedOn);
    }

    /**
     * Create a detached, initialised PhenotypesRecord
     */
    public PhenotypesRecord(jhi.germinate.server.database.codegen.tables.pojos.Phenotypes value) {
        super(Phenotypes.PHENOTYPES);

        if (value != null) {
            setId(value.getId());
            setName(value.getName());
            setShortName(value.getShortName());
            setDescription(value.getDescription());
            setDatatype(value.getDatatype());
            setRestrictions(value.getRestrictions());
            setUnitId(value.getUnitId());
            setCategoryId(value.getCategoryId());
            setSetsize(value.getSetsize());
            setIsTimeseries(value.getIsTimeseries());
            setCreatedOn(value.getCreatedOn());
            setUpdatedOn(value.getUpdatedOn());
        }
    }
    // @formatter:on
}
