/*
 * This file is generated by jOOQ.
 */
package jhi.germinate.server.database.codegen.tables.pojos;


import java.io.Serializable;
import java.sql.Timestamp;


// @formatter:off
/**
 * Based on Multi Crop Passport Descriptors (MCPD V2 2012) - The coding scheme
 * proposed can be used at 3 different levels of detail: either by using the
 * general codes (in boldface) such as 100, 200, 300, 400, or by using the more
 * specific codes
 * such as 110, 120, etc.
 * 100) Wild
 * 110) Natural
 * 120) Semi-natural/wild
 * 130) Semi-natural/sown
 * 200) Weedy
 * 300) Traditional cultivar/landrace
 * 400) Breeding/research material
 *  410) Breeder's line
 *  411) Synthetic population
 *  412) Hybrid
 *  413) Founder stock/base population
 *  414) Inbred line (parent of hybrid cultivar)
 *  415) Segregating population
 *  416) Clonal selection
 *  420) Genetic stock
 *  421) Mutant (e.g. induced/insertion mutants, tilling populations)
 *  422) Cytogenetic stocks (e.g. chromosome addition/substitution, aneuploids,
 * amphiploids)
 *  423) Other genetic stocks (e.g. mapping populations)
 * 500) Advanced or improved cultivar (conventional breeding methods)
 * 600) GMO (by genetic engineering)
 *  999) Other 
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Biologicalstatus implements Serializable {

    private static final long serialVersionUID = 1L;

    private Integer   id;
    private String    sampstat;
    private Timestamp createdOn;
    private Timestamp updatedOn;

    public Biologicalstatus() {}

    public Biologicalstatus(Biologicalstatus value) {
        this.id = value.id;
        this.sampstat = value.sampstat;
        this.createdOn = value.createdOn;
        this.updatedOn = value.updatedOn;
    }

    public Biologicalstatus(
        Integer   id,
        String    sampstat,
        Timestamp createdOn,
        Timestamp updatedOn
    ) {
        this.id = id;
        this.sampstat = sampstat;
        this.createdOn = createdOn;
        this.updatedOn = updatedOn;
    }

    /**
     * Getter for <code>germinate_db.biologicalstatus.id</code>. Primary id for
     * this table. This uniquely identifies the row.
     */
    public Integer getId() {
        return this.id;
    }

    /**
     * Setter for <code>germinate_db.biologicalstatus.id</code>. Primary id for
     * this table. This uniquely identifies the row.
     */
    public void setId(Integer id) {
        this.id = id;
    }

    /**
     * Getter for <code>germinate_db.biologicalstatus.sampstat</code>.
     * Previoulsy known as sampstat.
     */
    public String getSampstat() {
        return this.sampstat;
    }

    /**
     * Setter for <code>germinate_db.biologicalstatus.sampstat</code>.
     * Previoulsy known as sampstat.
     */
    public void setSampstat(String sampstat) {
        this.sampstat = sampstat;
    }

    /**
     * Getter for <code>germinate_db.biologicalstatus.created_on</code>. When
     * the record was created.
     */
    public Timestamp getCreatedOn() {
        return this.createdOn;
    }

    /**
     * Setter for <code>germinate_db.biologicalstatus.created_on</code>. When
     * the record was created.
     */
    public void setCreatedOn(Timestamp createdOn) {
        this.createdOn = createdOn;
    }

    /**
     * Getter for <code>germinate_db.biologicalstatus.updated_on</code>. When
     * the record was updated. This may be different from the created on date if
     * subsequent changes have been made to the underlying record.
     */
    public Timestamp getUpdatedOn() {
        return this.updatedOn;
    }

    /**
     * Setter for <code>germinate_db.biologicalstatus.updated_on</code>. When
     * the record was updated. This may be different from the created on date if
     * subsequent changes have been made to the underlying record.
     */
    public void setUpdatedOn(Timestamp updatedOn) {
        this.updatedOn = updatedOn;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("Biologicalstatus (");

        sb.append(id);
        sb.append(", ").append(sampstat);
        sb.append(", ").append(createdOn);
        sb.append(", ").append(updatedOn);

        sb.append(")");
        return sb.toString();
    }
    // @formatter:on
}
