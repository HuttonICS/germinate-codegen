/*
 * This file is generated by jOOQ.
 */
package jhi.germinate.server.database.codegen.tables;


import java.sql.Timestamp;

import jhi.germinate.server.database.binding.ImportJobDetailsBinding;
import jhi.germinate.server.database.binding.ImportResultBinding;
import jhi.germinate.server.database.codegen.GerminateDb;
import jhi.germinate.server.database.codegen.enums.DataImportJobsDatatype;
import jhi.germinate.server.database.codegen.enums.DataImportJobsStatus;
import jhi.germinate.server.database.codegen.tables.records.DataImportJobsRecord;
import jhi.germinate.server.database.pojo.ImportJobDetails;
import jhi.germinate.server.database.pojo.ImportResult;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Row15;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


// @formatter:off
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DataImportJobs extends TableImpl<DataImportJobsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>germinate_db.data_import_jobs</code>
     */
    public static final DataImportJobs DATA_IMPORT_JOBS = new DataImportJobs();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DataImportJobsRecord> getRecordType() {
        return DataImportJobsRecord.class;
    }

    /**
     * The column <code>germinate_db.data_import_jobs.id</code>.
     */
    public final TableField<DataImportJobsRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>germinate_db.data_import_jobs.uuid</code>.
     */
    public final TableField<DataImportJobsRecord, String> UUID = createField(DSL.name("uuid"), SQLDataType.VARCHAR(36).nullable(false), this, "");

    /**
     * The column <code>germinate_db.data_import_jobs.job_id</code>.
     */
    public final TableField<DataImportJobsRecord, String> JOB_ID = createField(DSL.name("job_id"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>germinate_db.data_import_jobs.job_config</code>.
     */
    public final TableField<DataImportJobsRecord, ImportJobDetails> JOB_CONFIG = createField(DSL.name("job_config"), SQLDataType.JSON, this, "", new ImportJobDetailsBinding());

    /**
     * The column <code>germinate_db.data_import_jobs.user_id</code>.
     */
    public final TableField<DataImportJobsRecord, Integer> USER_ID = createField(DSL.name("user_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>germinate_db.data_import_jobs.original_filename</code>.
     */
    public final TableField<DataImportJobsRecord, String> ORIGINAL_FILENAME = createField(DSL.name("original_filename"), SQLDataType.VARCHAR(266).nullable(false), this, "");

    /**
     * The column <code>germinate_db.data_import_jobs.is_update</code>.
     */
    public final TableField<DataImportJobsRecord, Boolean> IS_UPDATE = createField(DSL.name("is_update"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.inline("0", SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>germinate_db.data_import_jobs.datasetstate_id</code>.
     */
    public final TableField<DataImportJobsRecord, Integer> DATASETSTATE_ID = createField(DSL.name("datasetstate_id"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.inline("1", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>germinate_db.data_import_jobs.datatype</code>.
     */
    public final TableField<DataImportJobsRecord, DataImportJobsDatatype> DATATYPE = createField(DSL.name("datatype"), SQLDataType.VARCHAR(9).nullable(false).defaultValue(DSL.inline("mcpd", SQLDataType.VARCHAR)).asEnumDataType(jhi.germinate.server.database.codegen.enums.DataImportJobsDatatype.class), this, "");

    /**
     * The column <code>germinate_db.data_import_jobs.status</code>.
     */
    public final TableField<DataImportJobsRecord, DataImportJobsStatus> STATUS = createField(DSL.name("status"), SQLDataType.VARCHAR(9).nullable(false).defaultValue(DSL.inline("waiting", SQLDataType.VARCHAR)).asEnumDataType(jhi.germinate.server.database.codegen.enums.DataImportJobsStatus.class), this, "");

    /**
     * The column <code>germinate_db.data_import_jobs.imported</code>.
     */
    public final TableField<DataImportJobsRecord, Boolean> IMPORTED = createField(DSL.name("imported"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.inline("0", SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>germinate_db.data_import_jobs.visibility</code>.
     */
    public final TableField<DataImportJobsRecord, Boolean> VISIBILITY = createField(DSL.name("visibility"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.inline("1", SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>germinate_db.data_import_jobs.feedback</code>.
     */
    public final TableField<DataImportJobsRecord, ImportResult[]> FEEDBACK = createField(DSL.name("feedback"), SQLDataType.JSON, this, "", new ImportResultBinding());

    /**
     * The column <code>germinate_db.data_import_jobs.created_on</code>.
     */
    public final TableField<DataImportJobsRecord, Timestamp> CREATED_ON = createField(DSL.name("created_on"), SQLDataType.TIMESTAMP(0).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>germinate_db.data_import_jobs.updated_on</code>.
     */
    public final TableField<DataImportJobsRecord, Timestamp> UPDATED_ON = createField(DSL.name("updated_on"), SQLDataType.TIMESTAMP(0).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.TIMESTAMP)), this, "");

    private DataImportJobs(Name alias, Table<DataImportJobsRecord> aliased) {
        this(alias, aliased, null);
    }

    private DataImportJobs(Name alias, Table<DataImportJobsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>germinate_db.data_import_jobs</code> table
     * reference
     */
    public DataImportJobs(String alias) {
        this(DSL.name(alias), DATA_IMPORT_JOBS);
    }

    /**
     * Create an aliased <code>germinate_db.data_import_jobs</code> table
     * reference
     */
    public DataImportJobs(Name alias) {
        this(alias, DATA_IMPORT_JOBS);
    }

    /**
     * Create a <code>germinate_db.data_import_jobs</code> table reference
     */
    public DataImportJobs() {
        this(DSL.name("data_import_jobs"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : GerminateDb.GERMINATE_DB;
    }

    @Override
    public Identity<DataImportJobsRecord, Integer> getIdentity() {
        return (Identity<DataImportJobsRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<DataImportJobsRecord> getPrimaryKey() {
        return Internal.createUniqueKey(DataImportJobs.DATA_IMPORT_JOBS, DSL.name("KEY_data_import_jobs_PRIMARY"), new TableField[] { DataImportJobs.DATA_IMPORT_JOBS.ID }, true);
    }

    @Override
    public DataImportJobs as(String alias) {
        return new DataImportJobs(DSL.name(alias), this);
    }

    @Override
    public DataImportJobs as(Name alias) {
        return new DataImportJobs(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public DataImportJobs rename(String name) {
        return new DataImportJobs(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DataImportJobs rename(Name name) {
        return new DataImportJobs(name, null);
    }

    // -------------------------------------------------------------------------
    // Row15 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row15<Integer, String, String, ImportJobDetails, Integer, String, Boolean, Integer, DataImportJobsDatatype, DataImportJobsStatus, Boolean, Boolean, ImportResult[], Timestamp, Timestamp> fieldsRow() {
        return (Row15) super.fieldsRow();
    }
    // @formatter:on
}
