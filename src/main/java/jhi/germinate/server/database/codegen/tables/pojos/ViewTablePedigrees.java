/*
 * This file is generated by jOOQ.
 */
package jhi.germinate.server.database.codegen.tables.pojos;


import java.io.Serializable;

import jhi.germinate.server.database.codegen.enums.ViewTablePedigreesRelationshipType;


import lombok.*;
import lombok.experimental.Accessors;

// @formatter:off
/**
 * VIEW
 */
@Getter
@Setter
@Accessors(chain = true)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ViewTablePedigrees implements Serializable {

    private static final long serialVersionUID = 1L;

    private Integer                            parentId;
    private String                             parentGid;
    private String                             parentName;
    private String                             parentNumber;
    private Integer                            childId;
    private String                             childGid;
    private String                             childName;
    private String                             childNumber;
    private Integer                            datasetId;
    private String                             datasetName;
    private Integer                            experimentId;
    private String                             experimentName;
    private ViewTablePedigreesRelationshipType relationshipType;
    private String                             relationshipDescription;
    private String                             pedigreeDescription;
    private String                             pedigreeAuthor;

    public ViewTablePedigrees() {}

    public ViewTablePedigrees(ViewTablePedigrees value) {
        this.parentId = value.parentId;
        this.parentGid = value.parentGid;
        this.parentName = value.parentName;
        this.parentNumber = value.parentNumber;
        this.childId = value.childId;
        this.childGid = value.childGid;
        this.childName = value.childName;
        this.childNumber = value.childNumber;
        this.datasetId = value.datasetId;
        this.datasetName = value.datasetName;
        this.experimentId = value.experimentId;
        this.experimentName = value.experimentName;
        this.relationshipType = value.relationshipType;
        this.relationshipDescription = value.relationshipDescription;
        this.pedigreeDescription = value.pedigreeDescription;
        this.pedigreeAuthor = value.pedigreeAuthor;
    }

    public ViewTablePedigrees(
        Integer                            parentId,
        String                             parentGid,
        String                             parentName,
        String                             parentNumber,
        Integer                            childId,
        String                             childGid,
        String                             childName,
        String                             childNumber,
        Integer                            datasetId,
        String                             datasetName,
        Integer                            experimentId,
        String                             experimentName,
        ViewTablePedigreesRelationshipType relationshipType,
        String                             relationshipDescription,
        String                             pedigreeDescription,
        String                             pedigreeAuthor
    ) {
        this.parentId = parentId;
        this.parentGid = parentGid;
        this.parentName = parentName;
        this.parentNumber = parentNumber;
        this.childId = childId;
        this.childGid = childGid;
        this.childName = childName;
        this.childNumber = childNumber;
        this.datasetId = datasetId;
        this.datasetName = datasetName;
        this.experimentId = experimentId;
        this.experimentName = experimentName;
        this.relationshipType = relationshipType;
        this.relationshipDescription = relationshipDescription;
        this.pedigreeDescription = pedigreeDescription;
        this.pedigreeAuthor = pedigreeAuthor;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("ViewTablePedigrees (");

        sb.append(parentId);
        sb.append(", ").append(parentGid);
        sb.append(", ").append(parentName);
        sb.append(", ").append(parentNumber);
        sb.append(", ").append(childId);
        sb.append(", ").append(childGid);
        sb.append(", ").append(childName);
        sb.append(", ").append(childNumber);
        sb.append(", ").append(datasetId);
        sb.append(", ").append(datasetName);
        sb.append(", ").append(experimentId);
        sb.append(", ").append(experimentName);
        sb.append(", ").append(relationshipType);
        sb.append(", ").append(relationshipDescription);
        sb.append(", ").append(pedigreeDescription);
        sb.append(", ").append(pedigreeAuthor);

        sb.append(")");
        return sb.toString();
    }
    // @formatter:on
}
