/*
 * This file is generated by jOOQ.
 */
package jhi.germinate.server.database.codegen.tables;


import java.sql.Timestamp;

import jhi.germinate.server.database.codegen.GerminateDb;
import jhi.germinate.server.database.codegen.tables.records.DatasetmetaRecord;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;


// @formatter:off
/**
 * Defines dataset sizes for the items in the datasets table. This table is
 * automatically updated every hour.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Datasetmeta extends TableImpl<DatasetmetaRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>germinate_db.datasetmeta</code>
     */
    public static final Datasetmeta DATASETMETA = new Datasetmeta();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DatasetmetaRecord> getRecordType() {
        return DatasetmetaRecord.class;
    }

    /**
     * The column <code>germinate_db.datasetmeta.id</code>. Primary id for this
     * table. This uniquely identifies the row.
     */
    public final TableField<DatasetmetaRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "Primary id for this table. This uniquely identifies the row.");

    /**
     * The column <code>germinate_db.datasetmeta.dataset_id</code>. Foreign key
     * to [datasets] ([datasets].id).
     */
    public final TableField<DatasetmetaRecord, Integer> DATASET_ID = createField(DSL.name("dataset_id"), SQLDataType.INTEGER.nullable(false), this, "Foreign key to [datasets] ([datasets].id).");

    /**
     * The column <code>germinate_db.datasetmeta.nr_of_data_objects</code>. The
     * number of data objects contained in this dataset.
     */
    public final TableField<DatasetmetaRecord, ULong> NR_OF_DATA_OBJECTS = createField(DSL.name("nr_of_data_objects"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "The number of data objects contained in this dataset.");

    /**
     * The column <code>germinate_db.datasetmeta.nr_of_data_points</code>. The
     * number of individual data points contained in this dataset.
     */
    public final TableField<DatasetmetaRecord, ULong> NR_OF_DATA_POINTS = createField(DSL.name("nr_of_data_points"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "The number of individual data points contained in this dataset.");

    /**
     * The column <code>germinate_db.datasetmeta.created_on</code>. When the
     * record was created.
     */
    public final TableField<DatasetmetaRecord, Timestamp> CREATED_ON = createField(DSL.name("created_on"), SQLDataType.TIMESTAMP(0).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.TIMESTAMP)), this, "When the record was created.");

    /**
     * The column <code>germinate_db.datasetmeta.updated_on</code>. When the
     * record was updated. This may be different from the created on date if
     * subsequent changes have been made to the underlying record.
     */
    public final TableField<DatasetmetaRecord, Timestamp> UPDATED_ON = createField(DSL.name("updated_on"), SQLDataType.TIMESTAMP(0).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.TIMESTAMP)), this, "When the record was updated. This may be different from the created on date if subsequent changes have been made to the underlying record.");

    private Datasetmeta(Name alias, Table<DatasetmetaRecord> aliased) {
        this(alias, aliased, null);
    }

    private Datasetmeta(Name alias, Table<DatasetmetaRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Defines dataset sizes for the items in the datasets table. This table is automatically updated every hour."), TableOptions.table());
    }

    /**
     * Create an aliased <code>germinate_db.datasetmeta</code> table reference
     */
    public Datasetmeta(String alias) {
        this(DSL.name(alias), DATASETMETA);
    }

    /**
     * Create an aliased <code>germinate_db.datasetmeta</code> table reference
     */
    public Datasetmeta(Name alias) {
        this(alias, DATASETMETA);
    }

    /**
     * Create a <code>germinate_db.datasetmeta</code> table reference
     */
    public Datasetmeta() {
        this(DSL.name("datasetmeta"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : GerminateDb.GERMINATE_DB;
    }

    @Override
    public Identity<DatasetmetaRecord, Integer> getIdentity() {
        return (Identity<DatasetmetaRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<DatasetmetaRecord> getPrimaryKey() {
        return Internal.createUniqueKey(Datasetmeta.DATASETMETA, DSL.name("KEY_datasetmeta_PRIMARY"), new TableField[] { Datasetmeta.DATASETMETA.ID }, true);
    }

    @Override
    public Datasetmeta as(String alias) {
        return new Datasetmeta(DSL.name(alias), this);
    }

    @Override
    public Datasetmeta as(Name alias) {
        return new Datasetmeta(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Datasetmeta rename(String name) {
        return new Datasetmeta(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Datasetmeta rename(Name name) {
        return new Datasetmeta(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Integer, Integer, ULong, ULong, Timestamp, Timestamp> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
    // @formatter:on
}
