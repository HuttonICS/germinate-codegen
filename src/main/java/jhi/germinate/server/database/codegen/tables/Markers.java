/*
 * This file is generated by jOOQ.
 */
package jhi.germinate.server.database.codegen.tables;


import java.sql.Timestamp;

import jhi.germinate.server.database.codegen.GerminateDb;
import jhi.germinate.server.database.codegen.tables.records.MarkersRecord;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


// @formatter:off
/**
 * Defines genetic markers within the database and assigns a type (markertypes).
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Markers extends TableImpl<MarkersRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>germinate_db.markers</code>
     */
    public static final Markers MARKERS = new Markers();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MarkersRecord> getRecordType() {
        return MarkersRecord.class;
    }

    /**
     * The column <code>germinate_db.markers.id</code>. Primary id for this
     * table. This uniquely identifies the row.
     */
    public final TableField<MarkersRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "Primary id for this table. This uniquely identifies the row.");

    /**
     * The column <code>germinate_db.markers.markertype_id</code>. Foreign key
     * to locations (locations.id).
     */
    public final TableField<MarkersRecord, Integer> MARKERTYPE_ID = createField(DSL.name("markertype_id"), SQLDataType.INTEGER.nullable(false), this, "Foreign key to locations (locations.id).");

    /**
     * The column <code>germinate_db.markers.marker_name</code>. The name of the
     * marker. This should be a unique name which identifies the marker.
     */
    public final TableField<MarkersRecord, String> MARKER_NAME = createField(DSL.name("marker_name"), SQLDataType.VARCHAR(45).nullable(false), this, "The name of the marker. This should be a unique name which identifies the marker.");

    /**
     * The column <code>germinate_db.markers.created_on</code>. When the record
     * was created.

     */
    public final TableField<MarkersRecord, Timestamp> CREATED_ON = createField(DSL.name("created_on"), SQLDataType.TIMESTAMP(0).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.TIMESTAMP)), this, "When the record was created.\n");

    /**
     * The column <code>germinate_db.markers.updated_on</code>. When the record
     * was updated. This may be different from the created on date if subsequent
     * changes have been made to the underlying record.
     */
    public final TableField<MarkersRecord, Timestamp> UPDATED_ON = createField(DSL.name("updated_on"), SQLDataType.TIMESTAMP(0).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.TIMESTAMP)), this, "When the record was updated. This may be different from the created on date if subsequent changes have been made to the underlying record.");

    private Markers(Name alias, Table<MarkersRecord> aliased) {
        this(alias, aliased, null);
    }

    private Markers(Name alias, Table<MarkersRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Defines genetic markers within the database and assigns a type (markertypes)."), TableOptions.table());
    }

    /**
     * Create an aliased <code>germinate_db.markers</code> table reference
     */
    public Markers(String alias) {
        this(DSL.name(alias), MARKERS);
    }

    /**
     * Create an aliased <code>germinate_db.markers</code> table reference
     */
    public Markers(Name alias) {
        this(alias, MARKERS);
    }

    /**
     * Create a <code>germinate_db.markers</code> table reference
     */
    public Markers() {
        this(DSL.name("markers"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : GerminateDb.GERMINATE_DB;
    }

    @Override
    public Identity<MarkersRecord, Integer> getIdentity() {
        return (Identity<MarkersRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<MarkersRecord> getPrimaryKey() {
        return Internal.createUniqueKey(Markers.MARKERS, DSL.name("KEY_markers_PRIMARY"), new TableField[] { Markers.MARKERS.ID }, true);
    }

    @Override
    public Markers as(String alias) {
        return new Markers(DSL.name(alias), this);
    }

    @Override
    public Markers as(Name alias) {
        return new Markers(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Markers rename(String name) {
        return new Markers(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Markers rename(Name name) {
        return new Markers(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Integer, Integer, String, Timestamp, Timestamp> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
    // @formatter:on
}
