/*
 * This file is generated by jOOQ.
 */
package jhi.germinate.server.database.codegen.tables.pojos;


import java.io.Serializable;
import java.sql.Timestamp;


// @formatter:off
/**
 * Relates genetic markers to a map and assigns a position (if known). Maps are
 * made up of lists of markers and positions (genetic or physiscal and
 * chromosome/linkage group assignation). In the case of QTL the
 * definition_start and definition_end columns can be used to specify a range
 * across a linkage group.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Mapdefinitions implements Serializable {

    private static final long serialVersionUID = 1L;

    private Integer   id;
    private Integer   mapfeaturetypeId;
    private Integer   markerId;
    private Integer   mapId;
    private Double    definitionStart;
    private Double    definitionEnd;
    private String    chromosome;
    private String    armImpute;
    private Timestamp createdOn;
    private Timestamp updatedOn;

    public Mapdefinitions() {}

    public Mapdefinitions(Mapdefinitions value) {
        this.id = value.id;
        this.mapfeaturetypeId = value.mapfeaturetypeId;
        this.markerId = value.markerId;
        this.mapId = value.mapId;
        this.definitionStart = value.definitionStart;
        this.definitionEnd = value.definitionEnd;
        this.chromosome = value.chromosome;
        this.armImpute = value.armImpute;
        this.createdOn = value.createdOn;
        this.updatedOn = value.updatedOn;
    }

    public Mapdefinitions(
        Integer   id,
        Integer   mapfeaturetypeId,
        Integer   markerId,
        Integer   mapId,
        Double    definitionStart,
        Double    definitionEnd,
        String    chromosome,
        String    armImpute,
        Timestamp createdOn,
        Timestamp updatedOn
    ) {
        this.id = id;
        this.mapfeaturetypeId = mapfeaturetypeId;
        this.markerId = markerId;
        this.mapId = mapId;
        this.definitionStart = definitionStart;
        this.definitionEnd = definitionEnd;
        this.chromosome = chromosome;
        this.armImpute = armImpute;
        this.createdOn = createdOn;
        this.updatedOn = updatedOn;
    }

    /**
     * Getter for <code>germinate_db.mapdefinitions.id</code>. Primary id for
     * this table. This uniquely identifies the row.
     */
    public Integer getId() {
        return this.id;
    }

    /**
     * Setter for <code>germinate_db.mapdefinitions.id</code>. Primary id for
     * this table. This uniquely identifies the row.
     */
    public void setId(Integer id) {
        this.id = id;
    }

    /**
     * Getter for <code>germinate_db.mapdefinitions.mapfeaturetype_id</code>.
     * Foreign key to mapfeaturetypes (mapfeaturetypes.id).
     */
    public Integer getMapfeaturetypeId() {
        return this.mapfeaturetypeId;
    }

    /**
     * Setter for <code>germinate_db.mapdefinitions.mapfeaturetype_id</code>.
     * Foreign key to mapfeaturetypes (mapfeaturetypes.id).
     */
    public void setMapfeaturetypeId(Integer mapfeaturetypeId) {
        this.mapfeaturetypeId = mapfeaturetypeId;
    }

    /**
     * Getter for <code>germinate_db.mapdefinitions.marker_id</code>. Foreign
     * key to markers (markers.id).
     */
    public Integer getMarkerId() {
        return this.markerId;
    }

    /**
     * Setter for <code>germinate_db.mapdefinitions.marker_id</code>. Foreign
     * key to markers (markers.id).
     */
    public void setMarkerId(Integer markerId) {
        this.markerId = markerId;
    }

    /**
     * Getter for <code>germinate_db.mapdefinitions.map_id</code>. Foreign key
     * to maps (maps.id).
     */
    public Integer getMapId() {
        return this.mapId;
    }

    /**
     * Setter for <code>germinate_db.mapdefinitions.map_id</code>. Foreign key
     * to maps (maps.id).
     */
    public void setMapId(Integer mapId) {
        this.mapId = mapId;
    }

    /**
     * Getter for <code>germinate_db.mapdefinitions.definition_start</code>.
     * Used if the markers location spans over an area more than a single point
     * on the maps. Determines the marker start location.
     */
    public Double getDefinitionStart() {
        return this.definitionStart;
    }

    /**
     * Setter for <code>germinate_db.mapdefinitions.definition_start</code>.
     * Used if the markers location spans over an area more than a single point
     * on the maps. Determines the marker start location.
     */
    public void setDefinitionStart(Double definitionStart) {
        this.definitionStart = definitionStart;
    }

    /**
     * Getter for <code>germinate_db.mapdefinitions.definition_end</code>. Used
     * if the markers location spans over an area more than a single point on
     * the maps. Determines the marker end location.
     */
    public Double getDefinitionEnd() {
        return this.definitionEnd;
    }

    /**
     * Setter for <code>germinate_db.mapdefinitions.definition_end</code>. Used
     * if the markers location spans over an area more than a single point on
     * the maps. Determines the marker end location.
     */
    public void setDefinitionEnd(Double definitionEnd) {
        this.definitionEnd = definitionEnd;
    }

    /**
     * Getter for <code>germinate_db.mapdefinitions.chromosome</code>. The
     * chromosome/linkage group that this marker is found on.
     */
    public String getChromosome() {
        return this.chromosome;
    }

    /**
     * Setter for <code>germinate_db.mapdefinitions.chromosome</code>. The
     * chromosome/linkage group that this marker is found on.
     */
    public void setChromosome(String chromosome) {
        this.chromosome = chromosome;
    }

    /**
     * Getter for <code>germinate_db.mapdefinitions.arm_impute</code>. If a
     * chromosome arm is available then this can be entered here.
     */
    public String getArmImpute() {
        return this.armImpute;
    }

    /**
     * Setter for <code>germinate_db.mapdefinitions.arm_impute</code>. If a
     * chromosome arm is available then this can be entered here.
     */
    public void setArmImpute(String armImpute) {
        this.armImpute = armImpute;
    }

    /**
     * Getter for <code>germinate_db.mapdefinitions.created_on</code>. When the
     * record was created.
     */
    public Timestamp getCreatedOn() {
        return this.createdOn;
    }

    /**
     * Setter for <code>germinate_db.mapdefinitions.created_on</code>. When the
     * record was created.
     */
    public void setCreatedOn(Timestamp createdOn) {
        this.createdOn = createdOn;
    }

    /**
     * Getter for <code>germinate_db.mapdefinitions.updated_on</code>. When the
     * record was updated. This may be different from the created on date if
     * subsequent changes have been made to the underlying record.
     */
    public Timestamp getUpdatedOn() {
        return this.updatedOn;
    }

    /**
     * Setter for <code>germinate_db.mapdefinitions.updated_on</code>. When the
     * record was updated. This may be different from the created on date if
     * subsequent changes have been made to the underlying record.
     */
    public void setUpdatedOn(Timestamp updatedOn) {
        this.updatedOn = updatedOn;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("Mapdefinitions (");

        sb.append(id);
        sb.append(", ").append(mapfeaturetypeId);
        sb.append(", ").append(markerId);
        sb.append(", ").append(mapId);
        sb.append(", ").append(definitionStart);
        sb.append(", ").append(definitionEnd);
        sb.append(", ").append(chromosome);
        sb.append(", ").append(armImpute);
        sb.append(", ").append(createdOn);
        sb.append(", ").append(updatedOn);

        sb.append(")");
        return sb.toString();
    }
    // @formatter:on
}
