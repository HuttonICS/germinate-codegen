/*
 * This file is generated by jOOQ.
 */
package jhi.germinate.server.database.codegen.tables.pojos;


import java.io.Serializable;
import java.sql.Timestamp;


import lombok.*;
import lombok.experimental.Accessors;

// @formatter:off
/**
 * Relates genetic markers to a map and assigns a position (if known). Maps are
 * made up of lists of markers and positions (genetic or physiscal and
 * chromosome/linkage group assignation). In the case of QTL the
 * definition_start and definition_end columns can be used to specify a range
 * across a linkage group.
 */
@Getter
@Setter
@Accessors(chain = true)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Mapdefinitions implements Serializable {

    private static final long serialVersionUID = 1L;

    private Integer   id;
    private Integer   mapfeaturetypeId;
    private Integer   markerId;
    private Integer   mapId;
    private Double    definitionStart;
    private Double    definitionEnd;
    private String    chromosome;
    private String    armImpute;
    private Timestamp createdOn;
    private Timestamp updatedOn;

    public Mapdefinitions() {}

    public Mapdefinitions(Mapdefinitions value) {
        this.id = value.id;
        this.mapfeaturetypeId = value.mapfeaturetypeId;
        this.markerId = value.markerId;
        this.mapId = value.mapId;
        this.definitionStart = value.definitionStart;
        this.definitionEnd = value.definitionEnd;
        this.chromosome = value.chromosome;
        this.armImpute = value.armImpute;
        this.createdOn = value.createdOn;
        this.updatedOn = value.updatedOn;
    }

    public Mapdefinitions(
        Integer   id,
        Integer   mapfeaturetypeId,
        Integer   markerId,
        Integer   mapId,
        Double    definitionStart,
        Double    definitionEnd,
        String    chromosome,
        String    armImpute,
        Timestamp createdOn,
        Timestamp updatedOn
    ) {
        this.id = id;
        this.mapfeaturetypeId = mapfeaturetypeId;
        this.markerId = markerId;
        this.mapId = mapId;
        this.definitionStart = definitionStart;
        this.definitionEnd = definitionEnd;
        this.chromosome = chromosome;
        this.armImpute = armImpute;
        this.createdOn = createdOn;
        this.updatedOn = updatedOn;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("Mapdefinitions (");

        sb.append(id);
        sb.append(", ").append(mapfeaturetypeId);
        sb.append(", ").append(markerId);
        sb.append(", ").append(mapId);
        sb.append(", ").append(definitionStart);
        sb.append(", ").append(definitionEnd);
        sb.append(", ").append(chromosome);
        sb.append(", ").append(armImpute);
        sb.append(", ").append(createdOn);
        sb.append(", ").append(updatedOn);

        sb.append(")");
        return sb.toString();
    }
    // @formatter:on
}
