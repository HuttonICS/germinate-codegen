/*
 * This file is generated by jOOQ.
 */
package jhi.germinate.server.database.codegen.tables.pojos;


import java.io.Serializable;
import java.math.BigDecimal;


import lombok.*;
import lombok.experimental.Accessors;

// @formatter:off
/**
 * VIEW
 */
@Getter
@Setter
@Accessors(chain = true)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ViewTableLocations implements Serializable {

    private static final long serialVersionUID = 1L;

    private Integer    locationId;
    private String     locationName;
    private String     locationNameShort;
    private String     locationRegion;
    private String     locationState;
    private String     locationType;
    private BigDecimal locationLatitude;
    private BigDecimal locationLongitude;
    private BigDecimal locationElevation;
    private Integer    locationCoordinateUncertainty;
    private Integer    countryId;
    private String     countryName;
    private String     countryCode2;
    private String     countryCode3;

    public ViewTableLocations() {}

    public ViewTableLocations(ViewTableLocations value) {
        this.locationId = value.locationId;
        this.locationName = value.locationName;
        this.locationNameShort = value.locationNameShort;
        this.locationRegion = value.locationRegion;
        this.locationState = value.locationState;
        this.locationType = value.locationType;
        this.locationLatitude = value.locationLatitude;
        this.locationLongitude = value.locationLongitude;
        this.locationElevation = value.locationElevation;
        this.locationCoordinateUncertainty = value.locationCoordinateUncertainty;
        this.countryId = value.countryId;
        this.countryName = value.countryName;
        this.countryCode2 = value.countryCode2;
        this.countryCode3 = value.countryCode3;
    }

    public ViewTableLocations(
        Integer    locationId,
        String     locationName,
        String     locationNameShort,
        String     locationRegion,
        String     locationState,
        String     locationType,
        BigDecimal locationLatitude,
        BigDecimal locationLongitude,
        BigDecimal locationElevation,
        Integer    locationCoordinateUncertainty,
        Integer    countryId,
        String     countryName,
        String     countryCode2,
        String     countryCode3
    ) {
        this.locationId = locationId;
        this.locationName = locationName;
        this.locationNameShort = locationNameShort;
        this.locationRegion = locationRegion;
        this.locationState = locationState;
        this.locationType = locationType;
        this.locationLatitude = locationLatitude;
        this.locationLongitude = locationLongitude;
        this.locationElevation = locationElevation;
        this.locationCoordinateUncertainty = locationCoordinateUncertainty;
        this.countryId = countryId;
        this.countryName = countryName;
        this.countryCode2 = countryCode2;
        this.countryCode3 = countryCode3;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("ViewTableLocations (");

        sb.append(locationId);
        sb.append(", ").append(locationName);
        sb.append(", ").append(locationNameShort);
        sb.append(", ").append(locationRegion);
        sb.append(", ").append(locationState);
        sb.append(", ").append(locationType);
        sb.append(", ").append(locationLatitude);
        sb.append(", ").append(locationLongitude);
        sb.append(", ").append(locationElevation);
        sb.append(", ").append(locationCoordinateUncertainty);
        sb.append(", ").append(countryId);
        sb.append(", ").append(countryName);
        sb.append(", ").append(countryCode2);
        sb.append(", ").append(countryCode3);

        sb.append(")");
        return sb.toString();
    }
    // @formatter:on
}
