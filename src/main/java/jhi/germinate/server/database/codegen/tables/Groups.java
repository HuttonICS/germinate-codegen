/*
 * This file is generated by jOOQ.
 */
package jhi.germinate.server.database.codegen.tables;


import java.sql.Timestamp;

import jhi.germinate.server.database.codegen.GerminateDb;
import jhi.germinate.server.database.codegen.tables.records.GroupsRecord;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


// @formatter:off
/**
 * Allows the definition of groups within Germinate. Germinate supports a number
 * of different group types such as germinatebase accesion groups and marker
 * groups.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Groups extends TableImpl<GroupsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>germinate_db.groups</code>
     */
    public static final Groups GROUPS = new Groups();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<GroupsRecord> getRecordType() {
        return GroupsRecord.class;
    }

    /**
     * The column <code>germinate_db.groups.id</code>. Primary id for this
     * table. This uniquely identifies the row.
     */
    public final TableField<GroupsRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "Primary id for this table. This uniquely identifies the row.");

    /**
     * The column <code>germinate_db.groups.grouptype_id</code>. Foreign key to
     * grouptypes (grouptypes.id).
     */
    public final TableField<GroupsRecord, Integer> GROUPTYPE_ID = createField(DSL.name("grouptype_id"), SQLDataType.INTEGER.nullable(false), this, "Foreign key to grouptypes (grouptypes.id).");

    /**
     * The column <code>germinate_db.groups.name</code>. The name of the group
     * which can be used to identify it.
     */
    public final TableField<GroupsRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255), this, "The name of the group which can be used to identify it.");

    /**
     * The column <code>germinate_db.groups.description</code>. A free text
     * description of the group. This has no length limitations.
     */
    public final TableField<GroupsRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.CLOB, this, "A free text description of the group. This has no length limitations.");

    /**
     * The column <code>germinate_db.groups.visibility</code>. Defines if the
     * group is visuble or hidden from the Germinate user interface.
     */
    public final TableField<GroupsRecord, Boolean> VISIBILITY = createField(DSL.name("visibility"), SQLDataType.BOOLEAN, this, "Defines if the group is visuble or hidden from the Germinate user interface.");

    /**
     * The column <code>germinate_db.groups.created_by</code>. Defines who
     * created the group. Foreign key to Gatekeeper users (Gatekeeper users.id).
     */
    public final TableField<GroupsRecord, Integer> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.INTEGER, this, "Defines who created the group. Foreign key to Gatekeeper users (Gatekeeper users.id).");

    /**
     * The column <code>germinate_db.groups.created_on</code>. Foreign key to
     * locations (locations.id).
     */
    public final TableField<GroupsRecord, Timestamp> CREATED_ON = createField(DSL.name("created_on"), SQLDataType.TIMESTAMP(0).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.TIMESTAMP)), this, "Foreign key to locations (locations.id).");

    /**
     * The column <code>germinate_db.groups.updated_on</code>. When the record
     * was updated. This may be different from the created on date if subsequent
     * changes have been made to the underlying record.
     */
    public final TableField<GroupsRecord, Timestamp> UPDATED_ON = createField(DSL.name("updated_on"), SQLDataType.TIMESTAMP(0).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.TIMESTAMP)), this, "When the record was updated. This may be different from the created on date if subsequent changes have been made to the underlying record.");

    private Groups(Name alias, Table<GroupsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Groups(Name alias, Table<GroupsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Allows the definition of groups within Germinate. Germinate supports a number of different group types such as germinatebase accesion groups and marker groups."), TableOptions.table());
    }

    /**
     * Create an aliased <code>germinate_db.groups</code> table reference
     */
    public Groups(String alias) {
        this(DSL.name(alias), GROUPS);
    }

    /**
     * Create an aliased <code>germinate_db.groups</code> table reference
     */
    public Groups(Name alias) {
        this(alias, GROUPS);
    }

    /**
     * Create a <code>germinate_db.groups</code> table reference
     */
    public Groups() {
        this(DSL.name("groups"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : GerminateDb.GERMINATE_DB;
    }

    @Override
    public Identity<GroupsRecord, Integer> getIdentity() {
        return (Identity<GroupsRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<GroupsRecord> getPrimaryKey() {
        return Internal.createUniqueKey(Groups.GROUPS, DSL.name("KEY_groups_PRIMARY"), new TableField[] { Groups.GROUPS.ID }, true);
    }

    @Override
    public Groups as(String alias) {
        return new Groups(DSL.name(alias), this);
    }

    @Override
    public Groups as(Name alias) {
        return new Groups(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Groups rename(String name) {
        return new Groups(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Groups rename(Name name) {
        return new Groups(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<Integer, Integer, String, String, Boolean, Integer, Timestamp, Timestamp> fieldsRow() {
        return (Row8) super.fieldsRow();
    }
    // @formatter:on
}
