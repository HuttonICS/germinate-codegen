/*
 * This file is generated by jOOQ.
 */
package jhi.germinate.server.database.codegen.tables.pojos;


import java.io.Serializable;
import java.sql.Timestamp;


// @formatter:off
/**
 * Climate overlays can be used in conjunction with OpenStreetMap in order to
 * visualize climate data in a geographic context.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Climateoverlays implements Serializable {

    private static final long serialVersionUID = 1L;

    private Integer   id;
    private Integer   climateId;
    private String    path;
    private Double    bottomLeftLongitude;
    private Double    bottomLeftLatitude;
    private Double    topRightLongitude;
    private Double    topRightLatitude;
    private Boolean   isLegend;
    private String    description;
    private Timestamp createdOn;
    private Timestamp updatedOn;

    public Climateoverlays() {}

    public Climateoverlays(Climateoverlays value) {
        this.id = value.id;
        this.climateId = value.climateId;
        this.path = value.path;
        this.bottomLeftLongitude = value.bottomLeftLongitude;
        this.bottomLeftLatitude = value.bottomLeftLatitude;
        this.topRightLongitude = value.topRightLongitude;
        this.topRightLatitude = value.topRightLatitude;
        this.isLegend = value.isLegend;
        this.description = value.description;
        this.createdOn = value.createdOn;
        this.updatedOn = value.updatedOn;
    }

    public Climateoverlays(
        Integer   id,
        Integer   climateId,
        String    path,
        Double    bottomLeftLongitude,
        Double    bottomLeftLatitude,
        Double    topRightLongitude,
        Double    topRightLatitude,
        Boolean   isLegend,
        String    description,
        Timestamp createdOn,
        Timestamp updatedOn
    ) {
        this.id = id;
        this.climateId = climateId;
        this.path = path;
        this.bottomLeftLongitude = bottomLeftLongitude;
        this.bottomLeftLatitude = bottomLeftLatitude;
        this.topRightLongitude = topRightLongitude;
        this.topRightLatitude = topRightLatitude;
        this.isLegend = isLegend;
        this.description = description;
        this.createdOn = createdOn;
        this.updatedOn = updatedOn;
    }

    /**
     * Getter for <code>germinate_db.climateoverlays.id</code>. Primary id for
     * this table. This uniquely identifies the row.
     */
    public Integer getId() {
        return this.id;
    }

    /**
     * Setter for <code>germinate_db.climateoverlays.id</code>. Primary id for
     * this table. This uniquely identifies the row.
     */
    public void setId(Integer id) {
        this.id = id;
    }

    /**
     * Getter for <code>germinate_db.climateoverlays.climate_id</code>. Foreign
     * key to climates (climates.id).
     */
    public Integer getClimateId() {
        return this.climateId;
    }

    /**
     * Setter for <code>germinate_db.climateoverlays.climate_id</code>. Foreign
     * key to climates (climates.id).
     */
    public void setClimateId(Integer climateId) {
        this.climateId = climateId;
    }

    /**
     * Getter for <code>germinate_db.climateoverlays.path</code>. This is the
     * path for holding images which can be used as overlays for the Google Maps
     * representation in Germinate. The path is relative.
     */
    public String getPath() {
        return this.path;
    }

    /**
     * Setter for <code>germinate_db.climateoverlays.path</code>. This is the
     * path for holding images which can be used as overlays for the Google Maps
     * representation in Germinate. The path is relative.
     */
    public void setPath(String path) {
        this.path = path;
    }

    /**
     * Getter for
     * <code>germinate_db.climateoverlays.bottom_left_longitude</code>. Allows
     * the allignment of images against OpenStreetMap API.
     */
    public Double getBottomLeftLongitude() {
        return this.bottomLeftLongitude;
    }

    /**
     * Setter for
     * <code>germinate_db.climateoverlays.bottom_left_longitude</code>. Allows
     * the allignment of images against OpenStreetMap API.
     */
    public void setBottomLeftLongitude(Double bottomLeftLongitude) {
        this.bottomLeftLongitude = bottomLeftLongitude;
    }

    /**
     * Getter for
     * <code>germinate_db.climateoverlays.bottom_left_latitude</code>. Allows
     * the allignment of images against OpenStreetMap API.
     */
    public Double getBottomLeftLatitude() {
        return this.bottomLeftLatitude;
    }

    /**
     * Setter for
     * <code>germinate_db.climateoverlays.bottom_left_latitude</code>. Allows
     * the allignment of images against OpenStreetMap API.
     */
    public void setBottomLeftLatitude(Double bottomLeftLatitude) {
        this.bottomLeftLatitude = bottomLeftLatitude;
    }

    /**
     * Getter for <code>germinate_db.climateoverlays.top_right_longitude</code>.
     * Allows the allignment of images against OpenStreetMap API.
     */
    public Double getTopRightLongitude() {
        return this.topRightLongitude;
    }

    /**
     * Setter for <code>germinate_db.climateoverlays.top_right_longitude</code>.
     * Allows the allignment of images against OpenStreetMap API.
     */
    public void setTopRightLongitude(Double topRightLongitude) {
        this.topRightLongitude = topRightLongitude;
    }

    /**
     * Getter for <code>germinate_db.climateoverlays.top_right_latitude</code>.
     * Allows the allignment of images against OpenStreetMap API.
     */
    public Double getTopRightLatitude() {
        return this.topRightLatitude;
    }

    /**
     * Setter for <code>germinate_db.climateoverlays.top_right_latitude</code>.
     * Allows the allignment of images against OpenStreetMap API.
     */
    public void setTopRightLatitude(Double topRightLatitude) {
        this.topRightLatitude = topRightLatitude;
    }

    /**
     * Getter for <code>germinate_db.climateoverlays.is_legend</code>. The
     * legend for the image. What colours represent in the overlays. This is not
     * required but used if present. 
     */
    public Boolean getIsLegend() {
        return this.isLegend;
    }

    /**
     * Setter for <code>germinate_db.climateoverlays.is_legend</code>. The
     * legend for the image. What colours represent in the overlays. This is not
     * required but used if present. 
     */
    public void setIsLegend(Boolean isLegend) {
        this.isLegend = isLegend;
    }

    /**
     * Getter for <code>germinate_db.climateoverlays.description</code>.
     * Describes the climate overlay if additional explanation of  the overlay
     * image is required.
     */
    public String getDescription() {
        return this.description;
    }

    /**
     * Setter for <code>germinate_db.climateoverlays.description</code>.
     * Describes the climate overlay if additional explanation of  the overlay
     * image is required.
     */
    public void setDescription(String description) {
        this.description = description;
    }

    /**
     * Getter for <code>germinate_db.climateoverlays.created_on</code>. When the
     * record was created.
     */
    public Timestamp getCreatedOn() {
        return this.createdOn;
    }

    /**
     * Setter for <code>germinate_db.climateoverlays.created_on</code>. When the
     * record was created.
     */
    public void setCreatedOn(Timestamp createdOn) {
        this.createdOn = createdOn;
    }

    /**
     * Getter for <code>germinate_db.climateoverlays.updated_on</code>. When the
     * record was updated. This may be different from the created on date if
     * subsequent changes have been made to the underlying record.
     */
    public Timestamp getUpdatedOn() {
        return this.updatedOn;
    }

    /**
     * Setter for <code>germinate_db.climateoverlays.updated_on</code>. When the
     * record was updated. This may be different from the created on date if
     * subsequent changes have been made to the underlying record.
     */
    public void setUpdatedOn(Timestamp updatedOn) {
        this.updatedOn = updatedOn;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("Climateoverlays (");

        sb.append(id);
        sb.append(", ").append(climateId);
        sb.append(", ").append(path);
        sb.append(", ").append(bottomLeftLongitude);
        sb.append(", ").append(bottomLeftLatitude);
        sb.append(", ").append(topRightLongitude);
        sb.append(", ").append(topRightLatitude);
        sb.append(", ").append(isLegend);
        sb.append(", ").append(description);
        sb.append(", ").append(createdOn);
        sb.append(", ").append(updatedOn);

        sb.append(")");
        return sb.toString();
    }
    // @formatter:on
}
