/*
 * This file is generated by jOOQ.
 */
package jhi.germinate.server.database.codegen.tables;


import java.sql.Timestamp;

import jhi.germinate.server.database.codegen.GerminateDb;
import jhi.germinate.server.database.codegen.tables.records.LinksRecord;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


// @formatter:off
/**
 * Germinate allows to define external links for different types of data. With
 * this feature you can
 * define links to external resources.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Links extends TableImpl<LinksRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>germinate_db.links</code>
     */
    public static final Links LINKS = new Links();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<LinksRecord> getRecordType() {
        return LinksRecord.class;
    }

    /**
     * The column <code>germinate_db.links.id</code>. Primary id for this table.
     * This uniquely identifies the row.
     */
    public final TableField<LinksRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "Primary id for this table. This uniquely identifies the row.");

    /**
     * The column <code>germinate_db.links.linktype_id</code>. Foreign key to
     * linktypes (linktypes.id).
     */
    public final TableField<LinksRecord, Integer> LINKTYPE_ID = createField(DSL.name("linktype_id"), SQLDataType.INTEGER, this, "Foreign key to linktypes (linktypes.id).");

    /**
     * The column <code>germinate_db.links.foreign_id</code>.
     */
    public final TableField<LinksRecord, Integer> FOREIGN_ID = createField(DSL.name("foreign_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>germinate_db.links.hyperlink</code>. The actual
     * hyperlink.
     */
    public final TableField<LinksRecord, String> HYPERLINK = createField(DSL.name("hyperlink"), SQLDataType.VARCHAR(255), this, "The actual hyperlink.");

    /**
     * The column <code>germinate_db.links.description</code>. A description of
     * the link.
     */
    public final TableField<LinksRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.VARCHAR(255), this, "A description of the link.");

    /**
     * The column <code>germinate_db.links.visibility</code>. Determines if the
     * link is visible or not: {0, 1}
     */
    public final TableField<LinksRecord, Boolean> VISIBILITY = createField(DSL.name("visibility"), SQLDataType.BOOLEAN.defaultValue(DSL.inline("1", SQLDataType.BOOLEAN)), this, "Determines if the link is visible or not: {0, 1}");

    /**
     * The column <code>germinate_db.links.created_on</code>. When the record
     * was created.
     */
    public final TableField<LinksRecord, Timestamp> CREATED_ON = createField(DSL.name("created_on"), SQLDataType.TIMESTAMP(0).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.TIMESTAMP)), this, "When the record was created.");

    /**
     * The column <code>germinate_db.links.updated_on</code>. When the record
     * was updated. This may be different from the created on date if subsequent
     * changes have been made to the underlying record.
     */
    public final TableField<LinksRecord, Timestamp> UPDATED_ON = createField(DSL.name("updated_on"), SQLDataType.TIMESTAMP(0).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.TIMESTAMP)), this, "When the record was updated. This may be different from the created on date if subsequent changes have been made to the underlying record.");

    private Links(Name alias, Table<LinksRecord> aliased) {
        this(alias, aliased, null);
    }

    private Links(Name alias, Table<LinksRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Germinate allows to define external links for different types of data. With this feature you can\r\ndefine links to external resources."), TableOptions.table());
    }

    /**
     * Create an aliased <code>germinate_db.links</code> table reference
     */
    public Links(String alias) {
        this(DSL.name(alias), LINKS);
    }

    /**
     * Create an aliased <code>germinate_db.links</code> table reference
     */
    public Links(Name alias) {
        this(alias, LINKS);
    }

    /**
     * Create a <code>germinate_db.links</code> table reference
     */
    public Links() {
        this(DSL.name("links"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : GerminateDb.GERMINATE_DB;
    }

    @Override
    public Identity<LinksRecord, Integer> getIdentity() {
        return (Identity<LinksRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<LinksRecord> getPrimaryKey() {
        return Internal.createUniqueKey(Links.LINKS, DSL.name("KEY_links_PRIMARY"), new TableField[] { Links.LINKS.ID }, true);
    }

    @Override
    public Links as(String alias) {
        return new Links(DSL.name(alias), this);
    }

    @Override
    public Links as(Name alias) {
        return new Links(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Links rename(String name) {
        return new Links(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Links rename(Name name) {
        return new Links(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<Integer, Integer, Integer, String, String, Boolean, Timestamp, Timestamp> fieldsRow() {
        return (Row8) super.fieldsRow();
    }
    // @formatter:on
}
