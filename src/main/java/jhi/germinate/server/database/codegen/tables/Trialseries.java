/*
 * This file is generated by jOOQ.
 */
package jhi.germinate.server.database.codegen.tables;


import java.sql.Timestamp;

import jhi.germinate.server.database.codegen.GerminateDb;
import jhi.germinate.server.database.codegen.tables.records.TrialseriesRecord;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


// @formatter:off
/**
 * Holds the names of trial series. Trial series define the name of the trial to
 * which trials data is associated. Examples would include the overarching
 * project.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Trialseries extends TableImpl<TrialseriesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>germinate_db.trialseries</code>
     */
    public static final Trialseries TRIALSERIES = new Trialseries();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TrialseriesRecord> getRecordType() {
        return TrialseriesRecord.class;
    }

    /**
     * The column <code>germinate_db.trialseries.id</code>. Primary id for this
     * table. This uniquely identifies the row.
     */
    public final TableField<TrialseriesRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "Primary id for this table. This uniquely identifies the row.");

    /**
     * The column <code>germinate_db.trialseries.seriesname</code>. The
     * description of the trial series name.
     */
    public final TableField<TrialseriesRecord, String> SERIESNAME = createField(DSL.name("seriesname"), SQLDataType.VARCHAR(255), this, "The description of the trial series name.");

    /**
     * The column <code>germinate_db.trialseries.created_on</code>. When the
     * record was created.
     */
    public final TableField<TrialseriesRecord, Timestamp> CREATED_ON = createField(DSL.name("created_on"), SQLDataType.TIMESTAMP(0).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.TIMESTAMP)), this, "When the record was created.");

    /**
     * The column <code>germinate_db.trialseries.updated_on</code>. When the
     * record was updated. This may be different from the created on date if
     * changes have been made subsequently to the underlying record.
     */
    public final TableField<TrialseriesRecord, Timestamp> UPDATED_ON = createField(DSL.name("updated_on"), SQLDataType.TIMESTAMP(0).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.TIMESTAMP)), this, "When the record was updated. This may be different from the created on date if changes have been made subsequently to the underlying record.");

    private Trialseries(Name alias, Table<TrialseriesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Trialseries(Name alias, Table<TrialseriesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Holds the names of trial series. Trial series define the name of the trial to which trials data is associated. Examples would include the overarching project."), TableOptions.table());
    }

    /**
     * Create an aliased <code>germinate_db.trialseries</code> table reference
     */
    public Trialseries(String alias) {
        this(DSL.name(alias), TRIALSERIES);
    }

    /**
     * Create an aliased <code>germinate_db.trialseries</code> table reference
     */
    public Trialseries(Name alias) {
        this(alias, TRIALSERIES);
    }

    /**
     * Create a <code>germinate_db.trialseries</code> table reference
     */
    public Trialseries() {
        this(DSL.name("trialseries"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : GerminateDb.GERMINATE_DB;
    }

    @Override
    public Identity<TrialseriesRecord, Integer> getIdentity() {
        return (Identity<TrialseriesRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<TrialseriesRecord> getPrimaryKey() {
        return Internal.createUniqueKey(Trialseries.TRIALSERIES, DSL.name("KEY_trialseries_PRIMARY"), new TableField[] { Trialseries.TRIALSERIES.ID }, true);
    }

    @Override
    public Trialseries as(String alias) {
        return new Trialseries(DSL.name(alias), this);
    }

    @Override
    public Trialseries as(Name alias) {
        return new Trialseries(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Trialseries rename(String name) {
        return new Trialseries(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Trialseries rename(Name name) {
        return new Trialseries(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, String, Timestamp, Timestamp> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
    // @formatter:on
}
