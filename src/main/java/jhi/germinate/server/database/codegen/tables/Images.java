/*
 * This file is generated by jOOQ.
 */
package jhi.germinate.server.database.codegen.tables;


import java.sql.Timestamp;

import jhi.germinate.server.database.binding.ExifBinding;
import jhi.germinate.server.database.codegen.GerminateDb;
import jhi.germinate.server.database.codegen.tables.records.ImagesRecord;
import jhi.germinate.server.database.pojo.Exif;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


// @formatter:off
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Images extends TableImpl<ImagesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>germinate_db.images</code>
     */
    public static final Images IMAGES = new Images();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ImagesRecord> getRecordType() {
        return ImagesRecord.class;
    }

    /**
     * The column <code>germinate_db.images.id</code>. Primary id for this
     * table. This uniquely identifies the row.
     */
    public final TableField<ImagesRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "Primary id for this table. This uniquely identifies the row.");

    /**
     * The column <code>germinate_db.images.imagetype_id</code>. Foreign key to
     * imagetypes (imagetypes.id).
     */
    public final TableField<ImagesRecord, Integer> IMAGETYPE_ID = createField(DSL.name("imagetype_id"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.inline("0", SQLDataType.INTEGER)), this, "Foreign key to imagetypes (imagetypes.id).");

    /**
     * The column <code>germinate_db.images.description</code>. A description of
     * what the image shows if required.
     */
    public final TableField<ImagesRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.CLOB.nullable(false), this, "A description of what the image shows if required.");

    /**
     * The column <code>germinate_db.images.foreign_id</code>. Relates to the
     * UID of the table to which the comment relates.
     */
    public final TableField<ImagesRecord, Integer> FOREIGN_ID = createField(DSL.name("foreign_id"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.inline("0", SQLDataType.INTEGER)), this, "Relates to the UID of the table to which the comment relates.");

    /**
     * The column <code>germinate_db.images.path</code>. The file system path to
     * the image.
     */
    public final TableField<ImagesRecord, String> PATH = createField(DSL.name("path"), SQLDataType.CLOB.nullable(false), this, "The file system path to the image.");

    /**
     * The column <code>germinate_db.images.exif</code>.
     */
    public final TableField<ImagesRecord, Exif> EXIF = createField(DSL.name("exif"), SQLDataType.JSON, this, "", new ExifBinding());

    /**
     * The column <code>germinate_db.images.is_reference</code>.
     */
    public final TableField<ImagesRecord, Boolean> IS_REFERENCE = createField(DSL.name("is_reference"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.inline("0", SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>germinate_db.images.created_on</code>. When the record
     * was created.
     */
    public final TableField<ImagesRecord, Timestamp> CREATED_ON = createField(DSL.name("created_on"), SQLDataType.TIMESTAMP(0).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.TIMESTAMP)), this, "When the record was created.");

    /**
     * The column <code>germinate_db.images.updated_on</code>. When the record
     * was updated. This may be different from the created on date if subsequent
     * changes have been made to the underlying record.
     */
    public final TableField<ImagesRecord, Timestamp> UPDATED_ON = createField(DSL.name("updated_on"), SQLDataType.TIMESTAMP(0).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.TIMESTAMP)), this, "When the record was updated. This may be different from the created on date if subsequent changes have been made to the underlying record.");

    private Images(Name alias, Table<ImagesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Images(Name alias, Table<ImagesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>germinate_db.images</code> table reference
     */
    public Images(String alias) {
        this(DSL.name(alias), IMAGES);
    }

    /**
     * Create an aliased <code>germinate_db.images</code> table reference
     */
    public Images(Name alias) {
        this(alias, IMAGES);
    }

    /**
     * Create a <code>germinate_db.images</code> table reference
     */
    public Images() {
        this(DSL.name("images"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : GerminateDb.GERMINATE_DB;
    }

    @Override
    public Identity<ImagesRecord, Integer> getIdentity() {
        return (Identity<ImagesRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<ImagesRecord> getPrimaryKey() {
        return Internal.createUniqueKey(Images.IMAGES, DSL.name("KEY_images_PRIMARY"), new TableField[] { Images.IMAGES.ID }, true);
    }

    @Override
    public Images as(String alias) {
        return new Images(DSL.name(alias), this);
    }

    @Override
    public Images as(Name alias) {
        return new Images(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Images rename(String name) {
        return new Images(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Images rename(Name name) {
        return new Images(name, null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<Integer, Integer, String, Integer, String, Exif, Boolean, Timestamp, Timestamp> fieldsRow() {
        return (Row9) super.fieldsRow();
    }
    // @formatter:on
}
