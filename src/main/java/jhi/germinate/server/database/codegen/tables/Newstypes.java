/*
 * This file is generated by jOOQ.
 */
package jhi.germinate.server.database.codegen.tables;


import java.sql.Timestamp;

import jhi.germinate.server.database.codegen.GerminateDb;
import jhi.germinate.server.database.codegen.tables.records.NewstypesRecord;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


// @formatter:off
/**
 * Defines the news types which are contained the database. The news types are
 * displayed on the Germinate user interface and are not required if the user
 * interface is not used.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Newstypes extends TableImpl<NewstypesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>germinate_db.newstypes</code>
     */
    public static final Newstypes NEWSTYPES = new Newstypes();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<NewstypesRecord> getRecordType() {
        return NewstypesRecord.class;
    }

    /**
     * The column <code>germinate_db.newstypes.id</code>. Primary id for this
     * table. This uniquely identifies the row.
     */
    public final TableField<NewstypesRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "Primary id for this table. This uniquely identifies the row.");

    /**
     * The column <code>germinate_db.newstypes.name</code>. Name of the news
     * type.
     */
    public final TableField<NewstypesRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255), this, "Name of the news type.");

    /**
     * The column <code>germinate_db.newstypes.description</code>. A longer
     * description of the news type.
     */
    public final TableField<NewstypesRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.VARCHAR(255), this, "A longer description of the news type.");

    /**
     * The column <code>germinate_db.newstypes.created_on</code>. When the
     * record was created.
     */
    public final TableField<NewstypesRecord, Timestamp> CREATED_ON = createField(DSL.name("created_on"), SQLDataType.TIMESTAMP(0).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.TIMESTAMP)), this, "When the record was created.");

    /**
     * The column <code>germinate_db.newstypes.updated_on</code>. When the
     * record was updated. This may be different from the created on date if
     * subsequent changes have been made to the underlying record.
     */
    public final TableField<NewstypesRecord, Timestamp> UPDATED_ON = createField(DSL.name("updated_on"), SQLDataType.TIMESTAMP(0).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.TIMESTAMP)), this, "When the record was updated. This may be different from the created on date if subsequent changes have been made to the underlying record.");

    private Newstypes(Name alias, Table<NewstypesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Newstypes(Name alias, Table<NewstypesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Defines the news types which are contained the database. The news types are displayed on the Germinate user interface and are not required if the user interface is not used."), TableOptions.table());
    }

    /**
     * Create an aliased <code>germinate_db.newstypes</code> table reference
     */
    public Newstypes(String alias) {
        this(DSL.name(alias), NEWSTYPES);
    }

    /**
     * Create an aliased <code>germinate_db.newstypes</code> table reference
     */
    public Newstypes(Name alias) {
        this(alias, NEWSTYPES);
    }

    /**
     * Create a <code>germinate_db.newstypes</code> table reference
     */
    public Newstypes() {
        this(DSL.name("newstypes"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : GerminateDb.GERMINATE_DB;
    }

    @Override
    public Identity<NewstypesRecord, Integer> getIdentity() {
        return (Identity<NewstypesRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<NewstypesRecord> getPrimaryKey() {
        return Internal.createUniqueKey(Newstypes.NEWSTYPES, DSL.name("KEY_newstypes_PRIMARY"), new TableField[] { Newstypes.NEWSTYPES.ID }, true);
    }

    @Override
    public Newstypes as(String alias) {
        return new Newstypes(DSL.name(alias), this);
    }

    @Override
    public Newstypes as(Name alias) {
        return new Newstypes(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Newstypes rename(String name) {
        return new Newstypes(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Newstypes rename(Name name) {
        return new Newstypes(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Integer, String, String, Timestamp, Timestamp> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
    // @formatter:on
}
