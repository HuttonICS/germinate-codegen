/*
 * This file is generated by jOOQ.
 */
package jhi.germinate.server.database.codegen.tables;


import jhi.germinate.server.database.binding.SynonymBinding;
import jhi.germinate.server.database.codegen.GerminateDb;
import jhi.germinate.server.database.codegen.tables.records.ViewTableMapdefinitionsRecord;

import org.jooq.Field;
import org.jooq.Name;
import org.jooq.Row10;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


// @formatter:off
/**
 * VIEW
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ViewTableMapdefinitions extends TableImpl<ViewTableMapdefinitionsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>germinate_db.view_table_mapdefinitions</code>
     */
    public static final ViewTableMapdefinitions VIEW_TABLE_MAPDEFINITIONS = new ViewTableMapdefinitions();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ViewTableMapdefinitionsRecord> getRecordType() {
        return ViewTableMapdefinitionsRecord.class;
    }

    /**
     * The column <code>germinate_db.view_table_mapdefinitions.marker_id</code>.
     * Primary id for this table. This uniquely identifies the row.
     */
    public final TableField<ViewTableMapdefinitionsRecord, Integer> MARKER_ID = createField(DSL.name("marker_id"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.inline("0", SQLDataType.INTEGER)), this, "Primary id for this table. This uniquely identifies the row.");

    /**
     * The column
     * <code>germinate_db.view_table_mapdefinitions.marker_name</code>. The name
     * of the marker. This should be a unique name which identifies the marker.
     */
    public final TableField<ViewTableMapdefinitionsRecord, String> MARKER_NAME = createField(DSL.name("marker_name"), SQLDataType.VARCHAR(45).nullable(false), this, "The name of the marker. This should be a unique name which identifies the marker.");

    /**
     * The column <code>germinate_db.view_table_mapdefinitions.synonyms</code>.
     * The synonyms as a json array.
     */
    public final TableField<ViewTableMapdefinitionsRecord, String[]> SYNONYMS = createField(DSL.name("synonyms"), SQLDataType.JSON, this, "The synonyms as a json array.", new SynonymBinding());

    /**
     * The column
     * <code>germinate_db.view_table_mapdefinitions.map_feature_type</code>.
     * Description of the feature type. This could include a definition of the
     * marker type such as 'SNP', 'KASP' or 'AFLP'.
     */
    public final TableField<ViewTableMapdefinitionsRecord, String> MAP_FEATURE_TYPE = createField(DSL.name("map_feature_type"), SQLDataType.VARCHAR(255), this, "Description of the feature type. This could include a definition of the marker type such as 'SNP', 'KASP' or 'AFLP'.");

    /**
     * The column <code>germinate_db.view_table_mapdefinitions.map_id</code>.
     * Primary id for this table. This uniquely identifies the row.
     */
    public final TableField<ViewTableMapdefinitionsRecord, Integer> MAP_ID = createField(DSL.name("map_id"), SQLDataType.INTEGER.defaultValue(DSL.inline("0", SQLDataType.INTEGER)), this, "Primary id for this table. This uniquely identifies the row.");

    /**
     * The column <code>germinate_db.view_table_mapdefinitions.user_id</code>.
     * Foreign key to Gatekeeper users (Gatekeeper users.id).
     */
    public final TableField<ViewTableMapdefinitionsRecord, Integer> USER_ID = createField(DSL.name("user_id"), SQLDataType.INTEGER, this, "Foreign key to Gatekeeper users (Gatekeeper users.id).");

    /**
     * The column
     * <code>germinate_db.view_table_mapdefinitions.visibility</code>.
     * Determines if the map is visible to the Germinate interface or hidden.
     */
    public final TableField<ViewTableMapdefinitionsRecord, Boolean> VISIBILITY = createField(DSL.name("visibility"), SQLDataType.BOOLEAN.defaultValue(DSL.inline("1", SQLDataType.BOOLEAN)), this, "Determines if the map is visible to the Germinate interface or hidden.");

    /**
     * The column <code>germinate_db.view_table_mapdefinitions.map_name</code>.
     * Describes the map.
     */
    public final TableField<ViewTableMapdefinitionsRecord, String> MAP_NAME = createField(DSL.name("map_name"), SQLDataType.VARCHAR(255), this, "Describes the map.");

    /**
     * The column
     * <code>germinate_db.view_table_mapdefinitions.chromosome</code>. The
     * chromosome/linkage group that this marker is found on.
     */
    public final TableField<ViewTableMapdefinitionsRecord, String> CHROMOSOME = createField(DSL.name("chromosome"), SQLDataType.VARCHAR(255), this, "The chromosome/linkage group that this marker is found on.");

    /**
     * The column <code>germinate_db.view_table_mapdefinitions.position</code>.
     * Used if the markers location spans over an area more than a single point
     * on the maps. Determines the marker start location.
     */
    public final TableField<ViewTableMapdefinitionsRecord, Double> POSITION = createField(DSL.name("position"), SQLDataType.DOUBLE, this, "Used if the markers location spans over an area more than a single point on the maps. Determines the marker start location.");

    private ViewTableMapdefinitions(Name alias, Table<ViewTableMapdefinitionsRecord> aliased) {
        this(alias, aliased, null);
    }

    private ViewTableMapdefinitions(Name alias, Table<ViewTableMapdefinitionsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("VIEW"), TableOptions.view("create view `view_table_mapdefinitions` as select `germinate_template_4_23_02_08`.`markers`.`id` AS `marker_id`,`germinate_template_4_23_02_08`.`markers`.`marker_name` AS `marker_name`,`germinate_template_4_23_02_08`.`synonyms`.`synonyms` AS `synonyms`,`germinate_template_4_23_02_08`.`mapfeaturetypes`.`description` AS `map_feature_type`,`germinate_template_4_23_02_08`.`maps`.`id` AS `map_id`,`germinate_template_4_23_02_08`.`maps`.`user_id` AS `user_id`,`germinate_template_4_23_02_08`.`maps`.`visibility` AS `visibility`,`germinate_template_4_23_02_08`.`maps`.`name` AS `map_name`,`germinate_template_4_23_02_08`.`mapdefinitions`.`chromosome` AS `chromosome`,`germinate_template_4_23_02_08`.`mapdefinitions`.`definition_start` AS `position` from ((((`germinate_template_4_23_02_08`.`markers` left join `germinate_template_4_23_02_08`.`mapdefinitions` on((`germinate_template_4_23_02_08`.`markers`.`id` = `germinate_template_4_23_02_08`.`mapdefinitions`.`marker_id`))) left join `germinate_template_4_23_02_08`.`mapfeaturetypes` on((`germinate_template_4_23_02_08`.`mapfeaturetypes`.`id` = `germinate_template_4_23_02_08`.`mapdefinitions`.`mapfeaturetype_id`))) left join `germinate_template_4_23_02_08`.`maps` on((`germinate_template_4_23_02_08`.`maps`.`id` = `germinate_template_4_23_02_08`.`mapdefinitions`.`map_id`))) left join `germinate_template_4_23_02_08`.`synonyms` on(((`germinate_template_4_23_02_08`.`synonyms`.`foreign_id` = `germinate_template_4_23_02_08`.`markers`.`id`) and (`germinate_template_4_23_02_08`.`synonyms`.`synonymtype_id` = 2))))"));
    }

    /**
     * Create an aliased <code>germinate_db.view_table_mapdefinitions</code>
     * table reference
     */
    public ViewTableMapdefinitions(String alias) {
        this(DSL.name(alias), VIEW_TABLE_MAPDEFINITIONS);
    }

    /**
     * Create an aliased <code>germinate_db.view_table_mapdefinitions</code>
     * table reference
     */
    public ViewTableMapdefinitions(Name alias) {
        this(alias, VIEW_TABLE_MAPDEFINITIONS);
    }

    /**
     * Create a <code>germinate_db.view_table_mapdefinitions</code> table
     * reference
     */
    public ViewTableMapdefinitions() {
        this(DSL.name("view_table_mapdefinitions"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : GerminateDb.GERMINATE_DB;
    }

    @Override
    public ViewTableMapdefinitions as(String alias) {
        return new ViewTableMapdefinitions(DSL.name(alias), this);
    }

    @Override
    public ViewTableMapdefinitions as(Name alias) {
        return new ViewTableMapdefinitions(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ViewTableMapdefinitions rename(String name) {
        return new ViewTableMapdefinitions(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ViewTableMapdefinitions rename(Name name) {
        return new ViewTableMapdefinitions(name, null);
    }

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row10<Integer, String, String[], String, Integer, Integer, Boolean, String, String, Double> fieldsRow() {
        return (Row10) super.fieldsRow();
    }
    // @formatter:on
}
