/*
 * This file is generated by jOOQ.
 */
package jhi.germinate.server.database.codegen.tables.records;


import java.sql.Timestamp;

import jhi.germinate.server.database.codegen.tables.Images;
import jhi.germinate.server.database.pojo.Exif;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record8;
import org.jooq.Row8;
import org.jooq.impl.UpdatableRecordImpl;


// @formatter:off
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ImagesRecord extends UpdatableRecordImpl<ImagesRecord> implements Record8<Integer, Integer, String, Integer, String, Exif, Timestamp, Timestamp> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>germinate_db.images.id</code>. Primary id for this
     * table. This uniquely identifies the row.
     */
    public void setId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>germinate_db.images.id</code>. Primary id for this
     * table. This uniquely identifies the row.
     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>germinate_db.images.imagetype_id</code>. Foreign key to
     * imagetypes (imagetypes.id).
     */
    public void setImagetypeId(Integer value) {
        set(1, value);
    }

    /**
     * Getter for <code>germinate_db.images.imagetype_id</code>. Foreign key to
     * imagetypes (imagetypes.id).
     */
    public Integer getImagetypeId() {
        return (Integer) get(1);
    }

    /**
     * Setter for <code>germinate_db.images.description</code>. A description of
     * what the image shows if required.
     */
    public void setDescription(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>germinate_db.images.description</code>. A description of
     * what the image shows if required.
     */
    public String getDescription() {
        return (String) get(2);
    }

    /**
     * Setter for <code>germinate_db.images.foreign_id</code>. Relates to the
     * UID of the table to which the comment relates.
     */
    public void setForeignId(Integer value) {
        set(3, value);
    }

    /**
     * Getter for <code>germinate_db.images.foreign_id</code>. Relates to the
     * UID of the table to which the comment relates.
     */
    public Integer getForeignId() {
        return (Integer) get(3);
    }

    /**
     * Setter for <code>germinate_db.images.path</code>. The file system path to
     * the image.
     */
    public void setPath(String value) {
        set(4, value);
    }

    /**
     * Getter for <code>germinate_db.images.path</code>. The file system path to
     * the image.
     */
    public String getPath() {
        return (String) get(4);
    }

    /**
     * Setter for <code>germinate_db.images.exif</code>.
     */
    public void setExif(Exif value) {
        set(5, value);
    }

    /**
     * Getter for <code>germinate_db.images.exif</code>.
     */
    public Exif getExif() {
        return (Exif) get(5);
    }

    /**
     * Setter for <code>germinate_db.images.created_on</code>. When the record
     * was created.
     */
    public void setCreatedOn(Timestamp value) {
        set(6, value);
    }

    /**
     * Getter for <code>germinate_db.images.created_on</code>. When the record
     * was created.
     */
    public Timestamp getCreatedOn() {
        return (Timestamp) get(6);
    }

    /**
     * Setter for <code>germinate_db.images.updated_on</code>. When the record
     * was updated. This may be different from the created on date if subsequent
     * changes have been made to the underlying record.
     */
    public void setUpdatedOn(Timestamp value) {
        set(7, value);
    }

    /**
     * Getter for <code>germinate_db.images.updated_on</code>. When the record
     * was updated. This may be different from the created on date if subsequent
     * changes have been made to the underlying record.
     */
    public Timestamp getUpdatedOn() {
        return (Timestamp) get(7);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record8 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row8<Integer, Integer, String, Integer, String, Exif, Timestamp, Timestamp> fieldsRow() {
        return (Row8) super.fieldsRow();
    }

    @Override
    public Row8<Integer, Integer, String, Integer, String, Exif, Timestamp, Timestamp> valuesRow() {
        return (Row8) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return Images.IMAGES.ID;
    }

    @Override
    public Field<Integer> field2() {
        return Images.IMAGES.IMAGETYPE_ID;
    }

    @Override
    public Field<String> field3() {
        return Images.IMAGES.DESCRIPTION;
    }

    @Override
    public Field<Integer> field4() {
        return Images.IMAGES.FOREIGN_ID;
    }

    @Override
    public Field<String> field5() {
        return Images.IMAGES.PATH;
    }

    @Override
    public Field<Exif> field6() {
        return Images.IMAGES.EXIF;
    }

    @Override
    public Field<Timestamp> field7() {
        return Images.IMAGES.CREATED_ON;
    }

    @Override
    public Field<Timestamp> field8() {
        return Images.IMAGES.UPDATED_ON;
    }

    @Override
    public Integer component1() {
        return getId();
    }

    @Override
    public Integer component2() {
        return getImagetypeId();
    }

    @Override
    public String component3() {
        return getDescription();
    }

    @Override
    public Integer component4() {
        return getForeignId();
    }

    @Override
    public String component5() {
        return getPath();
    }

    @Override
    public Exif component6() {
        return getExif();
    }

    @Override
    public Timestamp component7() {
        return getCreatedOn();
    }

    @Override
    public Timestamp component8() {
        return getUpdatedOn();
    }

    @Override
    public Integer value1() {
        return getId();
    }

    @Override
    public Integer value2() {
        return getImagetypeId();
    }

    @Override
    public String value3() {
        return getDescription();
    }

    @Override
    public Integer value4() {
        return getForeignId();
    }

    @Override
    public String value5() {
        return getPath();
    }

    @Override
    public Exif value6() {
        return getExif();
    }

    @Override
    public Timestamp value7() {
        return getCreatedOn();
    }

    @Override
    public Timestamp value8() {
        return getUpdatedOn();
    }

    @Override
    public ImagesRecord value1(Integer value) {
        setId(value);
        return this;
    }

    @Override
    public ImagesRecord value2(Integer value) {
        setImagetypeId(value);
        return this;
    }

    @Override
    public ImagesRecord value3(String value) {
        setDescription(value);
        return this;
    }

    @Override
    public ImagesRecord value4(Integer value) {
        setForeignId(value);
        return this;
    }

    @Override
    public ImagesRecord value5(String value) {
        setPath(value);
        return this;
    }

    @Override
    public ImagesRecord value6(Exif value) {
        setExif(value);
        return this;
    }

    @Override
    public ImagesRecord value7(Timestamp value) {
        setCreatedOn(value);
        return this;
    }

    @Override
    public ImagesRecord value8(Timestamp value) {
        setUpdatedOn(value);
        return this;
    }

    @Override
    public ImagesRecord values(Integer value1, Integer value2, String value3, Integer value4, String value5, Exif value6, Timestamp value7, Timestamp value8) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ImagesRecord
     */
    public ImagesRecord() {
        super(Images.IMAGES);
    }

    /**
     * Create a detached, initialised ImagesRecord
     */
    public ImagesRecord(Integer id, Integer imagetypeId, String description, Integer foreignId, String path, Exif exif, Timestamp createdOn, Timestamp updatedOn) {
        super(Images.IMAGES);

        setId(id);
        setImagetypeId(imagetypeId);
        setDescription(description);
        setForeignId(foreignId);
        setPath(path);
        setExif(exif);
        setCreatedOn(createdOn);
        setUpdatedOn(updatedOn);
    }

    /**
     * Create a detached, initialised ImagesRecord
     */
    public ImagesRecord(jhi.germinate.server.database.codegen.tables.pojos.Images value) {
        super(Images.IMAGES);

        if (value != null) {
            setId(value.getId());
            setImagetypeId(value.getImagetypeId());
            setDescription(value.getDescription());
            setForeignId(value.getForeignId());
            setPath(value.getPath());
            setExif(value.getExif());
            setCreatedOn(value.getCreatedOn());
            setUpdatedOn(value.getUpdatedOn());
        }
    }
    // @formatter:on
}
