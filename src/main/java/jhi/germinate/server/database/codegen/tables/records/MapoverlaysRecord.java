/*
 * This file is generated by jOOQ.
 */
package jhi.germinate.server.database.codegen.tables.records;


import java.math.BigDecimal;
import java.sql.Timestamp;

import jhi.germinate.server.database.codegen.enums.MapoverlaysReferenceTable;
import jhi.germinate.server.database.codegen.tables.Mapoverlays;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record14;
import org.jooq.Row14;
import org.jooq.impl.UpdatableRecordImpl;


// @formatter:off
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MapoverlaysRecord extends UpdatableRecordImpl<MapoverlaysRecord> implements Record14<Integer, String, String, BigDecimal, BigDecimal, BigDecimal, BigDecimal, Boolean, MapoverlaysReferenceTable, Integer, Integer, Timestamp, Timestamp, Timestamp> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>germinate_db.mapoverlays.id</code>. The primary key of
     * this table.
     */
    public void setId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>germinate_db.mapoverlays.id</code>. The primary key of
     * this table.
     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>germinate_db.mapoverlays.name</code>. A name for the map
     * overlay.
     */
    public void setName(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>germinate_db.mapoverlays.name</code>. A name for the map
     * overlay.
     */
    public String getName() {
        return (String) get(1);
    }

    /**
     * Setter for <code>germinate_db.mapoverlays.description</code>. An optional
     * description of what is shown on the overlay.
     */
    public void setDescription(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>germinate_db.mapoverlays.description</code>. An optional
     * description of what is shown on the overlay.
     */
    public String getDescription() {
        return (String) get(2);
    }

    /**
     * Setter for <code>germinate_db.mapoverlays.bottom_left_lat</code>. The
     * bottom left latitude coordinates in decimal degrees for anchoring on the
     * map.
     */
    public void setBottomLeftLat(BigDecimal value) {
        set(3, value);
    }

    /**
     * Getter for <code>germinate_db.mapoverlays.bottom_left_lat</code>. The
     * bottom left latitude coordinates in decimal degrees for anchoring on the
     * map.
     */
    public BigDecimal getBottomLeftLat() {
        return (BigDecimal) get(3);
    }

    /**
     * Setter for <code>germinate_db.mapoverlays.bottom_left_lng</code>. The
     * bottom left longitude coordinates in decimal degrees for anchoring on the
     * map.
     */
    public void setBottomLeftLng(BigDecimal value) {
        set(4, value);
    }

    /**
     * Getter for <code>germinate_db.mapoverlays.bottom_left_lng</code>. The
     * bottom left longitude coordinates in decimal degrees for anchoring on the
     * map.
     */
    public BigDecimal getBottomLeftLng() {
        return (BigDecimal) get(4);
    }

    /**
     * Setter for <code>germinate_db.mapoverlays.top_right_lat</code>. The top
     * right latitude coordinates in decimal degrees for anchoring on the map.
     */
    public void setTopRightLat(BigDecimal value) {
        set(5, value);
    }

    /**
     * Getter for <code>germinate_db.mapoverlays.top_right_lat</code>. The top
     * right latitude coordinates in decimal degrees for anchoring on the map.
     */
    public BigDecimal getTopRightLat() {
        return (BigDecimal) get(5);
    }

    /**
     * Setter for <code>germinate_db.mapoverlays.top_right_lng</code>. The top
     * right longitude coordinates in decimal degrees for anchoring on the map.
     */
    public void setTopRightLng(BigDecimal value) {
        set(6, value);
    }

    /**
     * Getter for <code>germinate_db.mapoverlays.top_right_lng</code>. The top
     * right longitude coordinates in decimal degrees for anchoring on the map.
     */
    public BigDecimal getTopRightLng() {
        return (BigDecimal) get(6);
    }

    /**
     * Setter for <code>germinate_db.mapoverlays.is_legend</code>. Flag to
     * indicate whether this is a legend or an actual overlay.
     */
    public void setIsLegend(Boolean value) {
        set(7, value);
    }

    /**
     * Getter for <code>germinate_db.mapoverlays.is_legend</code>. Flag to
     * indicate whether this is a legend or an actual overlay.
     */
    public Boolean getIsLegend() {
        return (Boolean) get(7);
    }

    /**
     * Setter for <code>germinate_db.mapoverlays.reference_table</code>.
     * Optionally, other database items can be linked to this. As an example, an
     * overlay can be linked to a climate variable.
     */
    public void setReferenceTable(MapoverlaysReferenceTable value) {
        set(8, value);
    }

    /**
     * Getter for <code>germinate_db.mapoverlays.reference_table</code>.
     * Optionally, other database items can be linked to this. As an example, an
     * overlay can be linked to a climate variable.
     */
    public MapoverlaysReferenceTable getReferenceTable() {
        return (MapoverlaysReferenceTable) get(8);
    }

    /**
     * Setter for <code>germinate_db.mapoverlays.foreign_id</code>. The foreign
     * id within the reference_table of the linked database object.
     */
    public void setForeignId(Integer value) {
        set(9, value);
    }

    /**
     * Getter for <code>germinate_db.mapoverlays.foreign_id</code>. The foreign
     * id within the reference_table of the linked database object.
     */
    public Integer getForeignId() {
        return (Integer) get(9);
    }

    /**
     * Setter for <code>germinate_db.mapoverlays.dataset_id</code>. A dataset id
     * this map overlay is linked to. Useful for providing map overlays for
     * trials data that is not specific to a trait within the dataset.
     */
    public void setDatasetId(Integer value) {
        set(10, value);
    }

    /**
     * Getter for <code>germinate_db.mapoverlays.dataset_id</code>. A dataset id
     * this map overlay is linked to. Useful for providing map overlays for
     * trials data that is not specific to a trait within the dataset.
     */
    public Integer getDatasetId() {
        return (Integer) get(10);
    }

    /**
     * Setter for <code>germinate_db.mapoverlays.recording_date</code>. A date
     * that is associated with the timepoint when this has been recorded.
     */
    public void setRecordingDate(Timestamp value) {
        set(11, value);
    }

    /**
     * Getter for <code>germinate_db.mapoverlays.recording_date</code>. A date
     * that is associated with the timepoint when this has been recorded.
     */
    public Timestamp getRecordingDate() {
        return (Timestamp) get(11);
    }

    /**
     * Setter for <code>germinate_db.mapoverlays.created_on</code>. The datetime
     * when this database record has been created.
     */
    public void setCreatedOn(Timestamp value) {
        set(12, value);
    }

    /**
     * Getter for <code>germinate_db.mapoverlays.created_on</code>. The datetime
     * when this database record has been created.
     */
    public Timestamp getCreatedOn() {
        return (Timestamp) get(12);
    }

    /**
     * Setter for <code>germinate_db.mapoverlays.updated_on</code>. The
     * timestamp when this database record has last been updated.
     */
    public void setUpdatedOn(Timestamp value) {
        set(13, value);
    }

    /**
     * Getter for <code>germinate_db.mapoverlays.updated_on</code>. The
     * timestamp when this database record has last been updated.
     */
    public Timestamp getUpdatedOn() {
        return (Timestamp) get(13);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record14 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row14<Integer, String, String, BigDecimal, BigDecimal, BigDecimal, BigDecimal, Boolean, MapoverlaysReferenceTable, Integer, Integer, Timestamp, Timestamp, Timestamp> fieldsRow() {
        return (Row14) super.fieldsRow();
    }

    @Override
    public Row14<Integer, String, String, BigDecimal, BigDecimal, BigDecimal, BigDecimal, Boolean, MapoverlaysReferenceTable, Integer, Integer, Timestamp, Timestamp, Timestamp> valuesRow() {
        return (Row14) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return Mapoverlays.MAPOVERLAYS.ID;
    }

    @Override
    public Field<String> field2() {
        return Mapoverlays.MAPOVERLAYS.NAME;
    }

    @Override
    public Field<String> field3() {
        return Mapoverlays.MAPOVERLAYS.DESCRIPTION;
    }

    @Override
    public Field<BigDecimal> field4() {
        return Mapoverlays.MAPOVERLAYS.BOTTOM_LEFT_LAT;
    }

    @Override
    public Field<BigDecimal> field5() {
        return Mapoverlays.MAPOVERLAYS.BOTTOM_LEFT_LNG;
    }

    @Override
    public Field<BigDecimal> field6() {
        return Mapoverlays.MAPOVERLAYS.TOP_RIGHT_LAT;
    }

    @Override
    public Field<BigDecimal> field7() {
        return Mapoverlays.MAPOVERLAYS.TOP_RIGHT_LNG;
    }

    @Override
    public Field<Boolean> field8() {
        return Mapoverlays.MAPOVERLAYS.IS_LEGEND;
    }

    @Override
    public Field<MapoverlaysReferenceTable> field9() {
        return Mapoverlays.MAPOVERLAYS.REFERENCE_TABLE;
    }

    @Override
    public Field<Integer> field10() {
        return Mapoverlays.MAPOVERLAYS.FOREIGN_ID;
    }

    @Override
    public Field<Integer> field11() {
        return Mapoverlays.MAPOVERLAYS.DATASET_ID;
    }

    @Override
    public Field<Timestamp> field12() {
        return Mapoverlays.MAPOVERLAYS.RECORDING_DATE;
    }

    @Override
    public Field<Timestamp> field13() {
        return Mapoverlays.MAPOVERLAYS.CREATED_ON;
    }

    @Override
    public Field<Timestamp> field14() {
        return Mapoverlays.MAPOVERLAYS.UPDATED_ON;
    }

    @Override
    public Integer component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getName();
    }

    @Override
    public String component3() {
        return getDescription();
    }

    @Override
    public BigDecimal component4() {
        return getBottomLeftLat();
    }

    @Override
    public BigDecimal component5() {
        return getBottomLeftLng();
    }

    @Override
    public BigDecimal component6() {
        return getTopRightLat();
    }

    @Override
    public BigDecimal component7() {
        return getTopRightLng();
    }

    @Override
    public Boolean component8() {
        return getIsLegend();
    }

    @Override
    public MapoverlaysReferenceTable component9() {
        return getReferenceTable();
    }

    @Override
    public Integer component10() {
        return getForeignId();
    }

    @Override
    public Integer component11() {
        return getDatasetId();
    }

    @Override
    public Timestamp component12() {
        return getRecordingDate();
    }

    @Override
    public Timestamp component13() {
        return getCreatedOn();
    }

    @Override
    public Timestamp component14() {
        return getUpdatedOn();
    }

    @Override
    public Integer value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getName();
    }

    @Override
    public String value3() {
        return getDescription();
    }

    @Override
    public BigDecimal value4() {
        return getBottomLeftLat();
    }

    @Override
    public BigDecimal value5() {
        return getBottomLeftLng();
    }

    @Override
    public BigDecimal value6() {
        return getTopRightLat();
    }

    @Override
    public BigDecimal value7() {
        return getTopRightLng();
    }

    @Override
    public Boolean value8() {
        return getIsLegend();
    }

    @Override
    public MapoverlaysReferenceTable value9() {
        return getReferenceTable();
    }

    @Override
    public Integer value10() {
        return getForeignId();
    }

    @Override
    public Integer value11() {
        return getDatasetId();
    }

    @Override
    public Timestamp value12() {
        return getRecordingDate();
    }

    @Override
    public Timestamp value13() {
        return getCreatedOn();
    }

    @Override
    public Timestamp value14() {
        return getUpdatedOn();
    }

    @Override
    public MapoverlaysRecord value1(Integer value) {
        setId(value);
        return this;
    }

    @Override
    public MapoverlaysRecord value2(String value) {
        setName(value);
        return this;
    }

    @Override
    public MapoverlaysRecord value3(String value) {
        setDescription(value);
        return this;
    }

    @Override
    public MapoverlaysRecord value4(BigDecimal value) {
        setBottomLeftLat(value);
        return this;
    }

    @Override
    public MapoverlaysRecord value5(BigDecimal value) {
        setBottomLeftLng(value);
        return this;
    }

    @Override
    public MapoverlaysRecord value6(BigDecimal value) {
        setTopRightLat(value);
        return this;
    }

    @Override
    public MapoverlaysRecord value7(BigDecimal value) {
        setTopRightLng(value);
        return this;
    }

    @Override
    public MapoverlaysRecord value8(Boolean value) {
        setIsLegend(value);
        return this;
    }

    @Override
    public MapoverlaysRecord value9(MapoverlaysReferenceTable value) {
        setReferenceTable(value);
        return this;
    }

    @Override
    public MapoverlaysRecord value10(Integer value) {
        setForeignId(value);
        return this;
    }

    @Override
    public MapoverlaysRecord value11(Integer value) {
        setDatasetId(value);
        return this;
    }

    @Override
    public MapoverlaysRecord value12(Timestamp value) {
        setRecordingDate(value);
        return this;
    }

    @Override
    public MapoverlaysRecord value13(Timestamp value) {
        setCreatedOn(value);
        return this;
    }

    @Override
    public MapoverlaysRecord value14(Timestamp value) {
        setUpdatedOn(value);
        return this;
    }

    @Override
    public MapoverlaysRecord values(Integer value1, String value2, String value3, BigDecimal value4, BigDecimal value5, BigDecimal value6, BigDecimal value7, Boolean value8, MapoverlaysReferenceTable value9, Integer value10, Integer value11, Timestamp value12, Timestamp value13, Timestamp value14) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        value10(value10);
        value11(value11);
        value12(value12);
        value13(value13);
        value14(value14);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached MapoverlaysRecord
     */
    public MapoverlaysRecord() {
        super(Mapoverlays.MAPOVERLAYS);
    }

    /**
     * Create a detached, initialised MapoverlaysRecord
     */
    public MapoverlaysRecord(Integer id, String name, String description, BigDecimal bottomLeftLat, BigDecimal bottomLeftLng, BigDecimal topRightLat, BigDecimal topRightLng, Boolean isLegend, MapoverlaysReferenceTable referenceTable, Integer foreignId, Integer datasetId, Timestamp recordingDate, Timestamp createdOn, Timestamp updatedOn) {
        super(Mapoverlays.MAPOVERLAYS);

        setId(id);
        setName(name);
        setDescription(description);
        setBottomLeftLat(bottomLeftLat);
        setBottomLeftLng(bottomLeftLng);
        setTopRightLat(topRightLat);
        setTopRightLng(topRightLng);
        setIsLegend(isLegend);
        setReferenceTable(referenceTable);
        setForeignId(foreignId);
        setDatasetId(datasetId);
        setRecordingDate(recordingDate);
        setCreatedOn(createdOn);
        setUpdatedOn(updatedOn);
    }

    /**
     * Create a detached, initialised MapoverlaysRecord
     */
    public MapoverlaysRecord(jhi.germinate.server.database.codegen.tables.pojos.Mapoverlays value) {
        super(Mapoverlays.MAPOVERLAYS);

        if (value != null) {
            setId(value.getId());
            setName(value.getName());
            setDescription(value.getDescription());
            setBottomLeftLat(value.getBottomLeftLat());
            setBottomLeftLng(value.getBottomLeftLng());
            setTopRightLat(value.getTopRightLat());
            setTopRightLng(value.getTopRightLng());
            setIsLegend(value.getIsLegend());
            setReferenceTable(value.getReferenceTable());
            setForeignId(value.getForeignId());
            setDatasetId(value.getDatasetId());
            setRecordingDate(value.getRecordingDate());
            setCreatedOn(value.getCreatedOn());
            setUpdatedOn(value.getUpdatedOn());
        }
    }
    // @formatter:on
}
