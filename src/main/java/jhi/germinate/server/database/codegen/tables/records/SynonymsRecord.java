/*
 * This file is generated by jOOQ.
 */
package jhi.germinate.server.database.codegen.tables.records;


import java.sql.Timestamp;

import jhi.germinate.server.database.codegen.tables.Synonyms;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record6;
import org.jooq.Row6;
import org.jooq.impl.UpdatableRecordImpl;


// @formatter:off
/**
 * Allows the definition of synonyms for entries such as germinatebase entries
 * or marker names.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SynonymsRecord extends UpdatableRecordImpl<SynonymsRecord> implements Record6<Integer, Integer, Integer, String[], Timestamp, Timestamp> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>germinate_db.synonyms.id</code>. Primary id for this
     * table. This uniquely identifies the row.

     */
    public void setId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>germinate_db.synonyms.id</code>. Primary id for this
     * table. This uniquely identifies the row.

     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>germinate_db.synonyms.foreign_id</code>. Foreign key to
     * target table (l[targettable].id).
     */
    public void setForeignId(Integer value) {
        set(1, value);
    }

    /**
     * Getter for <code>germinate_db.synonyms.foreign_id</code>. Foreign key to
     * target table (l[targettable].id).
     */
    public Integer getForeignId() {
        return (Integer) get(1);
    }

    /**
     * Setter for <code>germinate_db.synonyms.synonymtype_id</code>. Foreign key
     * to synonymtypes (synonymnstypes.id).
     */
    public void setSynonymtypeId(Integer value) {
        set(2, value);
    }

    /**
     * Getter for <code>germinate_db.synonyms.synonymtype_id</code>. Foreign key
     * to synonymtypes (synonymnstypes.id).
     */
    public Integer getSynonymtypeId() {
        return (Integer) get(2);
    }

    /**
     * Setter for <code>germinate_db.synonyms.synonyms</code>. The synonyms as a
     * json array.
     */
    public void setSynonyms(String[] value) {
        set(3, value);
    }

    /**
     * Getter for <code>germinate_db.synonyms.synonyms</code>. The synonyms as a
     * json array.
     */
    public String[] getSynonyms() {
        return (String[]) get(3);
    }

    /**
     * Setter for <code>germinate_db.synonyms.created_on</code>. When the record
     * was created.
     */
    public void setCreatedOn(Timestamp value) {
        set(4, value);
    }

    /**
     * Getter for <code>germinate_db.synonyms.created_on</code>. When the record
     * was created.
     */
    public Timestamp getCreatedOn() {
        return (Timestamp) get(4);
    }

    /**
     * Setter for <code>germinate_db.synonyms.updated_on</code>. When the record
     * was updated. This may be different from the created on date if subsequent
     * changes have been made to the underlying record.
     */
    public void setUpdatedOn(Timestamp value) {
        set(5, value);
    }

    /**
     * Getter for <code>germinate_db.synonyms.updated_on</code>. When the record
     * was updated. This may be different from the created on date if subsequent
     * changes have been made to the underlying record.
     */
    public Timestamp getUpdatedOn() {
        return (Timestamp) get(5);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record6 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row6<Integer, Integer, Integer, String[], Timestamp, Timestamp> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    @Override
    public Row6<Integer, Integer, Integer, String[], Timestamp, Timestamp> valuesRow() {
        return (Row6) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return Synonyms.SYNONYMS.ID;
    }

    @Override
    public Field<Integer> field2() {
        return Synonyms.SYNONYMS.FOREIGN_ID;
    }

    @Override
    public Field<Integer> field3() {
        return Synonyms.SYNONYMS.SYNONYMTYPE_ID;
    }

    @Override
    public Field<String[]> field4() {
        return Synonyms.SYNONYMS.SYNONYMS_;
    }

    @Override
    public Field<Timestamp> field5() {
        return Synonyms.SYNONYMS.CREATED_ON;
    }

    @Override
    public Field<Timestamp> field6() {
        return Synonyms.SYNONYMS.UPDATED_ON;
    }

    @Override
    public Integer component1() {
        return getId();
    }

    @Override
    public Integer component2() {
        return getForeignId();
    }

    @Override
    public Integer component3() {
        return getSynonymtypeId();
    }

    @Override
    public String[] component4() {
        return getSynonyms();
    }

    @Override
    public Timestamp component5() {
        return getCreatedOn();
    }

    @Override
    public Timestamp component6() {
        return getUpdatedOn();
    }

    @Override
    public Integer value1() {
        return getId();
    }

    @Override
    public Integer value2() {
        return getForeignId();
    }

    @Override
    public Integer value3() {
        return getSynonymtypeId();
    }

    @Override
    public String[] value4() {
        return getSynonyms();
    }

    @Override
    public Timestamp value5() {
        return getCreatedOn();
    }

    @Override
    public Timestamp value6() {
        return getUpdatedOn();
    }

    @Override
    public SynonymsRecord value1(Integer value) {
        setId(value);
        return this;
    }

    @Override
    public SynonymsRecord value2(Integer value) {
        setForeignId(value);
        return this;
    }

    @Override
    public SynonymsRecord value3(Integer value) {
        setSynonymtypeId(value);
        return this;
    }

    @Override
    public SynonymsRecord value4(String[] value) {
        setSynonyms(value);
        return this;
    }

    @Override
    public SynonymsRecord value5(Timestamp value) {
        setCreatedOn(value);
        return this;
    }

    @Override
    public SynonymsRecord value6(Timestamp value) {
        setUpdatedOn(value);
        return this;
    }

    @Override
    public SynonymsRecord values(Integer value1, Integer value2, Integer value3, String[] value4, Timestamp value5, Timestamp value6) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached SynonymsRecord
     */
    public SynonymsRecord() {
        super(Synonyms.SYNONYMS);
    }

    /**
     * Create a detached, initialised SynonymsRecord
     */
    public SynonymsRecord(Integer id, Integer foreignId, Integer synonymtypeId, String[] synonyms, Timestamp createdOn, Timestamp updatedOn) {
        super(Synonyms.SYNONYMS);

        setId(id);
        setForeignId(foreignId);
        setSynonymtypeId(synonymtypeId);
        setSynonyms(synonyms);
        setCreatedOn(createdOn);
        setUpdatedOn(updatedOn);
    }

    /**
     * Create a detached, initialised SynonymsRecord
     */
    public SynonymsRecord(jhi.germinate.server.database.codegen.tables.pojos.Synonyms value) {
        super(Synonyms.SYNONYMS);

        if (value != null) {
            setId(value.getId());
            setForeignId(value.getForeignId());
            setSynonymtypeId(value.getSynonymtypeId());
            setSynonyms(value.getSynonyms());
            setCreatedOn(value.getCreatedOn());
            setUpdatedOn(value.getUpdatedOn());
        }
    }
    // @formatter:on
}
