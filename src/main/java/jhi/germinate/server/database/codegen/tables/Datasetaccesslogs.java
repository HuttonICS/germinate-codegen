/*
 * This file is generated by jOOQ.
 */
package jhi.germinate.server.database.codegen.tables;


import java.sql.Timestamp;

import jhi.germinate.server.database.codegen.GerminateDb;
import jhi.germinate.server.database.codegen.tables.records.DatasetaccesslogsRecord;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


// @formatter:off
/**
 * If enabled, tracks which user accessed which datasets.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Datasetaccesslogs extends TableImpl<DatasetaccesslogsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>germinate_db.datasetaccesslogs</code>
     */
    public static final Datasetaccesslogs DATASETACCESSLOGS = new Datasetaccesslogs();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DatasetaccesslogsRecord> getRecordType() {
        return DatasetaccesslogsRecord.class;
    }

    /**
     * The column <code>germinate_db.datasetaccesslogs.id</code>. Primary id for
     * this table. This uniquely identifies the row.
     */
    public final TableField<DatasetaccesslogsRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "Primary id for this table. This uniquely identifies the row.");

    /**
     * The column <code>germinate_db.datasetaccesslogs.user_id</code>.
     */
    public final TableField<DatasetaccesslogsRecord, Integer> USER_ID = createField(DSL.name("user_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>germinate_db.datasetaccesslogs.user_name</code>.
     */
    public final TableField<DatasetaccesslogsRecord, String> USER_NAME = createField(DSL.name("user_name"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>germinate_db.datasetaccesslogs.user_email</code>.
     */
    public final TableField<DatasetaccesslogsRecord, String> USER_EMAIL = createField(DSL.name("user_email"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>germinate_db.datasetaccesslogs.user_institution</code>.
     */
    public final TableField<DatasetaccesslogsRecord, String> USER_INSTITUTION = createField(DSL.name("user_institution"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>germinate_db.datasetaccesslogs.dataset_id</code>.
     */
    public final TableField<DatasetaccesslogsRecord, Integer> DATASET_ID = createField(DSL.name("dataset_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>germinate_db.datasetaccesslogs.reason</code>.
     */
    public final TableField<DatasetaccesslogsRecord, String> REASON = createField(DSL.name("reason"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>germinate_db.datasetaccesslogs.created_on</code>. When
     * the record was created.
     */
    public final TableField<DatasetaccesslogsRecord, Timestamp> CREATED_ON = createField(DSL.name("created_on"), SQLDataType.TIMESTAMP(0).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.TIMESTAMP)), this, "When the record was created.");

    /**
     * The column <code>germinate_db.datasetaccesslogs.updated_on</code>. When
     * the record was updated. This may be different from the created on date if
     * subsequent changes have been made to the underlying record.
     */
    public final TableField<DatasetaccesslogsRecord, Timestamp> UPDATED_ON = createField(DSL.name("updated_on"), SQLDataType.TIMESTAMP(0).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.TIMESTAMP)), this, "When the record was updated. This may be different from the created on date if subsequent changes have been made to the underlying record.");

    private Datasetaccesslogs(Name alias, Table<DatasetaccesslogsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Datasetaccesslogs(Name alias, Table<DatasetaccesslogsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("If enabled, tracks which user accessed which datasets."), TableOptions.table());
    }

    /**
     * Create an aliased <code>germinate_db.datasetaccesslogs</code> table
     * reference
     */
    public Datasetaccesslogs(String alias) {
        this(DSL.name(alias), DATASETACCESSLOGS);
    }

    /**
     * Create an aliased <code>germinate_db.datasetaccesslogs</code> table
     * reference
     */
    public Datasetaccesslogs(Name alias) {
        this(alias, DATASETACCESSLOGS);
    }

    /**
     * Create a <code>germinate_db.datasetaccesslogs</code> table reference
     */
    public Datasetaccesslogs() {
        this(DSL.name("datasetaccesslogs"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : GerminateDb.GERMINATE_DB;
    }

    @Override
    public Identity<DatasetaccesslogsRecord, Integer> getIdentity() {
        return (Identity<DatasetaccesslogsRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<DatasetaccesslogsRecord> getPrimaryKey() {
        return Internal.createUniqueKey(Datasetaccesslogs.DATASETACCESSLOGS, DSL.name("KEY_datasetaccesslogs_PRIMARY"), new TableField[] { Datasetaccesslogs.DATASETACCESSLOGS.ID }, true);
    }

    @Override
    public Datasetaccesslogs as(String alias) {
        return new Datasetaccesslogs(DSL.name(alias), this);
    }

    @Override
    public Datasetaccesslogs as(Name alias) {
        return new Datasetaccesslogs(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Datasetaccesslogs rename(String name) {
        return new Datasetaccesslogs(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Datasetaccesslogs rename(Name name) {
        return new Datasetaccesslogs(name, null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<Integer, Integer, String, String, String, Integer, String, Timestamp, Timestamp> fieldsRow() {
        return (Row9) super.fieldsRow();
    }
    // @formatter:on
}
