/*
 * This file is generated by jOOQ.
 */
package jhi.germinate.server.database.codegen.tables;


import java.sql.Timestamp;

import jhi.germinate.server.database.codegen.GerminateDb;
import jhi.germinate.server.database.codegen.tables.records.CollaboratorsRecord;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


// @formatter:off
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Collaborators extends TableImpl<CollaboratorsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>germinate_db.collaborators</code>
     */
    public static final Collaborators COLLABORATORS = new Collaborators();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CollaboratorsRecord> getRecordType() {
        return CollaboratorsRecord.class;
    }

    /**
     * The column <code>germinate_db.collaborators.id</code>.
     */
    public final TableField<CollaboratorsRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>germinate_db.collaborators.first_name</code>. Last name
     * (surname) of the author(s), researcher(s), scientist(s), student(s)
     * responsible for producing the information product.
     */
    public final TableField<CollaboratorsRecord, String> FIRST_NAME = createField(DSL.name("first_name"), SQLDataType.VARCHAR(255).nullable(false), this, "Last name (surname) of the author(s), researcher(s), scientist(s), student(s) responsible for producing the information product.");

    /**
     * The column <code>germinate_db.collaborators.last_name</code>. First name
     * (and middle name if available) of the author(s), researcher(s),
     * scientist(s), student(s) responsible for producing the information
     * product.
     */
    public final TableField<CollaboratorsRecord, String> LAST_NAME = createField(DSL.name("last_name"), SQLDataType.VARCHAR(255).nullable(false), this, "First name (and middle name if available) of the author(s), researcher(s), scientist(s), student(s) responsible for producing the information product.");

    /**
     * The column <code>germinate_db.collaborators.email</code>. E-mail address
     * of the author(s), researcher(s), scientist(s), student(s) responsible for
     * producing the information product.
     */
    public final TableField<CollaboratorsRecord, String> EMAIL = createField(DSL.name("email"), SQLDataType.VARCHAR(255), this, "E-mail address of the author(s), researcher(s), scientist(s), student(s) responsible for producing the information product.");

    /**
     * The column <code>germinate_db.collaborators.phone</code>. Phone number of
     * the author(s), researcher(s), scientist(s), student(s) responsible for
     * producing the information product.
     */
    public final TableField<CollaboratorsRecord, String> PHONE = createField(DSL.name("phone"), SQLDataType.VARCHAR(255), this, "Phone number of the author(s), researcher(s), scientist(s), student(s) responsible for producing the information product.");

    /**
     * The column <code>germinate_db.collaborators.external_id</code>. An
     * identifier for the data submitter. If that submitter is an individual,
     * ORCID identifiers are recommended.
     */
    public final TableField<CollaboratorsRecord, String> EXTERNAL_ID = createField(DSL.name("external_id"), SQLDataType.VARCHAR(255), this, "An identifier for the data submitter. If that submitter is an individual, ORCID identifiers are recommended.");

    /**
     * The column <code>germinate_db.collaborators.institution_id</code>.
     * Author's affiliation when the resource was created. Foreign key to
     * 'institutions'
     */
    public final TableField<CollaboratorsRecord, Integer> INSTITUTION_ID = createField(DSL.name("institution_id"), SQLDataType.INTEGER, this, "Author's affiliation when the resource was created. Foreign key to 'institutions'");

    /**
     * The column <code>germinate_db.collaborators.created_on</code>. When the
     * record was created.
     */
    public final TableField<CollaboratorsRecord, Timestamp> CREATED_ON = createField(DSL.name("created_on"), SQLDataType.TIMESTAMP(0).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.TIMESTAMP)), this, "When the record was created.");

    /**
     * The column <code>germinate_db.collaborators.updated_on</code>. When the
     * record was updated. This may be different from the created on date if
     * subsequent changes have been made to the underlying record.
     */
    public final TableField<CollaboratorsRecord, Timestamp> UPDATED_ON = createField(DSL.name("updated_on"), SQLDataType.TIMESTAMP(0).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.TIMESTAMP)), this, "When the record was updated. This may be different from the created on date if subsequent changes have been made to the underlying record.");

    private Collaborators(Name alias, Table<CollaboratorsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Collaborators(Name alias, Table<CollaboratorsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>germinate_db.collaborators</code> table reference
     */
    public Collaborators(String alias) {
        this(DSL.name(alias), COLLABORATORS);
    }

    /**
     * Create an aliased <code>germinate_db.collaborators</code> table reference
     */
    public Collaborators(Name alias) {
        this(alias, COLLABORATORS);
    }

    /**
     * Create a <code>germinate_db.collaborators</code> table reference
     */
    public Collaborators() {
        this(DSL.name("collaborators"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : GerminateDb.GERMINATE_DB;
    }

    @Override
    public Identity<CollaboratorsRecord, Integer> getIdentity() {
        return (Identity<CollaboratorsRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<CollaboratorsRecord> getPrimaryKey() {
        return Internal.createUniqueKey(Collaborators.COLLABORATORS, DSL.name("KEY_collaborators_PRIMARY"), new TableField[] { Collaborators.COLLABORATORS.ID }, true);
    }

    @Override
    public Collaborators as(String alias) {
        return new Collaborators(DSL.name(alias), this);
    }

    @Override
    public Collaborators as(Name alias) {
        return new Collaborators(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Collaborators rename(String name) {
        return new Collaborators(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Collaborators rename(Name name) {
        return new Collaborators(name, null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<Integer, String, String, String, String, String, Integer, Timestamp, Timestamp> fieldsRow() {
        return (Row9) super.fieldsRow();
    }
    // @formatter:on
}
