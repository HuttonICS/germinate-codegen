/*
 * This file is generated by jOOQ.
 */
package jhi.germinate.server.database.codegen.tables.records;


import jhi.germinate.server.database.codegen.tables.ViewTableMapdefinitions;

import org.jooq.Field;
import org.jooq.Record10;
import org.jooq.Row10;
import org.jooq.impl.TableRecordImpl;


// @formatter:off
/**
 * VIEW
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ViewTableMapdefinitionsRecord extends TableRecordImpl<ViewTableMapdefinitionsRecord> implements Record10<Integer, String, String[], String, Integer, Integer, Boolean, String, String, Double> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>germinate_db.view_table_mapdefinitions.marker_id</code>.
     * Primary id for this table. This uniquely identifies the row.
     */
    public void setMarkerId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>germinate_db.view_table_mapdefinitions.marker_id</code>.
     * Primary id for this table. This uniquely identifies the row.
     */
    public Integer getMarkerId() {
        return (Integer) get(0);
    }

    /**
     * Setter for
     * <code>germinate_db.view_table_mapdefinitions.marker_name</code>. The name
     * of the marker. This should be a unique name which identifies the marker.
     */
    public void setMarkerName(String value) {
        set(1, value);
    }

    /**
     * Getter for
     * <code>germinate_db.view_table_mapdefinitions.marker_name</code>. The name
     * of the marker. This should be a unique name which identifies the marker.
     */
    public String getMarkerName() {
        return (String) get(1);
    }

    /**
     * Setter for <code>germinate_db.view_table_mapdefinitions.synonyms</code>.
     * The synonyms as a json array.
     */
    public void setSynonyms(String[] value) {
        set(2, value);
    }

    /**
     * Getter for <code>germinate_db.view_table_mapdefinitions.synonyms</code>.
     * The synonyms as a json array.
     */
    public String[] getSynonyms() {
        return (String[]) get(2);
    }

    /**
     * Setter for
     * <code>germinate_db.view_table_mapdefinitions.map_feature_type</code>.
     * Description of the feature type. This could include a definition of the
     * marker type such as 'SNP', 'KASP' or 'AFLP'.
     */
    public void setMapFeatureType(String value) {
        set(3, value);
    }

    /**
     * Getter for
     * <code>germinate_db.view_table_mapdefinitions.map_feature_type</code>.
     * Description of the feature type. This could include a definition of the
     * marker type such as 'SNP', 'KASP' or 'AFLP'.
     */
    public String getMapFeatureType() {
        return (String) get(3);
    }

    /**
     * Setter for <code>germinate_db.view_table_mapdefinitions.map_id</code>.
     * Primary id for this table. This uniquely identifies the row.
     */
    public void setMapId(Integer value) {
        set(4, value);
    }

    /**
     * Getter for <code>germinate_db.view_table_mapdefinitions.map_id</code>.
     * Primary id for this table. This uniquely identifies the row.
     */
    public Integer getMapId() {
        return (Integer) get(4);
    }

    /**
     * Setter for <code>germinate_db.view_table_mapdefinitions.user_id</code>.
     * Foreign key to Gatekeeper users (Gatekeeper users.id).
     */
    public void setUserId(Integer value) {
        set(5, value);
    }

    /**
     * Getter for <code>germinate_db.view_table_mapdefinitions.user_id</code>.
     * Foreign key to Gatekeeper users (Gatekeeper users.id).
     */
    public Integer getUserId() {
        return (Integer) get(5);
    }

    /**
     * Setter for
     * <code>germinate_db.view_table_mapdefinitions.visibility</code>.
     * Determines if the map is visible to the Germinate interface or hidden.
     */
    public void setVisibility(Boolean value) {
        set(6, value);
    }

    /**
     * Getter for
     * <code>germinate_db.view_table_mapdefinitions.visibility</code>.
     * Determines if the map is visible to the Germinate interface or hidden.
     */
    public Boolean getVisibility() {
        return (Boolean) get(6);
    }

    /**
     * Setter for <code>germinate_db.view_table_mapdefinitions.map_name</code>.
     * Describes the map.
     */
    public void setMapName(String value) {
        set(7, value);
    }

    /**
     * Getter for <code>germinate_db.view_table_mapdefinitions.map_name</code>.
     * Describes the map.
     */
    public String getMapName() {
        return (String) get(7);
    }

    /**
     * Setter for
     * <code>germinate_db.view_table_mapdefinitions.chromosome</code>. The
     * chromosome/linkage group that this marker is found on.
     */
    public void setChromosome(String value) {
        set(8, value);
    }

    /**
     * Getter for
     * <code>germinate_db.view_table_mapdefinitions.chromosome</code>. The
     * chromosome/linkage group that this marker is found on.
     */
    public String getChromosome() {
        return (String) get(8);
    }

    /**
     * Setter for <code>germinate_db.view_table_mapdefinitions.position</code>.
     * Used if the markers location spans over an area more than a single point
     * on the maps. Determines the marker start location.
     */
    public void setPosition(Double value) {
        set(9, value);
    }

    /**
     * Getter for <code>germinate_db.view_table_mapdefinitions.position</code>.
     * Used if the markers location spans over an area more than a single point
     * on the maps. Determines the marker start location.
     */
    public Double getPosition() {
        return (Double) get(9);
    }

    // -------------------------------------------------------------------------
    // Record10 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row10<Integer, String, String[], String, Integer, Integer, Boolean, String, String, Double> fieldsRow() {
        return (Row10) super.fieldsRow();
    }

    @Override
    public Row10<Integer, String, String[], String, Integer, Integer, Boolean, String, String, Double> valuesRow() {
        return (Row10) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return ViewTableMapdefinitions.VIEW_TABLE_MAPDEFINITIONS.MARKER_ID;
    }

    @Override
    public Field<String> field2() {
        return ViewTableMapdefinitions.VIEW_TABLE_MAPDEFINITIONS.MARKER_NAME;
    }

    @Override
    public Field<String[]> field3() {
        return ViewTableMapdefinitions.VIEW_TABLE_MAPDEFINITIONS.SYNONYMS;
    }

    @Override
    public Field<String> field4() {
        return ViewTableMapdefinitions.VIEW_TABLE_MAPDEFINITIONS.MAP_FEATURE_TYPE;
    }

    @Override
    public Field<Integer> field5() {
        return ViewTableMapdefinitions.VIEW_TABLE_MAPDEFINITIONS.MAP_ID;
    }

    @Override
    public Field<Integer> field6() {
        return ViewTableMapdefinitions.VIEW_TABLE_MAPDEFINITIONS.USER_ID;
    }

    @Override
    public Field<Boolean> field7() {
        return ViewTableMapdefinitions.VIEW_TABLE_MAPDEFINITIONS.VISIBILITY;
    }

    @Override
    public Field<String> field8() {
        return ViewTableMapdefinitions.VIEW_TABLE_MAPDEFINITIONS.MAP_NAME;
    }

    @Override
    public Field<String> field9() {
        return ViewTableMapdefinitions.VIEW_TABLE_MAPDEFINITIONS.CHROMOSOME;
    }

    @Override
    public Field<Double> field10() {
        return ViewTableMapdefinitions.VIEW_TABLE_MAPDEFINITIONS.POSITION;
    }

    @Override
    public Integer component1() {
        return getMarkerId();
    }

    @Override
    public String component2() {
        return getMarkerName();
    }

    @Override
    public String[] component3() {
        return getSynonyms();
    }

    @Override
    public String component4() {
        return getMapFeatureType();
    }

    @Override
    public Integer component5() {
        return getMapId();
    }

    @Override
    public Integer component6() {
        return getUserId();
    }

    @Override
    public Boolean component7() {
        return getVisibility();
    }

    @Override
    public String component8() {
        return getMapName();
    }

    @Override
    public String component9() {
        return getChromosome();
    }

    @Override
    public Double component10() {
        return getPosition();
    }

    @Override
    public Integer value1() {
        return getMarkerId();
    }

    @Override
    public String value2() {
        return getMarkerName();
    }

    @Override
    public String[] value3() {
        return getSynonyms();
    }

    @Override
    public String value4() {
        return getMapFeatureType();
    }

    @Override
    public Integer value5() {
        return getMapId();
    }

    @Override
    public Integer value6() {
        return getUserId();
    }

    @Override
    public Boolean value7() {
        return getVisibility();
    }

    @Override
    public String value8() {
        return getMapName();
    }

    @Override
    public String value9() {
        return getChromosome();
    }

    @Override
    public Double value10() {
        return getPosition();
    }

    @Override
    public ViewTableMapdefinitionsRecord value1(Integer value) {
        setMarkerId(value);
        return this;
    }

    @Override
    public ViewTableMapdefinitionsRecord value2(String value) {
        setMarkerName(value);
        return this;
    }

    @Override
    public ViewTableMapdefinitionsRecord value3(String[] value) {
        setSynonyms(value);
        return this;
    }

    @Override
    public ViewTableMapdefinitionsRecord value4(String value) {
        setMapFeatureType(value);
        return this;
    }

    @Override
    public ViewTableMapdefinitionsRecord value5(Integer value) {
        setMapId(value);
        return this;
    }

    @Override
    public ViewTableMapdefinitionsRecord value6(Integer value) {
        setUserId(value);
        return this;
    }

    @Override
    public ViewTableMapdefinitionsRecord value7(Boolean value) {
        setVisibility(value);
        return this;
    }

    @Override
    public ViewTableMapdefinitionsRecord value8(String value) {
        setMapName(value);
        return this;
    }

    @Override
    public ViewTableMapdefinitionsRecord value9(String value) {
        setChromosome(value);
        return this;
    }

    @Override
    public ViewTableMapdefinitionsRecord value10(Double value) {
        setPosition(value);
        return this;
    }

    @Override
    public ViewTableMapdefinitionsRecord values(Integer value1, String value2, String[] value3, String value4, Integer value5, Integer value6, Boolean value7, String value8, String value9, Double value10) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        value10(value10);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ViewTableMapdefinitionsRecord
     */
    public ViewTableMapdefinitionsRecord() {
        super(ViewTableMapdefinitions.VIEW_TABLE_MAPDEFINITIONS);
    }

    /**
     * Create a detached, initialised ViewTableMapdefinitionsRecord
     */
    public ViewTableMapdefinitionsRecord(Integer markerId, String markerName, String[] synonyms, String mapFeatureType, Integer mapId, Integer userId, Boolean visibility, String mapName, String chromosome, Double position) {
        super(ViewTableMapdefinitions.VIEW_TABLE_MAPDEFINITIONS);

        setMarkerId(markerId);
        setMarkerName(markerName);
        setSynonyms(synonyms);
        setMapFeatureType(mapFeatureType);
        setMapId(mapId);
        setUserId(userId);
        setVisibility(visibility);
        setMapName(mapName);
        setChromosome(chromosome);
        setPosition(position);
    }

    /**
     * Create a detached, initialised ViewTableMapdefinitionsRecord
     */
    public ViewTableMapdefinitionsRecord(jhi.germinate.server.database.codegen.tables.pojos.ViewTableMapdefinitions value) {
        super(ViewTableMapdefinitions.VIEW_TABLE_MAPDEFINITIONS);

        if (value != null) {
            setMarkerId(value.getMarkerId());
            setMarkerName(value.getMarkerName());
            setSynonyms(value.getSynonyms());
            setMapFeatureType(value.getMapFeatureType());
            setMapId(value.getMapId());
            setUserId(value.getUserId());
            setVisibility(value.getVisibility());
            setMapName(value.getMapName());
            setChromosome(value.getChromosome());
            setPosition(value.getPosition());
        }
    }
    // @formatter:on
}
