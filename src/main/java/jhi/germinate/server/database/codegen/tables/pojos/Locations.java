/*
 * This file is generated by jOOQ.
 */
package jhi.germinate.server.database.codegen.tables.pojos;


import java.io.Serializable;
import java.math.BigDecimal;
import java.sql.Timestamp;


// @formatter:off
/**
 * Describes locations. Locations can be collecting sites or the location of any
 * geographical feature such as research institutes or lab locations.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Locations implements Serializable {

    private static final long serialVersionUID = 1L;

    private Integer    id;
    private Integer    locationtypeId;
    private Integer    countryId;
    private String     state;
    private String     region;
    private String     siteName;
    private String     siteNameShort;
    private BigDecimal elevation;
    private BigDecimal latitude;
    private BigDecimal longitude;
    private Integer    coordinateUncertainty;
    private String     coordinateDatum;
    private String     georeferencingMethod;
    private Timestamp  createdOn;
    private Timestamp  updatedOn;

    public Locations() {}

    public Locations(Locations value) {
        this.id = value.id;
        this.locationtypeId = value.locationtypeId;
        this.countryId = value.countryId;
        this.state = value.state;
        this.region = value.region;
        this.siteName = value.siteName;
        this.siteNameShort = value.siteNameShort;
        this.elevation = value.elevation;
        this.latitude = value.latitude;
        this.longitude = value.longitude;
        this.coordinateUncertainty = value.coordinateUncertainty;
        this.coordinateDatum = value.coordinateDatum;
        this.georeferencingMethod = value.georeferencingMethod;
        this.createdOn = value.createdOn;
        this.updatedOn = value.updatedOn;
    }

    public Locations(
        Integer    id,
        Integer    locationtypeId,
        Integer    countryId,
        String     state,
        String     region,
        String     siteName,
        String     siteNameShort,
        BigDecimal elevation,
        BigDecimal latitude,
        BigDecimal longitude,
        Integer    coordinateUncertainty,
        String     coordinateDatum,
        String     georeferencingMethod,
        Timestamp  createdOn,
        Timestamp  updatedOn
    ) {
        this.id = id;
        this.locationtypeId = locationtypeId;
        this.countryId = countryId;
        this.state = state;
        this.region = region;
        this.siteName = siteName;
        this.siteNameShort = siteNameShort;
        this.elevation = elevation;
        this.latitude = latitude;
        this.longitude = longitude;
        this.coordinateUncertainty = coordinateUncertainty;
        this.coordinateDatum = coordinateDatum;
        this.georeferencingMethod = georeferencingMethod;
        this.createdOn = createdOn;
        this.updatedOn = updatedOn;
    }

    /**
     * Getter for <code>germinate_db.locations.id</code>. Primary id for this
     * table. This uniquely identifies the row.
     */
    public Integer getId() {
        return this.id;
    }

    /**
     * Setter for <code>germinate_db.locations.id</code>. Primary id for this
     * table. This uniquely identifies the row.
     */
    public void setId(Integer id) {
        this.id = id;
    }

    /**
     * Getter for <code>germinate_db.locations.locationtype_id</code>. Foreign
     * key to locations (locations.id).
     */
    public Integer getLocationtypeId() {
        return this.locationtypeId;
    }

    /**
     * Setter for <code>germinate_db.locations.locationtype_id</code>. Foreign
     * key to locations (locations.id).
     */
    public void setLocationtypeId(Integer locationtypeId) {
        this.locationtypeId = locationtypeId;
    }

    /**
     * Getter for <code>germinate_db.locations.country_id</code>. Foreign key to
     * countries (countries.id).
     */
    public Integer getCountryId() {
        return this.countryId;
    }

    /**
     * Setter for <code>germinate_db.locations.country_id</code>. Foreign key to
     * countries (countries.id).
     */
    public void setCountryId(Integer countryId) {
        this.countryId = countryId;
    }

    /**
     * Getter for <code>germinate_db.locations.state</code>. The state where the
     * location is if this exists.
     */
    public String getState() {
        return this.state;
    }

    /**
     * Setter for <code>germinate_db.locations.state</code>. The state where the
     * location is if this exists.
     */
    public void setState(String state) {
        this.state = state;
    }

    /**
     * Getter for <code>germinate_db.locations.region</code>. The region where
     * the location is if this exists.
     */
    public String getRegion() {
        return this.region;
    }

    /**
     * Setter for <code>germinate_db.locations.region</code>. The region where
     * the location is if this exists.
     */
    public void setRegion(String region) {
        this.region = region;
    }

    /**
     * Getter for <code>germinate_db.locations.site_name</code>. The site name
     * where the location is.
     */
    public String getSiteName() {
        return this.siteName;
    }

    /**
     * Setter for <code>germinate_db.locations.site_name</code>. The site name
     * where the location is.
     */
    public void setSiteName(String siteName) {
        this.siteName = siteName;
    }

    /**
     * Getter for <code>germinate_db.locations.site_name_short</code>. Shortened
     * site name which can be used in tables within Germinate.
     */
    public String getSiteNameShort() {
        return this.siteNameShort;
    }

    /**
     * Setter for <code>germinate_db.locations.site_name_short</code>. Shortened
     * site name which can be used in tables within Germinate.
     */
    public void setSiteNameShort(String siteNameShort) {
        this.siteNameShort = siteNameShort;
    }

    /**
     * Getter for <code>germinate_db.locations.elevation</code>. The elevation
     * of the site in metres.
     */
    public BigDecimal getElevation() {
        return this.elevation;
    }

    /**
     * Setter for <code>germinate_db.locations.elevation</code>. The elevation
     * of the site in metres.
     */
    public void setElevation(BigDecimal elevation) {
        this.elevation = elevation;
    }

    /**
     * Getter for <code>germinate_db.locations.latitude</code>. Latitude of the
     * location.
     */
    public BigDecimal getLatitude() {
        return this.latitude;
    }

    /**
     * Setter for <code>germinate_db.locations.latitude</code>. Latitude of the
     * location.
     */
    public void setLatitude(BigDecimal latitude) {
        this.latitude = latitude;
    }

    /**
     * Getter for <code>germinate_db.locations.longitude</code>. Longitude of
     * the location.
     */
    public BigDecimal getLongitude() {
        return this.longitude;
    }

    /**
     * Setter for <code>germinate_db.locations.longitude</code>. Longitude of
     * the location.
     */
    public void setLongitude(BigDecimal longitude) {
        this.longitude = longitude;
    }

    /**
     * Getter for <code>germinate_db.locations.coordinate_uncertainty</code>.
     * Uncertainty associated with the coordinates in metres. Leave the value
     * empty if the uncertainty is unknown. 
     */
    public Integer getCoordinateUncertainty() {
        return this.coordinateUncertainty;
    }

    /**
     * Setter for <code>germinate_db.locations.coordinate_uncertainty</code>.
     * Uncertainty associated with the coordinates in metres. Leave the value
     * empty if the uncertainty is unknown. 
     */
    public void setCoordinateUncertainty(Integer coordinateUncertainty) {
        this.coordinateUncertainty = coordinateUncertainty;
    }

    /**
     * Getter for <code>germinate_db.locations.coordinate_datum</code>. The
     * geodetic datum or spatial reference system upon which the coordinates
     * given in decimal latitude and decimal longitude are based (e.g. WGS84,
     * ETRS89, NAD83). The GPS uses the WGS84 datum.
     */
    public String getCoordinateDatum() {
        return this.coordinateDatum;
    }

    /**
     * Setter for <code>germinate_db.locations.coordinate_datum</code>. The
     * geodetic datum or spatial reference system upon which the coordinates
     * given in decimal latitude and decimal longitude are based (e.g. WGS84,
     * ETRS89, NAD83). The GPS uses the WGS84 datum.
     */
    public void setCoordinateDatum(String coordinateDatum) {
        this.coordinateDatum = coordinateDatum;
    }

    /**
     * Getter for <code>germinate_db.locations.georeferencing_method</code>. The
     * georeferencing method used (GPS, determined from map, gazetteer, or
     * estimated using software). Leave the value empty if georeferencing method
     * is not known.
     */
    public String getGeoreferencingMethod() {
        return this.georeferencingMethod;
    }

    /**
     * Setter for <code>germinate_db.locations.georeferencing_method</code>. The
     * georeferencing method used (GPS, determined from map, gazetteer, or
     * estimated using software). Leave the value empty if georeferencing method
     * is not known.
     */
    public void setGeoreferencingMethod(String georeferencingMethod) {
        this.georeferencingMethod = georeferencingMethod;
    }

    /**
     * Getter for <code>germinate_db.locations.created_on</code>. When the
     * record was created.
     */
    public Timestamp getCreatedOn() {
        return this.createdOn;
    }

    /**
     * Setter for <code>germinate_db.locations.created_on</code>. When the
     * record was created.
     */
    public void setCreatedOn(Timestamp createdOn) {
        this.createdOn = createdOn;
    }

    /**
     * Getter for <code>germinate_db.locations.updated_on</code>. When the
     * record was updated. This may be different from the created on date if
     * subsequent changes have been made to the underlying record.
     */
    public Timestamp getUpdatedOn() {
        return this.updatedOn;
    }

    /**
     * Setter for <code>germinate_db.locations.updated_on</code>. When the
     * record was updated. This may be different from the created on date if
     * subsequent changes have been made to the underlying record.
     */
    public void setUpdatedOn(Timestamp updatedOn) {
        this.updatedOn = updatedOn;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("Locations (");

        sb.append(id);
        sb.append(", ").append(locationtypeId);
        sb.append(", ").append(countryId);
        sb.append(", ").append(state);
        sb.append(", ").append(region);
        sb.append(", ").append(siteName);
        sb.append(", ").append(siteNameShort);
        sb.append(", ").append(elevation);
        sb.append(", ").append(latitude);
        sb.append(", ").append(longitude);
        sb.append(", ").append(coordinateUncertainty);
        sb.append(", ").append(coordinateDatum);
        sb.append(", ").append(georeferencingMethod);
        sb.append(", ").append(createdOn);
        sb.append(", ").append(updatedOn);

        sb.append(")");
        return sb.toString();
    }
    // @formatter:on
}
